
lab3_p1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000198  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000254  0800025c  0001025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000254  08000254  00010254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000258  08000258  00010258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  0001025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  0800025c  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000001c  0800025c  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0001025c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000714  00000000  00000000  00010284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000021a  00000000  00000000  00010998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000078  00000000  00000000  00010bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000050  00000000  00000000  00010c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0000059e  00000000  00000000  00010c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0000033e  00000000  00000000  0001121e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .comment      00000053  00000000  00000000  0001155c  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000000c4  00000000  00000000  000115b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000000 	.word	0x20000000
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800023c 	.word	0x0800023c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000004 	.word	0x20000004
 8000100:	0800023c 	.word	0x0800023c

08000104 <main>:

#define LEDDELAY    1600000

void delay(volatile uint32_t);

int main(void) {
 8000104:	b580      	push	{r7, lr}
 8000106:	af00      	add	r7, sp, #0

    /* Enable GPIOABC clock */
    RCC->IOPENR |= 7U ; 	//A,B,C PINLERINI AÃ‡AR
 8000108:	4b15      	ldr	r3, [pc, #84]	; (8000160 <main+0x5c>)
 800010a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800010c:	4b14      	ldr	r3, [pc, #80]	; (8000160 <main+0x5c>)
 800010e:	2107      	movs	r1, #7
 8000110:	430a      	orrs	r2, r1
 8000112:	635a      	str	r2, [r3, #52]	; 0x34


    GPIOA->MODER &= ~(3U << 2*0); 	//ICERIYI SIFIRLAR YANI INPUT OLARAK AYARLAR --AND
 8000114:	23a0      	movs	r3, #160	; 0xa0
 8000116:	05db      	lsls	r3, r3, #23
 8000118:	681a      	ldr	r2, [r3, #0]
 800011a:	23a0      	movs	r3, #160	; 0xa0
 800011c:	05db      	lsls	r3, r3, #23
 800011e:	2103      	movs	r1, #3
 8000120:	438a      	bics	r2, r1
 8000122:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= (1U << 2*0);	//01 YAPTI YANI OUTPUT MODU ACTI --OR
 8000124:	23a0      	movs	r3, #160	; 0xa0
 8000126:	05db      	lsls	r3, r3, #23
 8000128:	681a      	ldr	r2, [r3, #0]
 800012a:	23a0      	movs	r3, #160	; 0xa0
 800012c:	05db      	lsls	r3, r3, #23
 800012e:	2101      	movs	r1, #1
 8000130:	430a      	orrs	r2, r1
 8000132:	601a      	str	r2, [r3, #0]

    /* Turn on LED */
    GPIOA->ODR |= (1U << 0);  	//LED ACAR
 8000134:	23a0      	movs	r3, #160	; 0xa0
 8000136:	05db      	lsls	r3, r3, #23
 8000138:	695a      	ldr	r2, [r3, #20]
 800013a:	23a0      	movs	r3, #160	; 0xa0
 800013c:	05db      	lsls	r3, r3, #23
 800013e:	2101      	movs	r1, #1
 8000140:	430a      	orrs	r2, r1
 8000142:	615a      	str	r2, [r3, #20]

    while(1) {
        delay(LEDDELAY);
 8000144:	4b07      	ldr	r3, [pc, #28]	; (8000164 <main+0x60>)
 8000146:	0018      	movs	r0, r3
 8000148:	f000 f80e 	bl	8000168 <delay>

        GPIOA->ODR ^= (1U << 0); //XOR -- AC KAPAT
 800014c:	23a0      	movs	r3, #160	; 0xa0
 800014e:	05db      	lsls	r3, r3, #23
 8000150:	695a      	ldr	r2, [r3, #20]
 8000152:	23a0      	movs	r3, #160	; 0xa0
 8000154:	05db      	lsls	r3, r3, #23
 8000156:	2101      	movs	r1, #1
 8000158:	404a      	eors	r2, r1
 800015a:	615a      	str	r2, [r3, #20]
        delay(LEDDELAY);
 800015c:	e7f2      	b.n	8000144 <main+0x40>
 800015e:	46c0      	nop			; (mov r8, r8)
 8000160:	40021000 	.word	0x40021000
 8000164:	00186a00 	.word	0x00186a00

08000168 <delay>:
    }

    return 0;
}

void delay(volatile uint32_t s) {
 8000168:	b580      	push	{r7, lr}
 800016a:	b082      	sub	sp, #8
 800016c:	af00      	add	r7, sp, #0
 800016e:	6078      	str	r0, [r7, #4]
    for(; s>0; s--);
 8000170:	e002      	b.n	8000178 <delay+0x10>
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	3b01      	subs	r3, #1
 8000176:	607b      	str	r3, [r7, #4]
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2b00      	cmp	r3, #0
 800017c:	d1f9      	bne.n	8000172 <delay+0xa>
}
 800017e:	46c0      	nop			; (mov r8, r8)
 8000180:	46c0      	nop			; (mov r8, r8)
 8000182:	46bd      	mov	sp, r7
 8000184:	b002      	add	sp, #8
 8000186:	bd80      	pop	{r7, pc}

08000188 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000188:	480d      	ldr	r0, [pc, #52]	; (80001c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800018a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800018c:	f000 f826 	bl	80001dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000190:	480c      	ldr	r0, [pc, #48]	; (80001c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000192:	490d      	ldr	r1, [pc, #52]	; (80001c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000194:	4a0d      	ldr	r2, [pc, #52]	; (80001cc <LoopForever+0xe>)
  movs r3, #0
 8000196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000198:	e002      	b.n	80001a0 <LoopCopyDataInit>

0800019a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800019a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800019c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800019e:	3304      	adds	r3, #4

080001a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001a4:	d3f9      	bcc.n	800019a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001a6:	4a0a      	ldr	r2, [pc, #40]	; (80001d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001a8:	4c0a      	ldr	r4, [pc, #40]	; (80001d4 <LoopForever+0x16>)
  movs r3, #0
 80001aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001ac:	e001      	b.n	80001b2 <LoopFillZerobss>

080001ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001b0:	3204      	adds	r2, #4

080001b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001b4:	d3fb      	bcc.n	80001ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001b6:	f000 f81d 	bl	80001f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001ba:	f7ff ffa3 	bl	8000104 <main>

080001be <LoopForever>:

LoopForever:
    b LoopForever
 80001be:	e7fe      	b.n	80001be <LoopForever>
  ldr   r0, =_estack
 80001c0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80001c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001c8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80001cc:	0800025c 	.word	0x0800025c
  ldr r2, =_sbss
 80001d0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80001d4:	2000001c 	.word	0x2000001c

080001d8 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001d8:	e7fe      	b.n	80001d8 <ADC_COMP_IRQHandler>
	...

080001dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80001e0:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <SystemInit+0x14>)
 80001e2:	2280      	movs	r2, #128	; 0x80
 80001e4:	0512      	lsls	r2, r2, #20
 80001e6:	609a      	str	r2, [r3, #8]
#endif
}
 80001e8:	46c0      	nop			; (mov r8, r8)
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	46c0      	nop			; (mov r8, r8)
 80001f0:	e000ed00 	.word	0xe000ed00

080001f4 <__libc_init_array>:
 80001f4:	b570      	push	{r4, r5, r6, lr}
 80001f6:	2600      	movs	r6, #0
 80001f8:	4d0c      	ldr	r5, [pc, #48]	; (800022c <__libc_init_array+0x38>)
 80001fa:	4c0d      	ldr	r4, [pc, #52]	; (8000230 <__libc_init_array+0x3c>)
 80001fc:	1b64      	subs	r4, r4, r5
 80001fe:	10a4      	asrs	r4, r4, #2
 8000200:	42a6      	cmp	r6, r4
 8000202:	d109      	bne.n	8000218 <__libc_init_array+0x24>
 8000204:	2600      	movs	r6, #0
 8000206:	f000 f819 	bl	800023c <_init>
 800020a:	4d0a      	ldr	r5, [pc, #40]	; (8000234 <__libc_init_array+0x40>)
 800020c:	4c0a      	ldr	r4, [pc, #40]	; (8000238 <__libc_init_array+0x44>)
 800020e:	1b64      	subs	r4, r4, r5
 8000210:	10a4      	asrs	r4, r4, #2
 8000212:	42a6      	cmp	r6, r4
 8000214:	d105      	bne.n	8000222 <__libc_init_array+0x2e>
 8000216:	bd70      	pop	{r4, r5, r6, pc}
 8000218:	00b3      	lsls	r3, r6, #2
 800021a:	58eb      	ldr	r3, [r5, r3]
 800021c:	4798      	blx	r3
 800021e:	3601      	adds	r6, #1
 8000220:	e7ee      	b.n	8000200 <__libc_init_array+0xc>
 8000222:	00b3      	lsls	r3, r6, #2
 8000224:	58eb      	ldr	r3, [r5, r3]
 8000226:	4798      	blx	r3
 8000228:	3601      	adds	r6, #1
 800022a:	e7f2      	b.n	8000212 <__libc_init_array+0x1e>
 800022c:	08000254 	.word	0x08000254
 8000230:	08000254 	.word	0x08000254
 8000234:	08000254 	.word	0x08000254
 8000238:	08000258 	.word	0x08000258

0800023c <_init>:
 800023c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000242:	bc08      	pop	{r3}
 8000244:	469e      	mov	lr, r3
 8000246:	4770      	bx	lr

08000248 <_fini>:
 8000248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800024e:	bc08      	pop	{r3}
 8000250:	469e      	mov	lr, r3
 8000252:	4770      	bx	lr
