
project_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000247c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08002538  08002538  00012538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080025dc  080025dc  000125dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080025e0  080025e0  000125e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  080025e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000009c  20000018  080025fc  00020018  2**3
                  ALLOC
  7 ._user_heap_stack 00000604  200000b4  080025fc  000200b4  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001f2e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000005d9  00000000  00000000  00021f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000240  00000000  00000000  00022548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000208  00000000  00000000  00022788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00001e3c  00000000  00000000  00022990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00000cc4  00000000  00000000  000247cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .comment      00000053  00000000  00000000  00025490  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000734  00000000  00000000  000254e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000018 	.word	0x20000018
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002520 	.word	0x08002520

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000001c 	.word	0x2000001c
 8000100:	08002520 	.word	0x08002520

08000104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000104:	b580      	push	{r7, lr}
 8000106:	b082      	sub	sp, #8
 8000108:	af00      	add	r7, sp, #0
 800010a:	0002      	movs	r2, r0
 800010c:	1dfb      	adds	r3, r7, #7
 800010e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000110:	1dfb      	adds	r3, r7, #7
 8000112:	781b      	ldrb	r3, [r3, #0]
 8000114:	2b7f      	cmp	r3, #127	; 0x7f
 8000116:	d809      	bhi.n	800012c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000118:	1dfb      	adds	r3, r7, #7
 800011a:	781b      	ldrb	r3, [r3, #0]
 800011c:	001a      	movs	r2, r3
 800011e:	231f      	movs	r3, #31
 8000120:	401a      	ands	r2, r3
 8000122:	4b04      	ldr	r3, [pc, #16]	; (8000134 <__NVIC_EnableIRQ+0x30>)
 8000124:	2101      	movs	r1, #1
 8000126:	4091      	lsls	r1, r2
 8000128:	000a      	movs	r2, r1
 800012a:	601a      	str	r2, [r3, #0]
  }
}
 800012c:	46c0      	nop			; (mov r8, r8)
 800012e:	46bd      	mov	sp, r7
 8000130:	b002      	add	sp, #8
 8000132:	bd80      	pop	{r7, pc}
 8000134:	e000e100 	.word	0xe000e100

08000138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000138:	b590      	push	{r4, r7, lr}
 800013a:	b083      	sub	sp, #12
 800013c:	af00      	add	r7, sp, #0
 800013e:	0002      	movs	r2, r0
 8000140:	6039      	str	r1, [r7, #0]
 8000142:	1dfb      	adds	r3, r7, #7
 8000144:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000146:	1dfb      	adds	r3, r7, #7
 8000148:	781b      	ldrb	r3, [r3, #0]
 800014a:	2b7f      	cmp	r3, #127	; 0x7f
 800014c:	d828      	bhi.n	80001a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800014e:	4a2f      	ldr	r2, [pc, #188]	; (800020c <__NVIC_SetPriority+0xd4>)
 8000150:	1dfb      	adds	r3, r7, #7
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	b25b      	sxtb	r3, r3
 8000156:	089b      	lsrs	r3, r3, #2
 8000158:	33c0      	adds	r3, #192	; 0xc0
 800015a:	009b      	lsls	r3, r3, #2
 800015c:	589b      	ldr	r3, [r3, r2]
 800015e:	1dfa      	adds	r2, r7, #7
 8000160:	7812      	ldrb	r2, [r2, #0]
 8000162:	0011      	movs	r1, r2
 8000164:	2203      	movs	r2, #3
 8000166:	400a      	ands	r2, r1
 8000168:	00d2      	lsls	r2, r2, #3
 800016a:	21ff      	movs	r1, #255	; 0xff
 800016c:	4091      	lsls	r1, r2
 800016e:	000a      	movs	r2, r1
 8000170:	43d2      	mvns	r2, r2
 8000172:	401a      	ands	r2, r3
 8000174:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000176:	683b      	ldr	r3, [r7, #0]
 8000178:	019b      	lsls	r3, r3, #6
 800017a:	22ff      	movs	r2, #255	; 0xff
 800017c:	401a      	ands	r2, r3
 800017e:	1dfb      	adds	r3, r7, #7
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	0018      	movs	r0, r3
 8000184:	2303      	movs	r3, #3
 8000186:	4003      	ands	r3, r0
 8000188:	00db      	lsls	r3, r3, #3
 800018a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800018c:	481f      	ldr	r0, [pc, #124]	; (800020c <__NVIC_SetPriority+0xd4>)
 800018e:	1dfb      	adds	r3, r7, #7
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	b25b      	sxtb	r3, r3
 8000194:	089b      	lsrs	r3, r3, #2
 8000196:	430a      	orrs	r2, r1
 8000198:	33c0      	adds	r3, #192	; 0xc0
 800019a:	009b      	lsls	r3, r3, #2
 800019c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800019e:	e031      	b.n	8000204 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001a0:	4a1b      	ldr	r2, [pc, #108]	; (8000210 <__NVIC_SetPriority+0xd8>)
 80001a2:	1dfb      	adds	r3, r7, #7
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	0019      	movs	r1, r3
 80001a8:	230f      	movs	r3, #15
 80001aa:	400b      	ands	r3, r1
 80001ac:	3b08      	subs	r3, #8
 80001ae:	089b      	lsrs	r3, r3, #2
 80001b0:	3306      	adds	r3, #6
 80001b2:	009b      	lsls	r3, r3, #2
 80001b4:	18d3      	adds	r3, r2, r3
 80001b6:	3304      	adds	r3, #4
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	1dfa      	adds	r2, r7, #7
 80001bc:	7812      	ldrb	r2, [r2, #0]
 80001be:	0011      	movs	r1, r2
 80001c0:	2203      	movs	r2, #3
 80001c2:	400a      	ands	r2, r1
 80001c4:	00d2      	lsls	r2, r2, #3
 80001c6:	21ff      	movs	r1, #255	; 0xff
 80001c8:	4091      	lsls	r1, r2
 80001ca:	000a      	movs	r2, r1
 80001cc:	43d2      	mvns	r2, r2
 80001ce:	401a      	ands	r2, r3
 80001d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	019b      	lsls	r3, r3, #6
 80001d6:	22ff      	movs	r2, #255	; 0xff
 80001d8:	401a      	ands	r2, r3
 80001da:	1dfb      	adds	r3, r7, #7
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	0018      	movs	r0, r3
 80001e0:	2303      	movs	r3, #3
 80001e2:	4003      	ands	r3, r0
 80001e4:	00db      	lsls	r3, r3, #3
 80001e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001e8:	4809      	ldr	r0, [pc, #36]	; (8000210 <__NVIC_SetPriority+0xd8>)
 80001ea:	1dfb      	adds	r3, r7, #7
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	001c      	movs	r4, r3
 80001f0:	230f      	movs	r3, #15
 80001f2:	4023      	ands	r3, r4
 80001f4:	3b08      	subs	r3, #8
 80001f6:	089b      	lsrs	r3, r3, #2
 80001f8:	430a      	orrs	r2, r1
 80001fa:	3306      	adds	r3, #6
 80001fc:	009b      	lsls	r3, r3, #2
 80001fe:	18c3      	adds	r3, r0, r3
 8000200:	3304      	adds	r3, #4
 8000202:	601a      	str	r2, [r3, #0]
}
 8000204:	46c0      	nop			; (mov r8, r8)
 8000206:	46bd      	mov	sp, r7
 8000208:	b003      	add	sp, #12
 800020a:	bd90      	pop	{r4, r7, pc}
 800020c:	e000e100 	.word	0xe000e100
 8000210:	e000ed00 	.word	0xe000ed00

08000214 <init_clocks>:
volatile int d4 = -1;
volatile int duty = 1;
//end of globals

//starting of my Board Support Package
void init_clocks() { // activates all clocks
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
  RCC -> IOPENR |= 7U;
 8000218:	4b04      	ldr	r3, [pc, #16]	; (800022c <init_clocks+0x18>)
 800021a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800021c:	4b03      	ldr	r3, [pc, #12]	; (800022c <init_clocks+0x18>)
 800021e:	2107      	movs	r1, #7
 8000220:	430a      	orrs	r2, r1
 8000222:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000224:	46c0      	nop			; (mov r8, r8)
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	46c0      	nop			; (mov r8, r8)
 800022c:	40021000 	.word	0x40021000

08000230 <set_onboardLED_output>:

void set_onboardLED_output() { // sets the on-board led to output mode
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  GPIOC -> MODER &= ~(3U << 2 * 6);
 8000234:	4b07      	ldr	r3, [pc, #28]	; (8000254 <set_onboardLED_output+0x24>)
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <set_onboardLED_output+0x24>)
 800023a:	4907      	ldr	r1, [pc, #28]	; (8000258 <set_onboardLED_output+0x28>)
 800023c:	400a      	ands	r2, r1
 800023e:	601a      	str	r2, [r3, #0]
  GPIOC -> MODER |= (1U<< 2 * 6);
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <set_onboardLED_output+0x24>)
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	4b03      	ldr	r3, [pc, #12]	; (8000254 <set_onboardLED_output+0x24>)
 8000246:	2180      	movs	r1, #128	; 0x80
 8000248:	0149      	lsls	r1, r1, #5
 800024a:	430a      	orrs	r2, r1
 800024c:	601a      	str	r2, [r3, #0]
}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	50000800 	.word	0x50000800
 8000258:	ffffcfff 	.word	0xffffcfff

0800025c <set_output>:

void toggle_onboardLED() {// toggles on-board led
  GPIOC -> ODR ^= (1U<< 6);
}

void set_output(int port, int pin) { // sets the given pin to output mode, 1 for PortA, 2 for PortB
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
 8000264:	6039      	str	r1, [r7, #0]
  switch (port) {
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	2b01      	cmp	r3, #1
 800026a:	d003      	beq.n	8000274 <set_output+0x18>
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	2b02      	cmp	r3, #2
 8000270:	d019      	beq.n	80002a6 <set_output+0x4a>
  case 2:
    GPIOB -> MODER &= ~(3U << 2 * pin);
    GPIOB -> MODER |= (1U<< 2 * pin);
    break;
  }
}
 8000272:	e02d      	b.n	80002d0 <set_output+0x74>
    GPIOA -> MODER &= ~(3U << 2 * pin);
 8000274:	23a0      	movs	r3, #160	; 0xa0
 8000276:	05db      	lsls	r3, r3, #23
 8000278:	681a      	ldr	r2, [r3, #0]
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	005b      	lsls	r3, r3, #1
 800027e:	2103      	movs	r1, #3
 8000280:	4099      	lsls	r1, r3
 8000282:	000b      	movs	r3, r1
 8000284:	43d9      	mvns	r1, r3
 8000286:	23a0      	movs	r3, #160	; 0xa0
 8000288:	05db      	lsls	r3, r3, #23
 800028a:	400a      	ands	r2, r1
 800028c:	601a      	str	r2, [r3, #0]
    GPIOA -> MODER |= (1U<< 2 * pin);
 800028e:	23a0      	movs	r3, #160	; 0xa0
 8000290:	05db      	lsls	r3, r3, #23
 8000292:	6819      	ldr	r1, [r3, #0]
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	005b      	lsls	r3, r3, #1
 8000298:	2201      	movs	r2, #1
 800029a:	409a      	lsls	r2, r3
 800029c:	23a0      	movs	r3, #160	; 0xa0
 800029e:	05db      	lsls	r3, r3, #23
 80002a0:	430a      	orrs	r2, r1
 80002a2:	601a      	str	r2, [r3, #0]
    break;
 80002a4:	e014      	b.n	80002d0 <set_output+0x74>
    GPIOB -> MODER &= ~(3U << 2 * pin);
 80002a6:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <set_output+0x7c>)
 80002a8:	681a      	ldr	r2, [r3, #0]
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	005b      	lsls	r3, r3, #1
 80002ae:	2103      	movs	r1, #3
 80002b0:	4099      	lsls	r1, r3
 80002b2:	000b      	movs	r3, r1
 80002b4:	43d9      	mvns	r1, r3
 80002b6:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <set_output+0x7c>)
 80002b8:	400a      	ands	r2, r1
 80002ba:	601a      	str	r2, [r3, #0]
    GPIOB -> MODER |= (1U<< 2 * pin);
 80002bc:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <set_output+0x7c>)
 80002be:	6819      	ldr	r1, [r3, #0]
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	005b      	lsls	r3, r3, #1
 80002c4:	2201      	movs	r2, #1
 80002c6:	409a      	lsls	r2, r3
 80002c8:	4b03      	ldr	r3, [pc, #12]	; (80002d8 <set_output+0x7c>)
 80002ca:	430a      	orrs	r2, r1
 80002cc:	601a      	str	r2, [r3, #0]
    break;
 80002ce:	46c0      	nop			; (mov r8, r8)
}
 80002d0:	46c0      	nop			; (mov r8, r8)
 80002d2:	46bd      	mov	sp, r7
 80002d4:	b002      	add	sp, #8
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	50000400 	.word	0x50000400

080002dc <set_input>:

void set_input(int port, int pin) { // sets the given pin to input mode, 1 for PortA, 2 for PortB
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
 80002e4:	6039      	str	r1, [r7, #0]
  switch (port) {
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d003      	beq.n	80002f4 <set_input+0x18>
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2b02      	cmp	r3, #2
 80002f0:	d00e      	beq.n	8000310 <set_input+0x34>
    break;
  case 2:
    GPIOB -> MODER &= ~(3U << 2 * pin);
    break;
  }
}
 80002f2:	e019      	b.n	8000328 <set_input+0x4c>
    GPIOA -> MODER &= ~(3U << 2 * pin);
 80002f4:	23a0      	movs	r3, #160	; 0xa0
 80002f6:	05db      	lsls	r3, r3, #23
 80002f8:	681a      	ldr	r2, [r3, #0]
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	005b      	lsls	r3, r3, #1
 80002fe:	2103      	movs	r1, #3
 8000300:	4099      	lsls	r1, r3
 8000302:	000b      	movs	r3, r1
 8000304:	43d9      	mvns	r1, r3
 8000306:	23a0      	movs	r3, #160	; 0xa0
 8000308:	05db      	lsls	r3, r3, #23
 800030a:	400a      	ands	r2, r1
 800030c:	601a      	str	r2, [r3, #0]
    break;
 800030e:	e00b      	b.n	8000328 <set_input+0x4c>
    GPIOB -> MODER &= ~(3U << 2 * pin);
 8000310:	4b07      	ldr	r3, [pc, #28]	; (8000330 <set_input+0x54>)
 8000312:	681a      	ldr	r2, [r3, #0]
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	005b      	lsls	r3, r3, #1
 8000318:	2103      	movs	r1, #3
 800031a:	4099      	lsls	r1, r3
 800031c:	000b      	movs	r3, r1
 800031e:	43d9      	mvns	r1, r3
 8000320:	4b03      	ldr	r3, [pc, #12]	; (8000330 <set_input+0x54>)
 8000322:	400a      	ands	r2, r1
 8000324:	601a      	str	r2, [r3, #0]
    break;
 8000326:	46c0      	nop			; (mov r8, r8)
}
 8000328:	46c0      	nop			; (mov r8, r8)
 800032a:	46bd      	mov	sp, r7
 800032c:	b002      	add	sp, #8
 800032e:	bd80      	pop	{r7, pc}
 8000330:	50000400 	.word	0x50000400

08000334 <set_pin_to1>:

void set_pin_to1(int port, int pin) { //set the given output port to logic 1
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	6039      	str	r1, [r7, #0]
  switch (port) {
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	2b01      	cmp	r3, #1
 8000342:	d003      	beq.n	800034c <set_pin_to1+0x18>
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	2b02      	cmp	r3, #2
 8000348:	d00b      	beq.n	8000362 <set_pin_to1+0x2e>
    break;
  case 2:
    GPIOB -> ODR |= (1U<< pin);
    break;
  }
}
 800034a:	e013      	b.n	8000374 <set_pin_to1+0x40>
    GPIOA -> ODR |= (1U<< pin);
 800034c:	23a0      	movs	r3, #160	; 0xa0
 800034e:	05db      	lsls	r3, r3, #23
 8000350:	6959      	ldr	r1, [r3, #20]
 8000352:	2201      	movs	r2, #1
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	409a      	lsls	r2, r3
 8000358:	23a0      	movs	r3, #160	; 0xa0
 800035a:	05db      	lsls	r3, r3, #23
 800035c:	430a      	orrs	r2, r1
 800035e:	615a      	str	r2, [r3, #20]
    break;
 8000360:	e008      	b.n	8000374 <set_pin_to1+0x40>
    GPIOB -> ODR |= (1U<< pin);
 8000362:	4b06      	ldr	r3, [pc, #24]	; (800037c <set_pin_to1+0x48>)
 8000364:	6959      	ldr	r1, [r3, #20]
 8000366:	2201      	movs	r2, #1
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	409a      	lsls	r2, r3
 800036c:	4b03      	ldr	r3, [pc, #12]	; (800037c <set_pin_to1+0x48>)
 800036e:	430a      	orrs	r2, r1
 8000370:	615a      	str	r2, [r3, #20]
    break;
 8000372:	46c0      	nop			; (mov r8, r8)
}
 8000374:	46c0      	nop			; (mov r8, r8)
 8000376:	46bd      	mov	sp, r7
 8000378:	b002      	add	sp, #8
 800037a:	bd80      	pop	{r7, pc}
 800037c:	50000400 	.word	0x50000400

08000380 <toggle_pin>:
    GPIOB -> ODR &= ~(1U<< pin);
    break;
  }
}

void toggle_pin(int port, int pin) {// toggles the value of given output port
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
  switch (port) {
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2b01      	cmp	r3, #1
 800038e:	d003      	beq.n	8000398 <toggle_pin+0x18>
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	2b02      	cmp	r3, #2
 8000394:	d00b      	beq.n	80003ae <toggle_pin+0x2e>
    break;
  case 2:
    GPIOB -> ODR ^= (1U<< pin);
    break;
  }
}
 8000396:	e013      	b.n	80003c0 <toggle_pin+0x40>
    GPIOA -> ODR ^= (1U<< pin);
 8000398:	23a0      	movs	r3, #160	; 0xa0
 800039a:	05db      	lsls	r3, r3, #23
 800039c:	6959      	ldr	r1, [r3, #20]
 800039e:	2201      	movs	r2, #1
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	409a      	lsls	r2, r3
 80003a4:	23a0      	movs	r3, #160	; 0xa0
 80003a6:	05db      	lsls	r3, r3, #23
 80003a8:	404a      	eors	r2, r1
 80003aa:	615a      	str	r2, [r3, #20]
    break;
 80003ac:	e008      	b.n	80003c0 <toggle_pin+0x40>
    GPIOB -> ODR ^= (1U<< pin);
 80003ae:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <toggle_pin+0x48>)
 80003b0:	6959      	ldr	r1, [r3, #20]
 80003b2:	2201      	movs	r2, #1
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	409a      	lsls	r2, r3
 80003b8:	4b03      	ldr	r3, [pc, #12]	; (80003c8 <toggle_pin+0x48>)
 80003ba:	404a      	eors	r2, r1
 80003bc:	615a      	str	r2, [r3, #20]
    break;
 80003be:	46c0      	nop			; (mov r8, r8)
}
 80003c0:	46c0      	nop			; (mov r8, r8)
 80003c2:	46bd      	mov	sp, r7
 80003c4:	b002      	add	sp, #8
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	50000400 	.word	0x50000400

080003cc <delay>:

void delay(int time) { // waits until given time
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  for (; time > 0; time--);
 80003d4:	e002      	b.n	80003dc <delay+0x10>
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	3b01      	subs	r3, #1
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	dcf9      	bgt.n	80003d6 <delay+0xa>
}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	46c0      	nop			; (mov r8, r8)
 80003e6:	46bd      	mov	sp, r7
 80003e8:	b002      	add	sp, #8
 80003ea:	bd80      	pop	{r7, pc}

080003ec <my_delay>:

void my_delay() { // short delay for displaying all digits at the same time
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
  for (int i = 0; i < 600; i++);
 80003f2:	2300      	movs	r3, #0
 80003f4:	607b      	str	r3, [r7, #4]
 80003f6:	e002      	b.n	80003fe <my_delay+0x12>
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	3301      	adds	r3, #1
 80003fc:	607b      	str	r3, [r7, #4]
 80003fe:	687a      	ldr	r2, [r7, #4]
 8000400:	2396      	movs	r3, #150	; 0x96
 8000402:	009b      	lsls	r3, r3, #2
 8000404:	429a      	cmp	r2, r3
 8000406:	dbf7      	blt.n	80003f8 <my_delay+0xc>
}
 8000408:	46c0      	nop			; (mov r8, r8)
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	46bd      	mov	sp, r7
 800040e:	b002      	add	sp, #8
 8000410:	bd80      	pop	{r7, pc}
	...

08000414 <clear_rows>:

void clear_rows() { // sets all rows to 0 - clears
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  GPIOA -> ODR &= ~(1U<< 10);
 8000418:	23a0      	movs	r3, #160	; 0xa0
 800041a:	05db      	lsls	r3, r3, #23
 800041c:	695a      	ldr	r2, [r3, #20]
 800041e:	23a0      	movs	r3, #160	; 0xa0
 8000420:	05db      	lsls	r3, r3, #23
 8000422:	490d      	ldr	r1, [pc, #52]	; (8000458 <clear_rows+0x44>)
 8000424:	400a      	ands	r2, r1
 8000426:	615a      	str	r2, [r3, #20]
  GPIOA -> ODR &= ~(1U<< 9);
 8000428:	23a0      	movs	r3, #160	; 0xa0
 800042a:	05db      	lsls	r3, r3, #23
 800042c:	695a      	ldr	r2, [r3, #20]
 800042e:	23a0      	movs	r3, #160	; 0xa0
 8000430:	05db      	lsls	r3, r3, #23
 8000432:	490a      	ldr	r1, [pc, #40]	; (800045c <clear_rows+0x48>)
 8000434:	400a      	ands	r2, r1
 8000436:	615a      	str	r2, [r3, #20]
  GPIOB -> ODR &= ~(1U<< 0);
 8000438:	4b09      	ldr	r3, [pc, #36]	; (8000460 <clear_rows+0x4c>)
 800043a:	695a      	ldr	r2, [r3, #20]
 800043c:	4b08      	ldr	r3, [pc, #32]	; (8000460 <clear_rows+0x4c>)
 800043e:	2101      	movs	r1, #1
 8000440:	438a      	bics	r2, r1
 8000442:	615a      	str	r2, [r3, #20]
  GPIOB -> ODR &= ~(1U<< 3);
 8000444:	4b06      	ldr	r3, [pc, #24]	; (8000460 <clear_rows+0x4c>)
 8000446:	695a      	ldr	r2, [r3, #20]
 8000448:	4b05      	ldr	r3, [pc, #20]	; (8000460 <clear_rows+0x4c>)
 800044a:	2108      	movs	r1, #8
 800044c:	438a      	bics	r2, r1
 800044e:	615a      	str	r2, [r3, #20]
}
 8000450:	46c0      	nop			; (mov r8, r8)
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	fffffbff 	.word	0xfffffbff
 800045c:	fffffdff 	.word	0xfffffdff
 8000460:	50000400 	.word	0x50000400

08000464 <set_rows>:

void set_rows() { // sets all rows to 1 - activates
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  GPIOA -> ODR |= (1U<< 10);
 8000468:	23a0      	movs	r3, #160	; 0xa0
 800046a:	05db      	lsls	r3, r3, #23
 800046c:	695a      	ldr	r2, [r3, #20]
 800046e:	23a0      	movs	r3, #160	; 0xa0
 8000470:	05db      	lsls	r3, r3, #23
 8000472:	2180      	movs	r1, #128	; 0x80
 8000474:	00c9      	lsls	r1, r1, #3
 8000476:	430a      	orrs	r2, r1
 8000478:	615a      	str	r2, [r3, #20]
  GPIOA -> ODR |= (1U<< 9);
 800047a:	23a0      	movs	r3, #160	; 0xa0
 800047c:	05db      	lsls	r3, r3, #23
 800047e:	695a      	ldr	r2, [r3, #20]
 8000480:	23a0      	movs	r3, #160	; 0xa0
 8000482:	05db      	lsls	r3, r3, #23
 8000484:	2180      	movs	r1, #128	; 0x80
 8000486:	0089      	lsls	r1, r1, #2
 8000488:	430a      	orrs	r2, r1
 800048a:	615a      	str	r2, [r3, #20]
  GPIOB -> ODR |= (1U<< 0);
 800048c:	4b07      	ldr	r3, [pc, #28]	; (80004ac <set_rows+0x48>)
 800048e:	695a      	ldr	r2, [r3, #20]
 8000490:	4b06      	ldr	r3, [pc, #24]	; (80004ac <set_rows+0x48>)
 8000492:	2101      	movs	r1, #1
 8000494:	430a      	orrs	r2, r1
 8000496:	615a      	str	r2, [r3, #20]
  GPIOB -> ODR |= (1U<< 3);
 8000498:	4b04      	ldr	r3, [pc, #16]	; (80004ac <set_rows+0x48>)
 800049a:	695a      	ldr	r2, [r3, #20]
 800049c:	4b03      	ldr	r3, [pc, #12]	; (80004ac <set_rows+0x48>)
 800049e:	2108      	movs	r1, #8
 80004a0:	430a      	orrs	r2, r1
 80004a2:	615a      	str	r2, [r3, #20]
}
 80004a4:	46c0      	nop			; (mov r8, r8)
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	50000400 	.word	0x50000400

080004b0 <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler() { //interrupt from PA0(Column 1) and PB1(Column 2)
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  //PA10 PA9 PB0 PB8 outputs - rows
  delay(300); // for preventing bouncing
 80004b4:	2396      	movs	r3, #150	; 0x96
 80004b6:	005b      	lsls	r3, r3, #1
 80004b8:	0018      	movs	r0, r3
 80004ba:	f7ff ff87 	bl	80003cc <delay>
  ten_sec_counter = 0; // reset 10sec counter if an interrupt happens
 80004be:	4bd7      	ldr	r3, [pc, #860]	; (800081c <EXTI0_1_IRQHandler+0x36c>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]

  //check rows for column 1
  // first deactivate all digits and activate them one by one while checking
  //status register so we can determine which key is pressed
  if ((EXTI -> RPR1 >> 0) & 1) {
 80004c4:	4bd6      	ldr	r3, [pc, #856]	; (8000820 <EXTI0_1_IRQHandler+0x370>)
 80004c6:	68db      	ldr	r3, [r3, #12]
 80004c8:	2201      	movs	r2, #1
 80004ca:	4013      	ands	r3, r2
 80004cc:	d100      	bne.n	80004d0 <EXTI0_1_IRQHandler+0x20>
 80004ce:	e0ab      	b.n	8000628 <EXTI0_1_IRQHandler+0x178>
    clear_rows();
 80004d0:	f7ff ffa0 	bl	8000414 <clear_rows>

    // Row 1 - number 1
    toggle_pin(1,10); // activate first row
 80004d4:	210a      	movs	r1, #10
 80004d6:	2001      	movs	r0, #1
 80004d8:	f7ff ff52 	bl	8000380 <toggle_pin>
    if ((GPIOA -> IDR >> 0) & 1) { // check the status register for PA0 is 1, if it is then number 1 key is pressed
 80004dc:	23a0      	movs	r3, #160	; 0xa0
 80004de:	05db      	lsls	r3, r3, #23
 80004e0:	691b      	ldr	r3, [r3, #16]
 80004e2:	2201      	movs	r2, #1
 80004e4:	4013      	ands	r3, r2
 80004e6:	d024      	beq.n	8000532 <EXTI0_1_IRQHandler+0x82>
    	if(A_pressed==1){
 80004e8:	4bce      	ldr	r3, [pc, #824]	; (8000824 <EXTI0_1_IRQHandler+0x374>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d10a      	bne.n	8000506 <EXTI0_1_IRQHandler+0x56>
    		amp[i]=1;
 80004f0:	4bcd      	ldr	r3, [pc, #820]	; (8000828 <EXTI0_1_IRQHandler+0x378>)
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	4bcd      	ldr	r3, [pc, #820]	; (800082c <EXTI0_1_IRQHandler+0x37c>)
 80004f6:	0092      	lsls	r2, r2, #2
 80004f8:	2101      	movs	r1, #1
 80004fa:	50d1      	str	r1, [r2, r3]
    		i++;
 80004fc:	4bca      	ldr	r3, [pc, #808]	; (8000828 <EXTI0_1_IRQHandler+0x378>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	1c5a      	adds	r2, r3, #1
 8000502:	4bc9      	ldr	r3, [pc, #804]	; (8000828 <EXTI0_1_IRQHandler+0x378>)
 8000504:	601a      	str	r2, [r3, #0]
    	}
    	if(B_pressed==1){
 8000506:	4bca      	ldr	r3, [pc, #808]	; (8000830 <EXTI0_1_IRQHandler+0x380>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2b01      	cmp	r3, #1
 800050c:	d10a      	bne.n	8000524 <EXTI0_1_IRQHandler+0x74>
    		freq[j]=1;
 800050e:	4bc9      	ldr	r3, [pc, #804]	; (8000834 <EXTI0_1_IRQHandler+0x384>)
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	4bc9      	ldr	r3, [pc, #804]	; (8000838 <EXTI0_1_IRQHandler+0x388>)
 8000514:	0092      	lsls	r2, r2, #2
 8000516:	2101      	movs	r1, #1
 8000518:	50d1      	str	r1, [r2, r3]
    		j++;
 800051a:	4bc6      	ldr	r3, [pc, #792]	; (8000834 <EXTI0_1_IRQHandler+0x384>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	1c5a      	adds	r2, r3, #1
 8000520:	4bc4      	ldr	r3, [pc, #784]	; (8000834 <EXTI0_1_IRQHandler+0x384>)
 8000522:	601a      	str	r2, [r3, #0]
    	}
    	if(C_pressed==1){
 8000524:	4bc5      	ldr	r3, [pc, #788]	; (800083c <EXTI0_1_IRQHandler+0x38c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d102      	bne.n	8000532 <EXTI0_1_IRQHandler+0x82>
    		mode=1;
 800052c:	4bc4      	ldr	r3, [pc, #784]	; (8000840 <EXTI0_1_IRQHandler+0x390>)
 800052e:	2201      	movs	r2, #1
 8000530:	601a      	str	r2, [r3, #0]
    	}
    }
    toggle_pin(1,10); // deactivate row 2
 8000532:	210a      	movs	r1, #10
 8000534:	2001      	movs	r0, #1
 8000536:	f7ff ff23 	bl	8000380 <toggle_pin>

    // Row 2 - number 4
    toggle_pin(1, 9);
 800053a:	2109      	movs	r1, #9
 800053c:	2001      	movs	r0, #1
 800053e:	f7ff ff1f 	bl	8000380 <toggle_pin>
    if ((GPIOA -> IDR >> 0) & 1) {
 8000542:	23a0      	movs	r3, #160	; 0xa0
 8000544:	05db      	lsls	r3, r3, #23
 8000546:	691b      	ldr	r3, [r3, #16]
 8000548:	2201      	movs	r2, #1
 800054a:	4013      	ands	r3, r2
 800054c:	d024      	beq.n	8000598 <EXTI0_1_IRQHandler+0xe8>
    	if(A_pressed==1){
 800054e:	4bb5      	ldr	r3, [pc, #724]	; (8000824 <EXTI0_1_IRQHandler+0x374>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2b01      	cmp	r3, #1
 8000554:	d10a      	bne.n	800056c <EXTI0_1_IRQHandler+0xbc>
    	    		amp[i]=4;
 8000556:	4bb4      	ldr	r3, [pc, #720]	; (8000828 <EXTI0_1_IRQHandler+0x378>)
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	4bb4      	ldr	r3, [pc, #720]	; (800082c <EXTI0_1_IRQHandler+0x37c>)
 800055c:	0092      	lsls	r2, r2, #2
 800055e:	2104      	movs	r1, #4
 8000560:	50d1      	str	r1, [r2, r3]
    	    		i++;
 8000562:	4bb1      	ldr	r3, [pc, #708]	; (8000828 <EXTI0_1_IRQHandler+0x378>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	1c5a      	adds	r2, r3, #1
 8000568:	4baf      	ldr	r3, [pc, #700]	; (8000828 <EXTI0_1_IRQHandler+0x378>)
 800056a:	601a      	str	r2, [r3, #0]
    	    	}
    	    	if(B_pressed==1){
 800056c:	4bb0      	ldr	r3, [pc, #704]	; (8000830 <EXTI0_1_IRQHandler+0x380>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d10a      	bne.n	800058a <EXTI0_1_IRQHandler+0xda>
    	    		freq[j]=4;
 8000574:	4baf      	ldr	r3, [pc, #700]	; (8000834 <EXTI0_1_IRQHandler+0x384>)
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	4baf      	ldr	r3, [pc, #700]	; (8000838 <EXTI0_1_IRQHandler+0x388>)
 800057a:	0092      	lsls	r2, r2, #2
 800057c:	2104      	movs	r1, #4
 800057e:	50d1      	str	r1, [r2, r3]
    	    		j++;
 8000580:	4bac      	ldr	r3, [pc, #688]	; (8000834 <EXTI0_1_IRQHandler+0x384>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	1c5a      	adds	r2, r3, #1
 8000586:	4bab      	ldr	r3, [pc, #684]	; (8000834 <EXTI0_1_IRQHandler+0x384>)
 8000588:	601a      	str	r2, [r3, #0]
    	    	}
    	    	if(C_pressed==1){
 800058a:	4bac      	ldr	r3, [pc, #688]	; (800083c <EXTI0_1_IRQHandler+0x38c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2b01      	cmp	r3, #1
 8000590:	d102      	bne.n	8000598 <EXTI0_1_IRQHandler+0xe8>
    	    		mode=4;
 8000592:	4bab      	ldr	r3, [pc, #684]	; (8000840 <EXTI0_1_IRQHandler+0x390>)
 8000594:	2204      	movs	r2, #4
 8000596:	601a      	str	r2, [r3, #0]
    	    	}

    }
    toggle_pin(1, 9);
 8000598:	2109      	movs	r1, #9
 800059a:	2001      	movs	r0, #1
 800059c:	f7ff fef0 	bl	8000380 <toggle_pin>

    // Row 3 - number 7
    toggle_pin(2, 0);
 80005a0:	2100      	movs	r1, #0
 80005a2:	2002      	movs	r0, #2
 80005a4:	f7ff feec 	bl	8000380 <toggle_pin>
    if ((GPIOA -> IDR >> 0) & 1) {
 80005a8:	23a0      	movs	r3, #160	; 0xa0
 80005aa:	05db      	lsls	r3, r3, #23
 80005ac:	691b      	ldr	r3, [r3, #16]
 80005ae:	2201      	movs	r2, #1
 80005b0:	4013      	ands	r3, r2
 80005b2:	d024      	beq.n	80005fe <EXTI0_1_IRQHandler+0x14e>
    	if(A_pressed==1){
 80005b4:	4b9b      	ldr	r3, [pc, #620]	; (8000824 <EXTI0_1_IRQHandler+0x374>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d10a      	bne.n	80005d2 <EXTI0_1_IRQHandler+0x122>
    	    		amp[i]=7;
 80005bc:	4b9a      	ldr	r3, [pc, #616]	; (8000828 <EXTI0_1_IRQHandler+0x378>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b9a      	ldr	r3, [pc, #616]	; (800082c <EXTI0_1_IRQHandler+0x37c>)
 80005c2:	0092      	lsls	r2, r2, #2
 80005c4:	2107      	movs	r1, #7
 80005c6:	50d1      	str	r1, [r2, r3]
    	    		i++;
 80005c8:	4b97      	ldr	r3, [pc, #604]	; (8000828 <EXTI0_1_IRQHandler+0x378>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	1c5a      	adds	r2, r3, #1
 80005ce:	4b96      	ldr	r3, [pc, #600]	; (8000828 <EXTI0_1_IRQHandler+0x378>)
 80005d0:	601a      	str	r2, [r3, #0]
    	    	}
    	    	if(B_pressed==1){
 80005d2:	4b97      	ldr	r3, [pc, #604]	; (8000830 <EXTI0_1_IRQHandler+0x380>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d10a      	bne.n	80005f0 <EXTI0_1_IRQHandler+0x140>
    	    		freq[j]=7;
 80005da:	4b96      	ldr	r3, [pc, #600]	; (8000834 <EXTI0_1_IRQHandler+0x384>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	4b96      	ldr	r3, [pc, #600]	; (8000838 <EXTI0_1_IRQHandler+0x388>)
 80005e0:	0092      	lsls	r2, r2, #2
 80005e2:	2107      	movs	r1, #7
 80005e4:	50d1      	str	r1, [r2, r3]
    	    		j++;
 80005e6:	4b93      	ldr	r3, [pc, #588]	; (8000834 <EXTI0_1_IRQHandler+0x384>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	1c5a      	adds	r2, r3, #1
 80005ec:	4b91      	ldr	r3, [pc, #580]	; (8000834 <EXTI0_1_IRQHandler+0x384>)
 80005ee:	601a      	str	r2, [r3, #0]
    	    	}
    	    	if(C_pressed==1){
 80005f0:	4b92      	ldr	r3, [pc, #584]	; (800083c <EXTI0_1_IRQHandler+0x38c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d102      	bne.n	80005fe <EXTI0_1_IRQHandler+0x14e>
    	    		mode=0;
 80005f8:	4b91      	ldr	r3, [pc, #580]	; (8000840 <EXTI0_1_IRQHandler+0x390>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
    	    	}

    }
    toggle_pin(2, 0);
 80005fe:	2100      	movs	r1, #0
 8000600:	2002      	movs	r0, #2
 8000602:	f7ff febd 	bl	8000380 <toggle_pin>

    // Row 4 - * or dot key
    toggle_pin(2, 3);
 8000606:	2103      	movs	r1, #3
 8000608:	2002      	movs	r0, #2
 800060a:	f7ff feb9 	bl	8000380 <toggle_pin>
    if ((GPIOA -> IDR >> 0) & 1) {// presses or i will not be increased here since they are for number presses
 800060e:	23a0      	movs	r3, #160	; 0xa0
 8000610:	05db      	lsls	r3, r3, #23
 8000612:	691b      	ldr	r3, [r3, #16]
 8000614:	2201      	movs	r2, #1
 8000616:	4013      	ands	r3, r2
 8000618:	d002      	beq.n	8000620 <EXTI0_1_IRQHandler+0x170>

    	dot=1;
 800061a:	4b8a      	ldr	r3, [pc, #552]	; (8000844 <EXTI0_1_IRQHandler+0x394>)
 800061c:	2201      	movs	r2, #1
 800061e:	601a      	str	r2, [r3, #0]

    }
    toggle_pin(2, 3);
 8000620:	2103      	movs	r1, #3
 8000622:	2002      	movs	r0, #2
 8000624:	f7ff feac 	bl	8000380 <toggle_pin>
  }

  set_rows();
 8000628:	f7ff ff1c 	bl	8000464 <set_rows>

  //check rows for Column 2
  if ((EXTI -> RPR1 >> 1) & 1) { //check status register for PB1
 800062c:	4b7c      	ldr	r3, [pc, #496]	; (8000820 <EXTI0_1_IRQHandler+0x370>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	085b      	lsrs	r3, r3, #1
 8000632:	2201      	movs	r2, #1
 8000634:	4013      	ands	r3, r2
 8000636:	d100      	bne.n	800063a <EXTI0_1_IRQHandler+0x18a>
 8000638:	e0e1      	b.n	80007fe <EXTI0_1_IRQHandler+0x34e>
    clear_rows();
 800063a:	f7ff feeb 	bl	8000414 <clear_rows>
    // Row 1 - number 2
    GPIOA -> ODR ^= (1U<< 10);
 800063e:	23a0      	movs	r3, #160	; 0xa0
 8000640:	05db      	lsls	r3, r3, #23
 8000642:	695a      	ldr	r2, [r3, #20]
 8000644:	23a0      	movs	r3, #160	; 0xa0
 8000646:	05db      	lsls	r3, r3, #23
 8000648:	2180      	movs	r1, #128	; 0x80
 800064a:	00c9      	lsls	r1, r1, #3
 800064c:	404a      	eors	r2, r1
 800064e:	615a      	str	r2, [r3, #20]
    if ((GPIOB -> IDR >> 1) & 1) {
 8000650:	4b7d      	ldr	r3, [pc, #500]	; (8000848 <EXTI0_1_IRQHandler+0x398>)
 8000652:	691b      	ldr	r3, [r3, #16]
 8000654:	085b      	lsrs	r3, r3, #1
 8000656:	2201      	movs	r2, #1
 8000658:	4013      	ands	r3, r2
 800065a:	d024      	beq.n	80006a6 <EXTI0_1_IRQHandler+0x1f6>
    	if(A_pressed==1){
 800065c:	4b71      	ldr	r3, [pc, #452]	; (8000824 <EXTI0_1_IRQHandler+0x374>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d10a      	bne.n	800067a <EXTI0_1_IRQHandler+0x1ca>
    	    		amp[i]=2;
 8000664:	4b70      	ldr	r3, [pc, #448]	; (8000828 <EXTI0_1_IRQHandler+0x378>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	4b70      	ldr	r3, [pc, #448]	; (800082c <EXTI0_1_IRQHandler+0x37c>)
 800066a:	0092      	lsls	r2, r2, #2
 800066c:	2102      	movs	r1, #2
 800066e:	50d1      	str	r1, [r2, r3]
    	    		i++;
 8000670:	4b6d      	ldr	r3, [pc, #436]	; (8000828 <EXTI0_1_IRQHandler+0x378>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	1c5a      	adds	r2, r3, #1
 8000676:	4b6c      	ldr	r3, [pc, #432]	; (8000828 <EXTI0_1_IRQHandler+0x378>)
 8000678:	601a      	str	r2, [r3, #0]
    	    	}
    	    	if(B_pressed==1){
 800067a:	4b6d      	ldr	r3, [pc, #436]	; (8000830 <EXTI0_1_IRQHandler+0x380>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d10a      	bne.n	8000698 <EXTI0_1_IRQHandler+0x1e8>
    	    		freq[j]=2;
 8000682:	4b6c      	ldr	r3, [pc, #432]	; (8000834 <EXTI0_1_IRQHandler+0x384>)
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	4b6c      	ldr	r3, [pc, #432]	; (8000838 <EXTI0_1_IRQHandler+0x388>)
 8000688:	0092      	lsls	r2, r2, #2
 800068a:	2102      	movs	r1, #2
 800068c:	50d1      	str	r1, [r2, r3]
    	    		j++;
 800068e:	4b69      	ldr	r3, [pc, #420]	; (8000834 <EXTI0_1_IRQHandler+0x384>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	1c5a      	adds	r2, r3, #1
 8000694:	4b67      	ldr	r3, [pc, #412]	; (8000834 <EXTI0_1_IRQHandler+0x384>)
 8000696:	601a      	str	r2, [r3, #0]
    	    	}
    	    	if(C_pressed==1){
 8000698:	4b68      	ldr	r3, [pc, #416]	; (800083c <EXTI0_1_IRQHandler+0x38c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d102      	bne.n	80006a6 <EXTI0_1_IRQHandler+0x1f6>
    	    		mode=2;
 80006a0:	4b67      	ldr	r3, [pc, #412]	; (8000840 <EXTI0_1_IRQHandler+0x390>)
 80006a2:	2202      	movs	r2, #2
 80006a4:	601a      	str	r2, [r3, #0]
    	    	}
    }
    GPIOA -> ODR ^= (1U<< 10);
 80006a6:	23a0      	movs	r3, #160	; 0xa0
 80006a8:	05db      	lsls	r3, r3, #23
 80006aa:	695a      	ldr	r2, [r3, #20]
 80006ac:	23a0      	movs	r3, #160	; 0xa0
 80006ae:	05db      	lsls	r3, r3, #23
 80006b0:	2180      	movs	r1, #128	; 0x80
 80006b2:	00c9      	lsls	r1, r1, #3
 80006b4:	404a      	eors	r2, r1
 80006b6:	615a      	str	r2, [r3, #20]

    // Row 2 - number 5
    GPIOA -> ODR ^= (1U<< 9);
 80006b8:	23a0      	movs	r3, #160	; 0xa0
 80006ba:	05db      	lsls	r3, r3, #23
 80006bc:	695a      	ldr	r2, [r3, #20]
 80006be:	23a0      	movs	r3, #160	; 0xa0
 80006c0:	05db      	lsls	r3, r3, #23
 80006c2:	2180      	movs	r1, #128	; 0x80
 80006c4:	0089      	lsls	r1, r1, #2
 80006c6:	404a      	eors	r2, r1
 80006c8:	615a      	str	r2, [r3, #20]
    if ((GPIOB -> IDR >> 1) & 1) {
 80006ca:	4b5f      	ldr	r3, [pc, #380]	; (8000848 <EXTI0_1_IRQHandler+0x398>)
 80006cc:	691b      	ldr	r3, [r3, #16]
 80006ce:	085b      	lsrs	r3, r3, #1
 80006d0:	2201      	movs	r2, #1
 80006d2:	4013      	ands	r3, r2
 80006d4:	d024      	beq.n	8000720 <EXTI0_1_IRQHandler+0x270>
    	if(A_pressed==1){
 80006d6:	4b53      	ldr	r3, [pc, #332]	; (8000824 <EXTI0_1_IRQHandler+0x374>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d10a      	bne.n	80006f4 <EXTI0_1_IRQHandler+0x244>
    	    		amp[i]=5;
 80006de:	4b52      	ldr	r3, [pc, #328]	; (8000828 <EXTI0_1_IRQHandler+0x378>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	4b52      	ldr	r3, [pc, #328]	; (800082c <EXTI0_1_IRQHandler+0x37c>)
 80006e4:	0092      	lsls	r2, r2, #2
 80006e6:	2105      	movs	r1, #5
 80006e8:	50d1      	str	r1, [r2, r3]
    	    		i++;
 80006ea:	4b4f      	ldr	r3, [pc, #316]	; (8000828 <EXTI0_1_IRQHandler+0x378>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	1c5a      	adds	r2, r3, #1
 80006f0:	4b4d      	ldr	r3, [pc, #308]	; (8000828 <EXTI0_1_IRQHandler+0x378>)
 80006f2:	601a      	str	r2, [r3, #0]
    	    	}
    	    	if(B_pressed==1){
 80006f4:	4b4e      	ldr	r3, [pc, #312]	; (8000830 <EXTI0_1_IRQHandler+0x380>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d10a      	bne.n	8000712 <EXTI0_1_IRQHandler+0x262>
    	    		freq[j]=5;
 80006fc:	4b4d      	ldr	r3, [pc, #308]	; (8000834 <EXTI0_1_IRQHandler+0x384>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b4d      	ldr	r3, [pc, #308]	; (8000838 <EXTI0_1_IRQHandler+0x388>)
 8000702:	0092      	lsls	r2, r2, #2
 8000704:	2105      	movs	r1, #5
 8000706:	50d1      	str	r1, [r2, r3]
    	    		j++;
 8000708:	4b4a      	ldr	r3, [pc, #296]	; (8000834 <EXTI0_1_IRQHandler+0x384>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	1c5a      	adds	r2, r3, #1
 800070e:	4b49      	ldr	r3, [pc, #292]	; (8000834 <EXTI0_1_IRQHandler+0x384>)
 8000710:	601a      	str	r2, [r3, #0]
    	    	}
    	    	if(C_pressed==1){
 8000712:	4b4a      	ldr	r3, [pc, #296]	; (800083c <EXTI0_1_IRQHandler+0x38c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d102      	bne.n	8000720 <EXTI0_1_IRQHandler+0x270>
    	    		mode=5;
 800071a:	4b49      	ldr	r3, [pc, #292]	; (8000840 <EXTI0_1_IRQHandler+0x390>)
 800071c:	2205      	movs	r2, #5
 800071e:	601a      	str	r2, [r3, #0]
    	    	}
    }
    GPIOA -> ODR ^= (1U<< 9);
 8000720:	23a0      	movs	r3, #160	; 0xa0
 8000722:	05db      	lsls	r3, r3, #23
 8000724:	695a      	ldr	r2, [r3, #20]
 8000726:	23a0      	movs	r3, #160	; 0xa0
 8000728:	05db      	lsls	r3, r3, #23
 800072a:	2180      	movs	r1, #128	; 0x80
 800072c:	0089      	lsls	r1, r1, #2
 800072e:	404a      	eors	r2, r1
 8000730:	615a      	str	r2, [r3, #20]

    // Row 3 - number 8
    toggle_pin(2, 0);
 8000732:	2100      	movs	r1, #0
 8000734:	2002      	movs	r0, #2
 8000736:	f7ff fe23 	bl	8000380 <toggle_pin>
    if ((GPIOB -> IDR >> 1) & 1) {
 800073a:	4b43      	ldr	r3, [pc, #268]	; (8000848 <EXTI0_1_IRQHandler+0x398>)
 800073c:	691b      	ldr	r3, [r3, #16]
 800073e:	085b      	lsrs	r3, r3, #1
 8000740:	2201      	movs	r2, #1
 8000742:	4013      	ands	r3, r2
 8000744:	d024      	beq.n	8000790 <EXTI0_1_IRQHandler+0x2e0>
    	if(A_pressed==1){
 8000746:	4b37      	ldr	r3, [pc, #220]	; (8000824 <EXTI0_1_IRQHandler+0x374>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d10a      	bne.n	8000764 <EXTI0_1_IRQHandler+0x2b4>
    	    		amp[i]=8;
 800074e:	4b36      	ldr	r3, [pc, #216]	; (8000828 <EXTI0_1_IRQHandler+0x378>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	4b36      	ldr	r3, [pc, #216]	; (800082c <EXTI0_1_IRQHandler+0x37c>)
 8000754:	0092      	lsls	r2, r2, #2
 8000756:	2108      	movs	r1, #8
 8000758:	50d1      	str	r1, [r2, r3]
    	    		i++;
 800075a:	4b33      	ldr	r3, [pc, #204]	; (8000828 <EXTI0_1_IRQHandler+0x378>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	1c5a      	adds	r2, r3, #1
 8000760:	4b31      	ldr	r3, [pc, #196]	; (8000828 <EXTI0_1_IRQHandler+0x378>)
 8000762:	601a      	str	r2, [r3, #0]
    	    	}
    	    	if(B_pressed==1){
 8000764:	4b32      	ldr	r3, [pc, #200]	; (8000830 <EXTI0_1_IRQHandler+0x380>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d10a      	bne.n	8000782 <EXTI0_1_IRQHandler+0x2d2>
    	    		freq[j]=8;
 800076c:	4b31      	ldr	r3, [pc, #196]	; (8000834 <EXTI0_1_IRQHandler+0x384>)
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	4b31      	ldr	r3, [pc, #196]	; (8000838 <EXTI0_1_IRQHandler+0x388>)
 8000772:	0092      	lsls	r2, r2, #2
 8000774:	2108      	movs	r1, #8
 8000776:	50d1      	str	r1, [r2, r3]
    	    		j++;
 8000778:	4b2e      	ldr	r3, [pc, #184]	; (8000834 <EXTI0_1_IRQHandler+0x384>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	1c5a      	adds	r2, r3, #1
 800077e:	4b2d      	ldr	r3, [pc, #180]	; (8000834 <EXTI0_1_IRQHandler+0x384>)
 8000780:	601a      	str	r2, [r3, #0]
    	    	}
    	    	if(C_pressed==1){
 8000782:	4b2e      	ldr	r3, [pc, #184]	; (800083c <EXTI0_1_IRQHandler+0x38c>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d102      	bne.n	8000790 <EXTI0_1_IRQHandler+0x2e0>
    	    		mode=0;
 800078a:	4b2d      	ldr	r3, [pc, #180]	; (8000840 <EXTI0_1_IRQHandler+0x390>)
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
    	    	}
    }
    toggle_pin(2, 0);
 8000790:	2100      	movs	r1, #0
 8000792:	2002      	movs	r0, #2
 8000794:	f7ff fdf4 	bl	8000380 <toggle_pin>

    // Row 4 - number 0
    toggle_pin(1, 15);
 8000798:	210f      	movs	r1, #15
 800079a:	2001      	movs	r0, #1
 800079c:	f7ff fdf0 	bl	8000380 <toggle_pin>
    if ((GPIOB -> IDR >> 1) & 1) {
 80007a0:	4b29      	ldr	r3, [pc, #164]	; (8000848 <EXTI0_1_IRQHandler+0x398>)
 80007a2:	691b      	ldr	r3, [r3, #16]
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	2201      	movs	r2, #1
 80007a8:	4013      	ands	r3, r2
 80007aa:	d024      	beq.n	80007f6 <EXTI0_1_IRQHandler+0x346>
    	if(A_pressed==1){
 80007ac:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <EXTI0_1_IRQHandler+0x374>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d10a      	bne.n	80007ca <EXTI0_1_IRQHandler+0x31a>
    	    		amp[i]=0;
 80007b4:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <EXTI0_1_IRQHandler+0x378>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	4b1c      	ldr	r3, [pc, #112]	; (800082c <EXTI0_1_IRQHandler+0x37c>)
 80007ba:	0092      	lsls	r2, r2, #2
 80007bc:	2100      	movs	r1, #0
 80007be:	50d1      	str	r1, [r2, r3]
    	    		i++;
 80007c0:	4b19      	ldr	r3, [pc, #100]	; (8000828 <EXTI0_1_IRQHandler+0x378>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	1c5a      	adds	r2, r3, #1
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <EXTI0_1_IRQHandler+0x378>)
 80007c8:	601a      	str	r2, [r3, #0]
    	    	}
    	    	if(B_pressed==1){
 80007ca:	4b19      	ldr	r3, [pc, #100]	; (8000830 <EXTI0_1_IRQHandler+0x380>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d10a      	bne.n	80007e8 <EXTI0_1_IRQHandler+0x338>
    	    		freq[j]=0;
 80007d2:	4b18      	ldr	r3, [pc, #96]	; (8000834 <EXTI0_1_IRQHandler+0x384>)
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	4b18      	ldr	r3, [pc, #96]	; (8000838 <EXTI0_1_IRQHandler+0x388>)
 80007d8:	0092      	lsls	r2, r2, #2
 80007da:	2100      	movs	r1, #0
 80007dc:	50d1      	str	r1, [r2, r3]
    	    		j++;
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <EXTI0_1_IRQHandler+0x384>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	4b13      	ldr	r3, [pc, #76]	; (8000834 <EXTI0_1_IRQHandler+0x384>)
 80007e6:	601a      	str	r2, [r3, #0]
    	    	}
    	    	if(C_pressed==1){
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <EXTI0_1_IRQHandler+0x38c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d102      	bne.n	80007f6 <EXTI0_1_IRQHandler+0x346>
    	    		mode=0;
 80007f0:	4b13      	ldr	r3, [pc, #76]	; (8000840 <EXTI0_1_IRQHandler+0x390>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
    	    	}
    }
    toggle_pin(1, 15);
 80007f6:	210f      	movs	r1, #15
 80007f8:	2001      	movs	r0, #1
 80007fa:	f7ff fdc1 	bl	8000380 <toggle_pin>

  }

  set_rows();
 80007fe:	f7ff fe31 	bl	8000464 <set_rows>



  if(A_pressed == 1 && B_pressed != 1){
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <EXTI0_1_IRQHandler+0x374>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d16c      	bne.n	80008e4 <EXTI0_1_IRQHandler+0x434>
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <EXTI0_1_IRQHandler+0x380>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d068      	beq.n	80008e4 <EXTI0_1_IRQHandler+0x434>
  if(i==4){
 8000812:	4b05      	ldr	r3, [pc, #20]	; (8000828 <EXTI0_1_IRQHandler+0x378>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2b04      	cmp	r3, #4
 8000818:	d128      	bne.n	800086c <EXTI0_1_IRQHandler+0x3bc>
 800081a:	e017      	b.n	800084c <EXTI0_1_IRQHandler+0x39c>
 800081c:	2000007c 	.word	0x2000007c
 8000820:	40021800 	.word	0x40021800
 8000824:	20000080 	.word	0x20000080
 8000828:	20000034 	.word	0x20000034
 800082c:	20000064 	.word	0x20000064
 8000830:	2000008c 	.word	0x2000008c
 8000834:	20000038 	.word	0x20000038
 8000838:	20000054 	.word	0x20000054
 800083c:	200000ac 	.word	0x200000ac
 8000840:	20000000 	.word	0x20000000
 8000844:	20000094 	.word	0x20000094
 8000848:	50000400 	.word	0x50000400
  		   d1=amp[3];
 800084c:	4b6b      	ldr	r3, [pc, #428]	; (80009fc <EXTI0_1_IRQHandler+0x54c>)
 800084e:	68da      	ldr	r2, [r3, #12]
 8000850:	4b6b      	ldr	r3, [pc, #428]	; (8000a00 <EXTI0_1_IRQHandler+0x550>)
 8000852:	601a      	str	r2, [r3, #0]
  		   d2=amp[2];
 8000854:	4b69      	ldr	r3, [pc, #420]	; (80009fc <EXTI0_1_IRQHandler+0x54c>)
 8000856:	689a      	ldr	r2, [r3, #8]
 8000858:	4b6a      	ldr	r3, [pc, #424]	; (8000a04 <EXTI0_1_IRQHandler+0x554>)
 800085a:	601a      	str	r2, [r3, #0]
  		   d3=amp[1];
 800085c:	4b67      	ldr	r3, [pc, #412]	; (80009fc <EXTI0_1_IRQHandler+0x54c>)
 800085e:	685a      	ldr	r2, [r3, #4]
 8000860:	4b69      	ldr	r3, [pc, #420]	; (8000a08 <EXTI0_1_IRQHandler+0x558>)
 8000862:	601a      	str	r2, [r3, #0]
  		   d4=amp[0];
 8000864:	4b65      	ldr	r3, [pc, #404]	; (80009fc <EXTI0_1_IRQHandler+0x54c>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4b68      	ldr	r3, [pc, #416]	; (8000a0c <EXTI0_1_IRQHandler+0x55c>)
 800086a:	601a      	str	r2, [r3, #0]
  	   }
  	   if(i==3){
 800086c:	4b68      	ldr	r3, [pc, #416]	; (8000a10 <EXTI0_1_IRQHandler+0x560>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b03      	cmp	r3, #3
 8000872:	d10f      	bne.n	8000894 <EXTI0_1_IRQHandler+0x3e4>
  		   d1=-1;
 8000874:	4b62      	ldr	r3, [pc, #392]	; (8000a00 <EXTI0_1_IRQHandler+0x550>)
 8000876:	2201      	movs	r2, #1
 8000878:	4252      	negs	r2, r2
 800087a:	601a      	str	r2, [r3, #0]
  		   d2=amp[2];
 800087c:	4b5f      	ldr	r3, [pc, #380]	; (80009fc <EXTI0_1_IRQHandler+0x54c>)
 800087e:	689a      	ldr	r2, [r3, #8]
 8000880:	4b60      	ldr	r3, [pc, #384]	; (8000a04 <EXTI0_1_IRQHandler+0x554>)
 8000882:	601a      	str	r2, [r3, #0]
  		   d3=amp[1];
 8000884:	4b5d      	ldr	r3, [pc, #372]	; (80009fc <EXTI0_1_IRQHandler+0x54c>)
 8000886:	685a      	ldr	r2, [r3, #4]
 8000888:	4b5f      	ldr	r3, [pc, #380]	; (8000a08 <EXTI0_1_IRQHandler+0x558>)
 800088a:	601a      	str	r2, [r3, #0]
  		   d4=amp[0];
 800088c:	4b5b      	ldr	r3, [pc, #364]	; (80009fc <EXTI0_1_IRQHandler+0x54c>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4b5e      	ldr	r3, [pc, #376]	; (8000a0c <EXTI0_1_IRQHandler+0x55c>)
 8000892:	601a      	str	r2, [r3, #0]
  	   	   }
  	   if(i==2){
 8000894:	4b5e      	ldr	r3, [pc, #376]	; (8000a10 <EXTI0_1_IRQHandler+0x560>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b02      	cmp	r3, #2
 800089a:	d10f      	bne.n	80008bc <EXTI0_1_IRQHandler+0x40c>
  		   d1=-1;
 800089c:	4b58      	ldr	r3, [pc, #352]	; (8000a00 <EXTI0_1_IRQHandler+0x550>)
 800089e:	2201      	movs	r2, #1
 80008a0:	4252      	negs	r2, r2
 80008a2:	601a      	str	r2, [r3, #0]
  		   		   d2=-1;
 80008a4:	4b57      	ldr	r3, [pc, #348]	; (8000a04 <EXTI0_1_IRQHandler+0x554>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	4252      	negs	r2, r2
 80008aa:	601a      	str	r2, [r3, #0]
  		   		   d3=amp[1];
 80008ac:	4b53      	ldr	r3, [pc, #332]	; (80009fc <EXTI0_1_IRQHandler+0x54c>)
 80008ae:	685a      	ldr	r2, [r3, #4]
 80008b0:	4b55      	ldr	r3, [pc, #340]	; (8000a08 <EXTI0_1_IRQHandler+0x558>)
 80008b2:	601a      	str	r2, [r3, #0]
  		   		   d4=amp[0];
 80008b4:	4b51      	ldr	r3, [pc, #324]	; (80009fc <EXTI0_1_IRQHandler+0x54c>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4b54      	ldr	r3, [pc, #336]	; (8000a0c <EXTI0_1_IRQHandler+0x55c>)
 80008ba:	601a      	str	r2, [r3, #0]
  		  }
  	   if(i==1){
 80008bc:	4b54      	ldr	r3, [pc, #336]	; (8000a10 <EXTI0_1_IRQHandler+0x560>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d10f      	bne.n	80008e4 <EXTI0_1_IRQHandler+0x434>
  		   d1=-1;
 80008c4:	4b4e      	ldr	r3, [pc, #312]	; (8000a00 <EXTI0_1_IRQHandler+0x550>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	4252      	negs	r2, r2
 80008ca:	601a      	str	r2, [r3, #0]
  		   d2=-1;
 80008cc:	4b4d      	ldr	r3, [pc, #308]	; (8000a04 <EXTI0_1_IRQHandler+0x554>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	4252      	negs	r2, r2
 80008d2:	601a      	str	r2, [r3, #0]
  		   d3=-1;
 80008d4:	4b4c      	ldr	r3, [pc, #304]	; (8000a08 <EXTI0_1_IRQHandler+0x558>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	4252      	negs	r2, r2
 80008da:	601a      	str	r2, [r3, #0]
  		   d4=amp[0];
 80008dc:	4b47      	ldr	r3, [pc, #284]	; (80009fc <EXTI0_1_IRQHandler+0x54c>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b4a      	ldr	r3, [pc, #296]	; (8000a0c <EXTI0_1_IRQHandler+0x55c>)
 80008e2:	601a      	str	r2, [r3, #0]
  	   		  }
  }

  if(A_pressed != 1 && B_pressed == 1){
 80008e4:	4b4b      	ldr	r3, [pc, #300]	; (8000a14 <EXTI0_1_IRQHandler+0x564>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d053      	beq.n	8000994 <EXTI0_1_IRQHandler+0x4e4>
 80008ec:	4b4a      	ldr	r3, [pc, #296]	; (8000a18 <EXTI0_1_IRQHandler+0x568>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d14f      	bne.n	8000994 <EXTI0_1_IRQHandler+0x4e4>
  if(j==4){
 80008f4:	4b49      	ldr	r3, [pc, #292]	; (8000a1c <EXTI0_1_IRQHandler+0x56c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b04      	cmp	r3, #4
 80008fa:	d10f      	bne.n	800091c <EXTI0_1_IRQHandler+0x46c>
  		   d1=freq[3];
 80008fc:	4b48      	ldr	r3, [pc, #288]	; (8000a20 <EXTI0_1_IRQHandler+0x570>)
 80008fe:	68da      	ldr	r2, [r3, #12]
 8000900:	4b3f      	ldr	r3, [pc, #252]	; (8000a00 <EXTI0_1_IRQHandler+0x550>)
 8000902:	601a      	str	r2, [r3, #0]
  		   d2=freq[2];
 8000904:	4b46      	ldr	r3, [pc, #280]	; (8000a20 <EXTI0_1_IRQHandler+0x570>)
 8000906:	689a      	ldr	r2, [r3, #8]
 8000908:	4b3e      	ldr	r3, [pc, #248]	; (8000a04 <EXTI0_1_IRQHandler+0x554>)
 800090a:	601a      	str	r2, [r3, #0]
  		   d3=freq[1];
 800090c:	4b44      	ldr	r3, [pc, #272]	; (8000a20 <EXTI0_1_IRQHandler+0x570>)
 800090e:	685a      	ldr	r2, [r3, #4]
 8000910:	4b3d      	ldr	r3, [pc, #244]	; (8000a08 <EXTI0_1_IRQHandler+0x558>)
 8000912:	601a      	str	r2, [r3, #0]
  		   d4=freq[0];
 8000914:	4b42      	ldr	r3, [pc, #264]	; (8000a20 <EXTI0_1_IRQHandler+0x570>)
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	4b3c      	ldr	r3, [pc, #240]	; (8000a0c <EXTI0_1_IRQHandler+0x55c>)
 800091a:	601a      	str	r2, [r3, #0]
  	   }
  	   if(j==3){
 800091c:	4b3f      	ldr	r3, [pc, #252]	; (8000a1c <EXTI0_1_IRQHandler+0x56c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b03      	cmp	r3, #3
 8000922:	d10f      	bne.n	8000944 <EXTI0_1_IRQHandler+0x494>
  		   d1=-1;
 8000924:	4b36      	ldr	r3, [pc, #216]	; (8000a00 <EXTI0_1_IRQHandler+0x550>)
 8000926:	2201      	movs	r2, #1
 8000928:	4252      	negs	r2, r2
 800092a:	601a      	str	r2, [r3, #0]
  		   d2=freq[2];
 800092c:	4b3c      	ldr	r3, [pc, #240]	; (8000a20 <EXTI0_1_IRQHandler+0x570>)
 800092e:	689a      	ldr	r2, [r3, #8]
 8000930:	4b34      	ldr	r3, [pc, #208]	; (8000a04 <EXTI0_1_IRQHandler+0x554>)
 8000932:	601a      	str	r2, [r3, #0]
  		   d3=freq[1];
 8000934:	4b3a      	ldr	r3, [pc, #232]	; (8000a20 <EXTI0_1_IRQHandler+0x570>)
 8000936:	685a      	ldr	r2, [r3, #4]
 8000938:	4b33      	ldr	r3, [pc, #204]	; (8000a08 <EXTI0_1_IRQHandler+0x558>)
 800093a:	601a      	str	r2, [r3, #0]
  		   d4=freq[0];
 800093c:	4b38      	ldr	r3, [pc, #224]	; (8000a20 <EXTI0_1_IRQHandler+0x570>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b32      	ldr	r3, [pc, #200]	; (8000a0c <EXTI0_1_IRQHandler+0x55c>)
 8000942:	601a      	str	r2, [r3, #0]
  	   	   }
  	   if(j==2){
 8000944:	4b35      	ldr	r3, [pc, #212]	; (8000a1c <EXTI0_1_IRQHandler+0x56c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b02      	cmp	r3, #2
 800094a:	d10f      	bne.n	800096c <EXTI0_1_IRQHandler+0x4bc>
  		   d1=-1;
 800094c:	4b2c      	ldr	r3, [pc, #176]	; (8000a00 <EXTI0_1_IRQHandler+0x550>)
 800094e:	2201      	movs	r2, #1
 8000950:	4252      	negs	r2, r2
 8000952:	601a      	str	r2, [r3, #0]
  		   		   d2=-1;
 8000954:	4b2b      	ldr	r3, [pc, #172]	; (8000a04 <EXTI0_1_IRQHandler+0x554>)
 8000956:	2201      	movs	r2, #1
 8000958:	4252      	negs	r2, r2
 800095a:	601a      	str	r2, [r3, #0]
  		   		   d3=freq[1];
 800095c:	4b30      	ldr	r3, [pc, #192]	; (8000a20 <EXTI0_1_IRQHandler+0x570>)
 800095e:	685a      	ldr	r2, [r3, #4]
 8000960:	4b29      	ldr	r3, [pc, #164]	; (8000a08 <EXTI0_1_IRQHandler+0x558>)
 8000962:	601a      	str	r2, [r3, #0]
  		   		   d4=freq[0];
 8000964:	4b2e      	ldr	r3, [pc, #184]	; (8000a20 <EXTI0_1_IRQHandler+0x570>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <EXTI0_1_IRQHandler+0x55c>)
 800096a:	601a      	str	r2, [r3, #0]
  		  }
  	   if(j==1){
 800096c:	4b2b      	ldr	r3, [pc, #172]	; (8000a1c <EXTI0_1_IRQHandler+0x56c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d10f      	bne.n	8000994 <EXTI0_1_IRQHandler+0x4e4>
  		   d1=-1;
 8000974:	4b22      	ldr	r3, [pc, #136]	; (8000a00 <EXTI0_1_IRQHandler+0x550>)
 8000976:	2201      	movs	r2, #1
 8000978:	4252      	negs	r2, r2
 800097a:	601a      	str	r2, [r3, #0]
  		   d2=-1;
 800097c:	4b21      	ldr	r3, [pc, #132]	; (8000a04 <EXTI0_1_IRQHandler+0x554>)
 800097e:	2201      	movs	r2, #1
 8000980:	4252      	negs	r2, r2
 8000982:	601a      	str	r2, [r3, #0]
  		   d3=-1;
 8000984:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <EXTI0_1_IRQHandler+0x558>)
 8000986:	2201      	movs	r2, #1
 8000988:	4252      	negs	r2, r2
 800098a:	601a      	str	r2, [r3, #0]
  		   d4=freq[0];
 800098c:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <EXTI0_1_IRQHandler+0x570>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <EXTI0_1_IRQHandler+0x55c>)
 8000992:	601a      	str	r2, [r3, #0]
  	   		  }
  }


  //reset status registers
  EXTI -> RPR1 |= (1U<< 0);
 8000994:	4b23      	ldr	r3, [pc, #140]	; (8000a24 <EXTI0_1_IRQHandler+0x574>)
 8000996:	68da      	ldr	r2, [r3, #12]
 8000998:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <EXTI0_1_IRQHandler+0x574>)
 800099a:	2101      	movs	r1, #1
 800099c:	430a      	orrs	r2, r1
 800099e:	60da      	str	r2, [r3, #12]
  EXTI -> RPR1 |= (1U<< 1);
 80009a0:	4b20      	ldr	r3, [pc, #128]	; (8000a24 <EXTI0_1_IRQHandler+0x574>)
 80009a2:	68da      	ldr	r2, [r3, #12]
 80009a4:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <EXTI0_1_IRQHandler+0x574>)
 80009a6:	2102      	movs	r1, #2
 80009a8:	430a      	orrs	r2, r1
 80009aa:	60da      	str	r2, [r3, #12]

  //display the current number on the SSD
if (A_pressed == 1 || B_pressed == 1){
 80009ac:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <EXTI0_1_IRQHandler+0x564>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d00e      	beq.n	80009d2 <EXTI0_1_IRQHandler+0x522>
 80009b4:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <EXTI0_1_IRQHandler+0x568>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d11b      	bne.n	80009f4 <EXTI0_1_IRQHandler+0x544>
	while(!( (EXTI ->  RPR1 >> 1) & 1 || (EXTI -> RPR1 >> 0) & 1 || ( (EXTI ->  RPR1 >> 7) & 1)))
 80009bc:	e009      	b.n	80009d2 <EXTI0_1_IRQHandler+0x522>
	find_digit(d4,d3,d2,d1);
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <EXTI0_1_IRQHandler+0x55c>)
 80009c0:	6818      	ldr	r0, [r3, #0]
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <EXTI0_1_IRQHandler+0x558>)
 80009c4:	6819      	ldr	r1, [r3, #0]
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <EXTI0_1_IRQHandler+0x554>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <EXTI0_1_IRQHandler+0x550>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f000 feb7 	bl	8001740 <find_digit>
	while(!( (EXTI ->  RPR1 >> 1) & 1 || (EXTI -> RPR1 >> 0) & 1 || ( (EXTI ->  RPR1 >> 7) & 1)))
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <EXTI0_1_IRQHandler+0x574>)
 80009d4:	68db      	ldr	r3, [r3, #12]
 80009d6:	085b      	lsrs	r3, r3, #1
 80009d8:	2201      	movs	r2, #1
 80009da:	4013      	ands	r3, r2
 80009dc:	d10a      	bne.n	80009f4 <EXTI0_1_IRQHandler+0x544>
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <EXTI0_1_IRQHandler+0x574>)
 80009e0:	68db      	ldr	r3, [r3, #12]
 80009e2:	2201      	movs	r2, #1
 80009e4:	4013      	ands	r3, r2
 80009e6:	d105      	bne.n	80009f4 <EXTI0_1_IRQHandler+0x544>
 80009e8:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <EXTI0_1_IRQHandler+0x574>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	09db      	lsrs	r3, r3, #7
 80009ee:	2201      	movs	r2, #1
 80009f0:	4013      	ands	r3, r2
 80009f2:	d0e4      	beq.n	80009be <EXTI0_1_IRQHandler+0x50e>
}


}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	20000064 	.word	0x20000064
 8000a00:	20000004 	.word	0x20000004
 8000a04:	20000008 	.word	0x20000008
 8000a08:	2000000c 	.word	0x2000000c
 8000a0c:	20000010 	.word	0x20000010
 8000a10:	20000034 	.word	0x20000034
 8000a14:	20000080 	.word	0x20000080
 8000a18:	2000008c 	.word	0x2000008c
 8000a1c:	20000038 	.word	0x20000038
 8000a20:	20000054 	.word	0x20000054
 8000a24:	40021800 	.word	0x40021800

08000a28 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler() { //interrupt from PB7(Column 3) and PB8(Column 4)
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  //PA10 PA9 PB0 PB8 outputs - rows
  delay(300);// for preventing bouncing
 8000a2c:	2396      	movs	r3, #150	; 0x96
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	0018      	movs	r0, r3
 8000a32:	f7ff fccb 	bl	80003cc <delay>
  ten_sec_counter = 0; // reset 10sec counter if an interrupt happens
 8000a36:	4be3      	ldr	r3, [pc, #908]	; (8000dc4 <EXTI4_15_IRQHandler+0x39c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]

  //check rows for column 3
  if ((EXTI -> RPR1 >> 7) & 1) {
 8000a3c:	4be2      	ldr	r3, [pc, #904]	; (8000dc8 <EXTI4_15_IRQHandler+0x3a0>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	09db      	lsrs	r3, r3, #7
 8000a42:	2201      	movs	r2, #1
 8000a44:	4013      	ands	r3, r2
 8000a46:	d100      	bne.n	8000a4a <EXTI4_15_IRQHandler+0x22>
 8000a48:	e0de      	b.n	8000c08 <EXTI4_15_IRQHandler+0x1e0>
    clear_rows();
 8000a4a:	f7ff fce3 	bl	8000414 <clear_rows>
    // Row 1 - number 3
    toggle_pin(1,10);
 8000a4e:	210a      	movs	r1, #10
 8000a50:	2001      	movs	r0, #1
 8000a52:	f7ff fc95 	bl	8000380 <toggle_pin>
    if ((GPIOB -> IDR >> 7) & 1) {
 8000a56:	4bdd      	ldr	r3, [pc, #884]	; (8000dcc <EXTI4_15_IRQHandler+0x3a4>)
 8000a58:	691b      	ldr	r3, [r3, #16]
 8000a5a:	09db      	lsrs	r3, r3, #7
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	4013      	ands	r3, r2
 8000a60:	d024      	beq.n	8000aac <EXTI4_15_IRQHandler+0x84>
    	if(A_pressed==1){
 8000a62:	4bdb      	ldr	r3, [pc, #876]	; (8000dd0 <EXTI4_15_IRQHandler+0x3a8>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d10a      	bne.n	8000a80 <EXTI4_15_IRQHandler+0x58>
    	    		amp[i]=3;
 8000a6a:	4bda      	ldr	r3, [pc, #872]	; (8000dd4 <EXTI4_15_IRQHandler+0x3ac>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	4bda      	ldr	r3, [pc, #872]	; (8000dd8 <EXTI4_15_IRQHandler+0x3b0>)
 8000a70:	0092      	lsls	r2, r2, #2
 8000a72:	2103      	movs	r1, #3
 8000a74:	50d1      	str	r1, [r2, r3]
    	    		i++;
 8000a76:	4bd7      	ldr	r3, [pc, #860]	; (8000dd4 <EXTI4_15_IRQHandler+0x3ac>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	1c5a      	adds	r2, r3, #1
 8000a7c:	4bd5      	ldr	r3, [pc, #852]	; (8000dd4 <EXTI4_15_IRQHandler+0x3ac>)
 8000a7e:	601a      	str	r2, [r3, #0]
    	    	}
    	    	if(B_pressed==1){
 8000a80:	4bd6      	ldr	r3, [pc, #856]	; (8000ddc <EXTI4_15_IRQHandler+0x3b4>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d10a      	bne.n	8000a9e <EXTI4_15_IRQHandler+0x76>
    	    		freq[j]=3;
 8000a88:	4bd5      	ldr	r3, [pc, #852]	; (8000de0 <EXTI4_15_IRQHandler+0x3b8>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4bd5      	ldr	r3, [pc, #852]	; (8000de4 <EXTI4_15_IRQHandler+0x3bc>)
 8000a8e:	0092      	lsls	r2, r2, #2
 8000a90:	2103      	movs	r1, #3
 8000a92:	50d1      	str	r1, [r2, r3]
    	    		j++;
 8000a94:	4bd2      	ldr	r3, [pc, #840]	; (8000de0 <EXTI4_15_IRQHandler+0x3b8>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	1c5a      	adds	r2, r3, #1
 8000a9a:	4bd1      	ldr	r3, [pc, #836]	; (8000de0 <EXTI4_15_IRQHandler+0x3b8>)
 8000a9c:	601a      	str	r2, [r3, #0]
    	    	}
    	    	if(C_pressed==1){
 8000a9e:	4bd2      	ldr	r3, [pc, #840]	; (8000de8 <EXTI4_15_IRQHandler+0x3c0>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d102      	bne.n	8000aac <EXTI4_15_IRQHandler+0x84>
    	    		mode=3;
 8000aa6:	4bd1      	ldr	r3, [pc, #836]	; (8000dec <EXTI4_15_IRQHandler+0x3c4>)
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	601a      	str	r2, [r3, #0]
    	    	}
    }
    toggle_pin(1,10);
 8000aac:	210a      	movs	r1, #10
 8000aae:	2001      	movs	r0, #1
 8000ab0:	f7ff fc66 	bl	8000380 <toggle_pin>
    // Row 2 - number 6
    toggle_pin(1,9);
 8000ab4:	2109      	movs	r1, #9
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f7ff fc62 	bl	8000380 <toggle_pin>
    if ((GPIOB -> IDR >> 7) & 1) {
 8000abc:	4bc3      	ldr	r3, [pc, #780]	; (8000dcc <EXTI4_15_IRQHandler+0x3a4>)
 8000abe:	691b      	ldr	r3, [r3, #16]
 8000ac0:	09db      	lsrs	r3, r3, #7
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	d024      	beq.n	8000b12 <EXTI4_15_IRQHandler+0xea>
    	if(A_pressed==1){
 8000ac8:	4bc1      	ldr	r3, [pc, #772]	; (8000dd0 <EXTI4_15_IRQHandler+0x3a8>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d10a      	bne.n	8000ae6 <EXTI4_15_IRQHandler+0xbe>
    	    		amp[i]=6;
 8000ad0:	4bc0      	ldr	r3, [pc, #768]	; (8000dd4 <EXTI4_15_IRQHandler+0x3ac>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4bc0      	ldr	r3, [pc, #768]	; (8000dd8 <EXTI4_15_IRQHandler+0x3b0>)
 8000ad6:	0092      	lsls	r2, r2, #2
 8000ad8:	2106      	movs	r1, #6
 8000ada:	50d1      	str	r1, [r2, r3]
    	    		i++;
 8000adc:	4bbd      	ldr	r3, [pc, #756]	; (8000dd4 <EXTI4_15_IRQHandler+0x3ac>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	1c5a      	adds	r2, r3, #1
 8000ae2:	4bbc      	ldr	r3, [pc, #752]	; (8000dd4 <EXTI4_15_IRQHandler+0x3ac>)
 8000ae4:	601a      	str	r2, [r3, #0]
    	    	}
    	    	if(B_pressed==1){
 8000ae6:	4bbd      	ldr	r3, [pc, #756]	; (8000ddc <EXTI4_15_IRQHandler+0x3b4>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d10a      	bne.n	8000b04 <EXTI4_15_IRQHandler+0xdc>
    	    		freq[j]=6;
 8000aee:	4bbc      	ldr	r3, [pc, #752]	; (8000de0 <EXTI4_15_IRQHandler+0x3b8>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	4bbc      	ldr	r3, [pc, #752]	; (8000de4 <EXTI4_15_IRQHandler+0x3bc>)
 8000af4:	0092      	lsls	r2, r2, #2
 8000af6:	2106      	movs	r1, #6
 8000af8:	50d1      	str	r1, [r2, r3]
    	    		j++;
 8000afa:	4bb9      	ldr	r3, [pc, #740]	; (8000de0 <EXTI4_15_IRQHandler+0x3b8>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	4bb7      	ldr	r3, [pc, #732]	; (8000de0 <EXTI4_15_IRQHandler+0x3b8>)
 8000b02:	601a      	str	r2, [r3, #0]
    	    	}
    	    	if(C_pressed==1){
 8000b04:	4bb8      	ldr	r3, [pc, #736]	; (8000de8 <EXTI4_15_IRQHandler+0x3c0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d102      	bne.n	8000b12 <EXTI4_15_IRQHandler+0xea>
    	    		mode=6;
 8000b0c:	4bb7      	ldr	r3, [pc, #732]	; (8000dec <EXTI4_15_IRQHandler+0x3c4>)
 8000b0e:	2206      	movs	r2, #6
 8000b10:	601a      	str	r2, [r3, #0]
    	    	}
    }
    toggle_pin(1,9);
 8000b12:	2109      	movs	r1, #9
 8000b14:	2001      	movs	r0, #1
 8000b16:	f7ff fc33 	bl	8000380 <toggle_pin>
    // Row 3 - number 9
    toggle_pin(2, 0);
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2002      	movs	r0, #2
 8000b1e:	f7ff fc2f 	bl	8000380 <toggle_pin>
    if ((GPIOB -> IDR >> 7) & 1) {
 8000b22:	4baa      	ldr	r3, [pc, #680]	; (8000dcc <EXTI4_15_IRQHandler+0x3a4>)
 8000b24:	691b      	ldr	r3, [r3, #16]
 8000b26:	09db      	lsrs	r3, r3, #7
 8000b28:	2201      	movs	r2, #1
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	d024      	beq.n	8000b78 <EXTI4_15_IRQHandler+0x150>
    	if(A_pressed==1){
 8000b2e:	4ba8      	ldr	r3, [pc, #672]	; (8000dd0 <EXTI4_15_IRQHandler+0x3a8>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d10a      	bne.n	8000b4c <EXTI4_15_IRQHandler+0x124>
    	    		amp[i]=9;
 8000b36:	4ba7      	ldr	r3, [pc, #668]	; (8000dd4 <EXTI4_15_IRQHandler+0x3ac>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	4ba7      	ldr	r3, [pc, #668]	; (8000dd8 <EXTI4_15_IRQHandler+0x3b0>)
 8000b3c:	0092      	lsls	r2, r2, #2
 8000b3e:	2109      	movs	r1, #9
 8000b40:	50d1      	str	r1, [r2, r3]
    	    		i++;
 8000b42:	4ba4      	ldr	r3, [pc, #656]	; (8000dd4 <EXTI4_15_IRQHandler+0x3ac>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	1c5a      	adds	r2, r3, #1
 8000b48:	4ba2      	ldr	r3, [pc, #648]	; (8000dd4 <EXTI4_15_IRQHandler+0x3ac>)
 8000b4a:	601a      	str	r2, [r3, #0]
    	    	}
    	    	if(B_pressed==1){
 8000b4c:	4ba3      	ldr	r3, [pc, #652]	; (8000ddc <EXTI4_15_IRQHandler+0x3b4>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d10a      	bne.n	8000b6a <EXTI4_15_IRQHandler+0x142>
    	    		freq[j]=9;
 8000b54:	4ba2      	ldr	r3, [pc, #648]	; (8000de0 <EXTI4_15_IRQHandler+0x3b8>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4ba2      	ldr	r3, [pc, #648]	; (8000de4 <EXTI4_15_IRQHandler+0x3bc>)
 8000b5a:	0092      	lsls	r2, r2, #2
 8000b5c:	2109      	movs	r1, #9
 8000b5e:	50d1      	str	r1, [r2, r3]
    	    		j++;
 8000b60:	4b9f      	ldr	r3, [pc, #636]	; (8000de0 <EXTI4_15_IRQHandler+0x3b8>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	1c5a      	adds	r2, r3, #1
 8000b66:	4b9e      	ldr	r3, [pc, #632]	; (8000de0 <EXTI4_15_IRQHandler+0x3b8>)
 8000b68:	601a      	str	r2, [r3, #0]
    	    	}
    	    	if(C_pressed==1){
 8000b6a:	4b9f      	ldr	r3, [pc, #636]	; (8000de8 <EXTI4_15_IRQHandler+0x3c0>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d102      	bne.n	8000b78 <EXTI4_15_IRQHandler+0x150>
    	    		mode=0;
 8000b72:	4b9e      	ldr	r3, [pc, #632]	; (8000dec <EXTI4_15_IRQHandler+0x3c4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
    	    	}
    }
    toggle_pin(2, 0);
 8000b78:	2100      	movs	r1, #0
 8000b7a:	2002      	movs	r0, #2
 8000b7c:	f7ff fc00 	bl	8000380 <toggle_pin>
    // Row 4 - # or E key
    toggle_pin(1,15);
 8000b80:	210f      	movs	r1, #15
 8000b82:	2001      	movs	r0, #1
 8000b84:	f7ff fbfc 	bl	8000380 <toggle_pin>
    if ((GPIOB -> IDR >> 7) & 1) {// presses or i will not be increased here since they are for number presses
 8000b88:	4b90      	ldr	r3, [pc, #576]	; (8000dcc <EXTI4_15_IRQHandler+0x3a4>)
 8000b8a:	691b      	ldr	r3, [r3, #16]
 8000b8c:	09db      	lsrs	r3, r3, #7
 8000b8e:	2201      	movs	r2, #1
 8000b90:	4013      	ands	r3, r2
 8000b92:	d039      	beq.n	8000c08 <EXTI4_15_IRQHandler+0x1e0>
       // pressing # will increase counter sci since we have 3 options for it, if it is pressed repeatedly
    	enter = 1; //set equal to 1 for displaying result
 8000b94:	4b96      	ldr	r3, [pc, #600]	; (8000df0 <EXTI4_15_IRQHandler+0x3c8>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	601a      	str	r2, [r3, #0]

    	 A_pressed=0;
 8000b9a:	4b8d      	ldr	r3, [pc, #564]	; (8000dd0 <EXTI4_15_IRQHandler+0x3a8>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
    	 B_pressed=0;
 8000ba0:	4b8e      	ldr	r3, [pc, #568]	; (8000ddc <EXTI4_15_IRQHandler+0x3b4>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
    	 C_pressed=0;
 8000ba6:	4b90      	ldr	r3, [pc, #576]	; (8000de8 <EXTI4_15_IRQHandler+0x3c0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
    	 D_pressed=0;
 8000bac:	4b91      	ldr	r3, [pc, #580]	; (8000df4 <EXTI4_15_IRQHandler+0x3cc>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]

      GPIOC -> ODR ^= (1U<< 6);
 8000bb2:	4b91      	ldr	r3, [pc, #580]	; (8000df8 <EXTI4_15_IRQHandler+0x3d0>)
 8000bb4:	695a      	ldr	r2, [r3, #20]
 8000bb6:	4b90      	ldr	r3, [pc, #576]	; (8000df8 <EXTI4_15_IRQHandler+0x3d0>)
 8000bb8:	2140      	movs	r1, #64	; 0x40
 8000bba:	404a      	eors	r2, r1
 8000bbc:	615a      	str	r2, [r3, #20]
      TIM1 -> ARR = (freq[3]*1000+freq[2]*100+freq[1]*10+freq[0])*999;
 8000bbe:	4b89      	ldr	r3, [pc, #548]	; (8000de4 <EXTI4_15_IRQHandler+0x3bc>)
 8000bc0:	68da      	ldr	r2, [r3, #12]
 8000bc2:	0013      	movs	r3, r2
 8000bc4:	015b      	lsls	r3, r3, #5
 8000bc6:	1a9b      	subs	r3, r3, r2
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	189b      	adds	r3, r3, r2
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	0019      	movs	r1, r3
 8000bd0:	4b84      	ldr	r3, [pc, #528]	; (8000de4 <EXTI4_15_IRQHandler+0x3bc>)
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	2264      	movs	r2, #100	; 0x64
 8000bd6:	4353      	muls	r3, r2
 8000bd8:	18c9      	adds	r1, r1, r3
 8000bda:	4b82      	ldr	r3, [pc, #520]	; (8000de4 <EXTI4_15_IRQHandler+0x3bc>)
 8000bdc:	685a      	ldr	r2, [r3, #4]
 8000bde:	0013      	movs	r3, r2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	189b      	adds	r3, r3, r2
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	18ca      	adds	r2, r1, r3
 8000be8:	4b7e      	ldr	r3, [pc, #504]	; (8000de4 <EXTI4_15_IRQHandler+0x3bc>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	18d2      	adds	r2, r2, r3
 8000bee:	0013      	movs	r3, r2
 8000bf0:	00db      	lsls	r3, r3, #3
 8000bf2:	1a9b      	subs	r3, r3, r2
 8000bf4:	011b      	lsls	r3, r3, #4
 8000bf6:	1a9b      	subs	r3, r3, r2
 8000bf8:	00da      	lsls	r2, r3, #3
 8000bfa:	189a      	adds	r2, r3, r2
 8000bfc:	4b7f      	ldr	r3, [pc, #508]	; (8000dfc <EXTI4_15_IRQHandler+0x3d4>)
 8000bfe:	62da      	str	r2, [r3, #44]	; 0x2c
      toggle_pin(1, 15);
 8000c00:	210f      	movs	r1, #15
 8000c02:	2001      	movs	r0, #1
 8000c04:	f7ff fbbc 	bl	8000380 <toggle_pin>
    }

  }
  set_rows();
 8000c08:	f7ff fc2c 	bl	8000464 <set_rows>
  //check rows for column 4
  if ((EXTI -> RPR1 >> 8) & 1) {
 8000c0c:	4b6e      	ldr	r3, [pc, #440]	; (8000dc8 <EXTI4_15_IRQHandler+0x3a0>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	0a1b      	lsrs	r3, r3, #8
 8000c12:	2201      	movs	r2, #1
 8000c14:	4013      	ands	r3, r2
 8000c16:	d100      	bne.n	8000c1a <EXTI4_15_IRQHandler+0x1f2>
 8000c18:	e08b      	b.n	8000d32 <EXTI4_15_IRQHandler+0x30a>
    clear_rows();
 8000c1a:	f7ff fbfb 	bl	8000414 <clear_rows>
    // presses or i will not be increaosed here since they are for number presses
    // A key
    GPIOA -> ODR ^= (1U<< 10);
 8000c1e:	23a0      	movs	r3, #160	; 0xa0
 8000c20:	05db      	lsls	r3, r3, #23
 8000c22:	695a      	ldr	r2, [r3, #20]
 8000c24:	23a0      	movs	r3, #160	; 0xa0
 8000c26:	05db      	lsls	r3, r3, #23
 8000c28:	2180      	movs	r1, #128	; 0x80
 8000c2a:	00c9      	lsls	r1, r1, #3
 8000c2c:	404a      	eors	r2, r1
 8000c2e:	615a      	str	r2, [r3, #20]
    if ((GPIOB -> IDR >> 8) & 1) {
 8000c30:	4b66      	ldr	r3, [pc, #408]	; (8000dcc <EXTI4_15_IRQHandler+0x3a4>)
 8000c32:	691b      	ldr	r3, [r3, #16]
 8000c34:	0a1b      	lsrs	r3, r3, #8
 8000c36:	2201      	movs	r2, #1
 8000c38:	4013      	ands	r3, r2
 8000c3a:	d002      	beq.n	8000c42 <EXTI4_15_IRQHandler+0x21a>
      A_pressed=1;
 8000c3c:	4b64      	ldr	r3, [pc, #400]	; (8000dd0 <EXTI4_15_IRQHandler+0x3a8>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	601a      	str	r2, [r3, #0]
    }
    GPIOA -> ODR ^= (1U<< 10);
 8000c42:	23a0      	movs	r3, #160	; 0xa0
 8000c44:	05db      	lsls	r3, r3, #23
 8000c46:	695a      	ldr	r2, [r3, #20]
 8000c48:	23a0      	movs	r3, #160	; 0xa0
 8000c4a:	05db      	lsls	r3, r3, #23
 8000c4c:	2180      	movs	r1, #128	; 0x80
 8000c4e:	00c9      	lsls	r1, r1, #3
 8000c50:	404a      	eors	r2, r1
 8000c52:	615a      	str	r2, [r3, #20]
    // B key
    GPIOA -> ODR ^= (1U<< 9);
 8000c54:	23a0      	movs	r3, #160	; 0xa0
 8000c56:	05db      	lsls	r3, r3, #23
 8000c58:	695a      	ldr	r2, [r3, #20]
 8000c5a:	23a0      	movs	r3, #160	; 0xa0
 8000c5c:	05db      	lsls	r3, r3, #23
 8000c5e:	2180      	movs	r1, #128	; 0x80
 8000c60:	0089      	lsls	r1, r1, #2
 8000c62:	404a      	eors	r2, r1
 8000c64:	615a      	str	r2, [r3, #20]
    if ((GPIOB -> IDR >> 8) & 1) {
 8000c66:	4b59      	ldr	r3, [pc, #356]	; (8000dcc <EXTI4_15_IRQHandler+0x3a4>)
 8000c68:	691b      	ldr	r3, [r3, #16]
 8000c6a:	0a1b      	lsrs	r3, r3, #8
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	4013      	ands	r3, r2
 8000c70:	d015      	beq.n	8000c9e <EXTI4_15_IRQHandler+0x276>
      B_pressed=1;
 8000c72:	4b5a      	ldr	r3, [pc, #360]	; (8000ddc <EXTI4_15_IRQHandler+0x3b4>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	601a      	str	r2, [r3, #0]
      A_pressed = 0;
 8000c78:	4b55      	ldr	r3, [pc, #340]	; (8000dd0 <EXTI4_15_IRQHandler+0x3a8>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
      d1 = -1;
 8000c7e:	4b60      	ldr	r3, [pc, #384]	; (8000e00 <EXTI4_15_IRQHandler+0x3d8>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	4252      	negs	r2, r2
 8000c84:	601a      	str	r2, [r3, #0]
      d2 = -1;
 8000c86:	4b5f      	ldr	r3, [pc, #380]	; (8000e04 <EXTI4_15_IRQHandler+0x3dc>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	4252      	negs	r2, r2
 8000c8c:	601a      	str	r2, [r3, #0]
      d3 = -1;
 8000c8e:	4b5e      	ldr	r3, [pc, #376]	; (8000e08 <EXTI4_15_IRQHandler+0x3e0>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	4252      	negs	r2, r2
 8000c94:	601a      	str	r2, [r3, #0]
      d4 = -1;
 8000c96:	4b5d      	ldr	r3, [pc, #372]	; (8000e0c <EXTI4_15_IRQHandler+0x3e4>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	4252      	negs	r2, r2
 8000c9c:	601a      	str	r2, [r3, #0]
    }
    GPIOA -> ODR ^= (1U<< 9);
 8000c9e:	23a0      	movs	r3, #160	; 0xa0
 8000ca0:	05db      	lsls	r3, r3, #23
 8000ca2:	695a      	ldr	r2, [r3, #20]
 8000ca4:	23a0      	movs	r3, #160	; 0xa0
 8000ca6:	05db      	lsls	r3, r3, #23
 8000ca8:	2180      	movs	r1, #128	; 0x80
 8000caa:	0089      	lsls	r1, r1, #2
 8000cac:	404a      	eors	r2, r1
 8000cae:	615a      	str	r2, [r3, #20]
    // C key
    toggle_pin(2, 0);
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	2002      	movs	r0, #2
 8000cb4:	f7ff fb64 	bl	8000380 <toggle_pin>
    if ((GPIOB -> IDR >> 8) & 1) {
 8000cb8:	4b44      	ldr	r3, [pc, #272]	; (8000dcc <EXTI4_15_IRQHandler+0x3a4>)
 8000cba:	691b      	ldr	r3, [r3, #16]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	d018      	beq.n	8000cf6 <EXTI4_15_IRQHandler+0x2ce>
      C_pressed=1;
 8000cc4:	4b48      	ldr	r3, [pc, #288]	; (8000de8 <EXTI4_15_IRQHandler+0x3c0>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	601a      	str	r2, [r3, #0]
      A_pressed = 0;
 8000cca:	4b41      	ldr	r3, [pc, #260]	; (8000dd0 <EXTI4_15_IRQHandler+0x3a8>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
      B_pressed = 0;
 8000cd0:	4b42      	ldr	r3, [pc, #264]	; (8000ddc <EXTI4_15_IRQHandler+0x3b4>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
      d1 = -1;
 8000cd6:	4b4a      	ldr	r3, [pc, #296]	; (8000e00 <EXTI4_15_IRQHandler+0x3d8>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	4252      	negs	r2, r2
 8000cdc:	601a      	str	r2, [r3, #0]
      d2 = -1;
 8000cde:	4b49      	ldr	r3, [pc, #292]	; (8000e04 <EXTI4_15_IRQHandler+0x3dc>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	4252      	negs	r2, r2
 8000ce4:	601a      	str	r2, [r3, #0]
      d3 = -1;
 8000ce6:	4b48      	ldr	r3, [pc, #288]	; (8000e08 <EXTI4_15_IRQHandler+0x3e0>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	4252      	negs	r2, r2
 8000cec:	601a      	str	r2, [r3, #0]
      d4 = -1;
 8000cee:	4b47      	ldr	r3, [pc, #284]	; (8000e0c <EXTI4_15_IRQHandler+0x3e4>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	4252      	negs	r2, r2
 8000cf4:	601a      	str	r2, [r3, #0]
    }
    toggle_pin(2, 0);
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2002      	movs	r0, #2
 8000cfa:	f7ff fb41 	bl	8000380 <toggle_pin>
    // D key
    toggle_pin(1, 15);
 8000cfe:	210f      	movs	r1, #15
 8000d00:	2001      	movs	r0, #1
 8000d02:	f7ff fb3d 	bl	8000380 <toggle_pin>
    if ((GPIOB -> IDR >> 8) & 1) {
 8000d06:	4b31      	ldr	r3, [pc, #196]	; (8000dcc <EXTI4_15_IRQHandler+0x3a4>)
 8000d08:	691b      	ldr	r3, [r3, #16]
 8000d0a:	0a1b      	lsrs	r3, r3, #8
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	4013      	ands	r3, r2
 8000d10:	d00b      	beq.n	8000d2a <EXTI4_15_IRQHandler+0x302>
        C_pressed=0;
 8000d12:	4b35      	ldr	r3, [pc, #212]	; (8000de8 <EXTI4_15_IRQHandler+0x3c0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
        A_pressed = 0;
 8000d18:	4b2d      	ldr	r3, [pc, #180]	; (8000dd0 <EXTI4_15_IRQHandler+0x3a8>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
        B_pressed = 0;
 8000d1e:	4b2f      	ldr	r3, [pc, #188]	; (8000ddc <EXTI4_15_IRQHandler+0x3b4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
      D_pressed=1;
 8000d24:	4b33      	ldr	r3, [pc, #204]	; (8000df4 <EXTI4_15_IRQHandler+0x3cc>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	601a      	str	r2, [r3, #0]
    }
    toggle_pin(1,15);
 8000d2a:	210f      	movs	r1, #15
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f7ff fb27 	bl	8000380 <toggle_pin>
  }

  set_rows();
 8000d32:	f7ff fb97 	bl	8000464 <set_rows>



   if (D_pressed==1){
 8000d36:	4b2f      	ldr	r3, [pc, #188]	; (8000df4 <EXTI4_15_IRQHandler+0x3cc>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d000      	beq.n	8000d40 <EXTI4_15_IRQHandler+0x318>
 8000d3e:	e148      	b.n	8000fd2 <EXTI4_15_IRQHandler+0x5aa>

	   if(i==4){
 8000d40:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <EXTI4_15_IRQHandler+0x3ac>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b04      	cmp	r3, #4
 8000d46:	d10f      	bne.n	8000d68 <EXTI4_15_IRQHandler+0x340>
		   d1=amp[3];
 8000d48:	4b23      	ldr	r3, [pc, #140]	; (8000dd8 <EXTI4_15_IRQHandler+0x3b0>)
 8000d4a:	68da      	ldr	r2, [r3, #12]
 8000d4c:	4b2c      	ldr	r3, [pc, #176]	; (8000e00 <EXTI4_15_IRQHandler+0x3d8>)
 8000d4e:	601a      	str	r2, [r3, #0]
		   d2=amp[2];
 8000d50:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <EXTI4_15_IRQHandler+0x3b0>)
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	4b2b      	ldr	r3, [pc, #172]	; (8000e04 <EXTI4_15_IRQHandler+0x3dc>)
 8000d56:	601a      	str	r2, [r3, #0]
		   d3=amp[1];
 8000d58:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <EXTI4_15_IRQHandler+0x3b0>)
 8000d5a:	685a      	ldr	r2, [r3, #4]
 8000d5c:	4b2a      	ldr	r3, [pc, #168]	; (8000e08 <EXTI4_15_IRQHandler+0x3e0>)
 8000d5e:	601a      	str	r2, [r3, #0]
		   d4=amp[0];
 8000d60:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <EXTI4_15_IRQHandler+0x3b0>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b29      	ldr	r3, [pc, #164]	; (8000e0c <EXTI4_15_IRQHandler+0x3e4>)
 8000d66:	601a      	str	r2, [r3, #0]
	   }
	   if(i==3){
 8000d68:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <EXTI4_15_IRQHandler+0x3ac>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b03      	cmp	r3, #3
 8000d6e:	d10f      	bne.n	8000d90 <EXTI4_15_IRQHandler+0x368>
		   d1=amp[3];
 8000d70:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <EXTI4_15_IRQHandler+0x3b0>)
 8000d72:	68da      	ldr	r2, [r3, #12]
 8000d74:	4b22      	ldr	r3, [pc, #136]	; (8000e00 <EXTI4_15_IRQHandler+0x3d8>)
 8000d76:	601a      	str	r2, [r3, #0]
		   d2=amp[2];
 8000d78:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <EXTI4_15_IRQHandler+0x3b0>)
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <EXTI4_15_IRQHandler+0x3dc>)
 8000d7e:	601a      	str	r2, [r3, #0]
		   d3=amp[1];
 8000d80:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <EXTI4_15_IRQHandler+0x3b0>)
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	4b20      	ldr	r3, [pc, #128]	; (8000e08 <EXTI4_15_IRQHandler+0x3e0>)
 8000d86:	601a      	str	r2, [r3, #0]
		   d4=amp[0];
 8000d88:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <EXTI4_15_IRQHandler+0x3b0>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b1f      	ldr	r3, [pc, #124]	; (8000e0c <EXTI4_15_IRQHandler+0x3e4>)
 8000d8e:	601a      	str	r2, [r3, #0]
	   	   }
	   if(i==2){
 8000d90:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <EXTI4_15_IRQHandler+0x3ac>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d10f      	bne.n	8000db8 <EXTI4_15_IRQHandler+0x390>
		   d1=amp[3];
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <EXTI4_15_IRQHandler+0x3b0>)
 8000d9a:	68da      	ldr	r2, [r3, #12]
 8000d9c:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <EXTI4_15_IRQHandler+0x3d8>)
 8000d9e:	601a      	str	r2, [r3, #0]
		   		   d2=amp[2];
 8000da0:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <EXTI4_15_IRQHandler+0x3b0>)
 8000da2:	689a      	ldr	r2, [r3, #8]
 8000da4:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <EXTI4_15_IRQHandler+0x3dc>)
 8000da6:	601a      	str	r2, [r3, #0]
		   		   d3=amp[1];
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <EXTI4_15_IRQHandler+0x3b0>)
 8000daa:	685a      	ldr	r2, [r3, #4]
 8000dac:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <EXTI4_15_IRQHandler+0x3e0>)
 8000dae:	601a      	str	r2, [r3, #0]
		   		   d4=amp[0];
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <EXTI4_15_IRQHandler+0x3b0>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <EXTI4_15_IRQHandler+0x3e4>)
 8000db6:	601a      	str	r2, [r3, #0]
		  }
	   if(i==1){
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <EXTI4_15_IRQHandler+0x3ac>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d137      	bne.n	8000e30 <EXTI4_15_IRQHandler+0x408>
 8000dc0:	e026      	b.n	8000e10 <EXTI4_15_IRQHandler+0x3e8>
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	2000007c 	.word	0x2000007c
 8000dc8:	40021800 	.word	0x40021800
 8000dcc:	50000400 	.word	0x50000400
 8000dd0:	20000080 	.word	0x20000080
 8000dd4:	20000034 	.word	0x20000034
 8000dd8:	20000064 	.word	0x20000064
 8000ddc:	2000008c 	.word	0x2000008c
 8000de0:	20000038 	.word	0x20000038
 8000de4:	20000054 	.word	0x20000054
 8000de8:	200000ac 	.word	0x200000ac
 8000dec:	20000000 	.word	0x20000000
 8000df0:	200000b0 	.word	0x200000b0
 8000df4:	20000088 	.word	0x20000088
 8000df8:	50000800 	.word	0x50000800
 8000dfc:	40012c00 	.word	0x40012c00
 8000e00:	20000004 	.word	0x20000004
 8000e04:	20000008 	.word	0x20000008
 8000e08:	2000000c 	.word	0x2000000c
 8000e0c:	20000010 	.word	0x20000010
		   d1=amp[3];
 8000e10:	4bca      	ldr	r3, [pc, #808]	; (800113c <EXTI4_15_IRQHandler+0x714>)
 8000e12:	68da      	ldr	r2, [r3, #12]
 8000e14:	4bca      	ldr	r3, [pc, #808]	; (8001140 <EXTI4_15_IRQHandler+0x718>)
 8000e16:	601a      	str	r2, [r3, #0]
		   d2=amp[2];
 8000e18:	4bc8      	ldr	r3, [pc, #800]	; (800113c <EXTI4_15_IRQHandler+0x714>)
 8000e1a:	689a      	ldr	r2, [r3, #8]
 8000e1c:	4bc9      	ldr	r3, [pc, #804]	; (8001144 <EXTI4_15_IRQHandler+0x71c>)
 8000e1e:	601a      	str	r2, [r3, #0]
		   d3=amp[1];
 8000e20:	4bc6      	ldr	r3, [pc, #792]	; (800113c <EXTI4_15_IRQHandler+0x714>)
 8000e22:	685a      	ldr	r2, [r3, #4]
 8000e24:	4bc8      	ldr	r3, [pc, #800]	; (8001148 <EXTI4_15_IRQHandler+0x720>)
 8000e26:	601a      	str	r2, [r3, #0]
		   d4=amp[0];
 8000e28:	4bc4      	ldr	r3, [pc, #784]	; (800113c <EXTI4_15_IRQHandler+0x714>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4bc7      	ldr	r3, [pc, #796]	; (800114c <EXTI4_15_IRQHandler+0x724>)
 8000e2e:	601a      	str	r2, [r3, #0]
	   		  }
	   for(a=0;a<3200;a++){
 8000e30:	4bc7      	ldr	r3, [pc, #796]	; (8001150 <EXTI4_15_IRQHandler+0x728>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	e00e      	b.n	8000e56 <EXTI4_15_IRQHandler+0x42e>
	   find_digit(d4, d3, d2, d1);}
 8000e38:	4bc4      	ldr	r3, [pc, #784]	; (800114c <EXTI4_15_IRQHandler+0x724>)
 8000e3a:	6818      	ldr	r0, [r3, #0]
 8000e3c:	4bc2      	ldr	r3, [pc, #776]	; (8001148 <EXTI4_15_IRQHandler+0x720>)
 8000e3e:	6819      	ldr	r1, [r3, #0]
 8000e40:	4bc0      	ldr	r3, [pc, #768]	; (8001144 <EXTI4_15_IRQHandler+0x71c>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4bbe      	ldr	r3, [pc, #760]	; (8001140 <EXTI4_15_IRQHandler+0x718>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f000 fc7a 	bl	8001740 <find_digit>
	   for(a=0;a<3200;a++){
 8000e4c:	4bc0      	ldr	r3, [pc, #768]	; (8001150 <EXTI4_15_IRQHandler+0x728>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	1c5a      	adds	r2, r3, #1
 8000e52:	4bbf      	ldr	r3, [pc, #764]	; (8001150 <EXTI4_15_IRQHandler+0x728>)
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	4bbe      	ldr	r3, [pc, #760]	; (8001150 <EXTI4_15_IRQHandler+0x728>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	23c8      	movs	r3, #200	; 0xc8
 8000e5c:	011b      	lsls	r3, r3, #4
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	dbea      	blt.n	8000e38 <EXTI4_15_IRQHandler+0x410>

	   if(i==4){
 8000e62:	4bbc      	ldr	r3, [pc, #752]	; (8001154 <EXTI4_15_IRQHandler+0x72c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	d10f      	bne.n	8000e8a <EXTI4_15_IRQHandler+0x462>
	   		   d1=freq[3];
 8000e6a:	4bbb      	ldr	r3, [pc, #748]	; (8001158 <EXTI4_15_IRQHandler+0x730>)
 8000e6c:	68da      	ldr	r2, [r3, #12]
 8000e6e:	4bb4      	ldr	r3, [pc, #720]	; (8001140 <EXTI4_15_IRQHandler+0x718>)
 8000e70:	601a      	str	r2, [r3, #0]
	   		   d2=freq[2];
 8000e72:	4bb9      	ldr	r3, [pc, #740]	; (8001158 <EXTI4_15_IRQHandler+0x730>)
 8000e74:	689a      	ldr	r2, [r3, #8]
 8000e76:	4bb3      	ldr	r3, [pc, #716]	; (8001144 <EXTI4_15_IRQHandler+0x71c>)
 8000e78:	601a      	str	r2, [r3, #0]
	   		   d3=freq[1];
 8000e7a:	4bb7      	ldr	r3, [pc, #732]	; (8001158 <EXTI4_15_IRQHandler+0x730>)
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	4bb2      	ldr	r3, [pc, #712]	; (8001148 <EXTI4_15_IRQHandler+0x720>)
 8000e80:	601a      	str	r2, [r3, #0]
	   		   d4=freq[0];
 8000e82:	4bb5      	ldr	r3, [pc, #724]	; (8001158 <EXTI4_15_IRQHandler+0x730>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4bb1      	ldr	r3, [pc, #708]	; (800114c <EXTI4_15_IRQHandler+0x724>)
 8000e88:	601a      	str	r2, [r3, #0]
	   	   }
	   	   if(i==3){
 8000e8a:	4bb2      	ldr	r3, [pc, #712]	; (8001154 <EXTI4_15_IRQHandler+0x72c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b03      	cmp	r3, #3
 8000e90:	d10f      	bne.n	8000eb2 <EXTI4_15_IRQHandler+0x48a>
	   		   d1=freq[3];
 8000e92:	4bb1      	ldr	r3, [pc, #708]	; (8001158 <EXTI4_15_IRQHandler+0x730>)
 8000e94:	68da      	ldr	r2, [r3, #12]
 8000e96:	4baa      	ldr	r3, [pc, #680]	; (8001140 <EXTI4_15_IRQHandler+0x718>)
 8000e98:	601a      	str	r2, [r3, #0]
	   		   d2=freq[2];
 8000e9a:	4baf      	ldr	r3, [pc, #700]	; (8001158 <EXTI4_15_IRQHandler+0x730>)
 8000e9c:	689a      	ldr	r2, [r3, #8]
 8000e9e:	4ba9      	ldr	r3, [pc, #676]	; (8001144 <EXTI4_15_IRQHandler+0x71c>)
 8000ea0:	601a      	str	r2, [r3, #0]
	   		   d3=freq[1];
 8000ea2:	4bad      	ldr	r3, [pc, #692]	; (8001158 <EXTI4_15_IRQHandler+0x730>)
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	4ba8      	ldr	r3, [pc, #672]	; (8001148 <EXTI4_15_IRQHandler+0x720>)
 8000ea8:	601a      	str	r2, [r3, #0]
	   		   d4=freq[0];
 8000eaa:	4bab      	ldr	r3, [pc, #684]	; (8001158 <EXTI4_15_IRQHandler+0x730>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	4ba7      	ldr	r3, [pc, #668]	; (800114c <EXTI4_15_IRQHandler+0x724>)
 8000eb0:	601a      	str	r2, [r3, #0]
	   	   	   }
	   	   if(i==2){
 8000eb2:	4ba8      	ldr	r3, [pc, #672]	; (8001154 <EXTI4_15_IRQHandler+0x72c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d10f      	bne.n	8000eda <EXTI4_15_IRQHandler+0x4b2>
	   		   d1=freq[3];
 8000eba:	4ba7      	ldr	r3, [pc, #668]	; (8001158 <EXTI4_15_IRQHandler+0x730>)
 8000ebc:	68da      	ldr	r2, [r3, #12]
 8000ebe:	4ba0      	ldr	r3, [pc, #640]	; (8001140 <EXTI4_15_IRQHandler+0x718>)
 8000ec0:	601a      	str	r2, [r3, #0]
	   		   d2=freq[2];
 8000ec2:	4ba5      	ldr	r3, [pc, #660]	; (8001158 <EXTI4_15_IRQHandler+0x730>)
 8000ec4:	689a      	ldr	r2, [r3, #8]
 8000ec6:	4b9f      	ldr	r3, [pc, #636]	; (8001144 <EXTI4_15_IRQHandler+0x71c>)
 8000ec8:	601a      	str	r2, [r3, #0]
	   		   d3=freq[1];
 8000eca:	4ba3      	ldr	r3, [pc, #652]	; (8001158 <EXTI4_15_IRQHandler+0x730>)
 8000ecc:	685a      	ldr	r2, [r3, #4]
 8000ece:	4b9e      	ldr	r3, [pc, #632]	; (8001148 <EXTI4_15_IRQHandler+0x720>)
 8000ed0:	601a      	str	r2, [r3, #0]
	   		   d4=freq[0];
 8000ed2:	4ba1      	ldr	r3, [pc, #644]	; (8001158 <EXTI4_15_IRQHandler+0x730>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	4b9d      	ldr	r3, [pc, #628]	; (800114c <EXTI4_15_IRQHandler+0x724>)
 8000ed8:	601a      	str	r2, [r3, #0]
	   		  }
	   	   if(i==1){
 8000eda:	4b9e      	ldr	r3, [pc, #632]	; (8001154 <EXTI4_15_IRQHandler+0x72c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d10f      	bne.n	8000f02 <EXTI4_15_IRQHandler+0x4da>
	   		   d1=freq[3];
 8000ee2:	4b9d      	ldr	r3, [pc, #628]	; (8001158 <EXTI4_15_IRQHandler+0x730>)
 8000ee4:	68da      	ldr	r2, [r3, #12]
 8000ee6:	4b96      	ldr	r3, [pc, #600]	; (8001140 <EXTI4_15_IRQHandler+0x718>)
 8000ee8:	601a      	str	r2, [r3, #0]
	   		   d2=freq[2];
 8000eea:	4b9b      	ldr	r3, [pc, #620]	; (8001158 <EXTI4_15_IRQHandler+0x730>)
 8000eec:	689a      	ldr	r2, [r3, #8]
 8000eee:	4b95      	ldr	r3, [pc, #596]	; (8001144 <EXTI4_15_IRQHandler+0x71c>)
 8000ef0:	601a      	str	r2, [r3, #0]
	   		   d3=freq[1];
 8000ef2:	4b99      	ldr	r3, [pc, #612]	; (8001158 <EXTI4_15_IRQHandler+0x730>)
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	4b94      	ldr	r3, [pc, #592]	; (8001148 <EXTI4_15_IRQHandler+0x720>)
 8000ef8:	601a      	str	r2, [r3, #0]
	   		   d4=freq[0];
 8000efa:	4b97      	ldr	r3, [pc, #604]	; (8001158 <EXTI4_15_IRQHandler+0x730>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	4b93      	ldr	r3, [pc, #588]	; (800114c <EXTI4_15_IRQHandler+0x724>)
 8000f00:	601a      	str	r2, [r3, #0]


	   	   		  }

		   for(a=0;a<3200;a++){		//5 seconds timer
 8000f02:	4b93      	ldr	r3, [pc, #588]	; (8001150 <EXTI4_15_IRQHandler+0x728>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	e00e      	b.n	8000f28 <EXTI4_15_IRQHandler+0x500>
	   	   find_digit(d4, d3, d2, d1);}
 8000f0a:	4b90      	ldr	r3, [pc, #576]	; (800114c <EXTI4_15_IRQHandler+0x724>)
 8000f0c:	6818      	ldr	r0, [r3, #0]
 8000f0e:	4b8e      	ldr	r3, [pc, #568]	; (8001148 <EXTI4_15_IRQHandler+0x720>)
 8000f10:	6819      	ldr	r1, [r3, #0]
 8000f12:	4b8c      	ldr	r3, [pc, #560]	; (8001144 <EXTI4_15_IRQHandler+0x71c>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	4b8a      	ldr	r3, [pc, #552]	; (8001140 <EXTI4_15_IRQHandler+0x718>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f000 fc11 	bl	8001740 <find_digit>
		   for(a=0;a<3200;a++){		//5 seconds timer
 8000f1e:	4b8c      	ldr	r3, [pc, #560]	; (8001150 <EXTI4_15_IRQHandler+0x728>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	1c5a      	adds	r2, r3, #1
 8000f24:	4b8a      	ldr	r3, [pc, #552]	; (8001150 <EXTI4_15_IRQHandler+0x728>)
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	4b89      	ldr	r3, [pc, #548]	; (8001150 <EXTI4_15_IRQHandler+0x728>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	23c8      	movs	r3, #200	; 0xc8
 8000f2e:	011b      	lsls	r3, r3, #4
 8000f30:	429a      	cmp	r2, r3
 8000f32:	dbea      	blt.n	8000f0a <EXTI4_15_IRQHandler+0x4e2>

		   for(a=0;a<3200;a++){
 8000f34:	4b86      	ldr	r3, [pc, #536]	; (8001150 <EXTI4_15_IRQHandler+0x728>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	e044      	b.n	8000fc6 <EXTI4_15_IRQHandler+0x59e>
	   	   display_mode(mode);		//C values(modes)
 8000f3c:	4b87      	ldr	r3, [pc, #540]	; (800115c <EXTI4_15_IRQHandler+0x734>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	0018      	movs	r0, r3
 8000f42:	f000 fdb7 	bl	8001ab4 <display_mode>

		   i = 0; j = 0; A_pressed = 0; B_pressed = 0; C_pressed = 0; D_pressed = 0;
 8000f46:	4b83      	ldr	r3, [pc, #524]	; (8001154 <EXTI4_15_IRQHandler+0x72c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	4b84      	ldr	r3, [pc, #528]	; (8001160 <EXTI4_15_IRQHandler+0x738>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	4b84      	ldr	r3, [pc, #528]	; (8001164 <EXTI4_15_IRQHandler+0x73c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	4b83      	ldr	r3, [pc, #524]	; (8001168 <EXTI4_15_IRQHandler+0x740>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	4b83      	ldr	r3, [pc, #524]	; (800116c <EXTI4_15_IRQHandler+0x744>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	4b82      	ldr	r3, [pc, #520]	; (8001170 <EXTI4_15_IRQHandler+0x748>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
		   d1 = -1;
 8000f6a:	4b75      	ldr	r3, [pc, #468]	; (8001140 <EXTI4_15_IRQHandler+0x718>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4252      	negs	r2, r2
 8000f70:	601a      	str	r2, [r3, #0]
		   d2 = -1;
 8000f72:	4b74      	ldr	r3, [pc, #464]	; (8001144 <EXTI4_15_IRQHandler+0x71c>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	4252      	negs	r2, r2
 8000f78:	601a      	str	r2, [r3, #0]
		   d3 = -1;
 8000f7a:	4b73      	ldr	r3, [pc, #460]	; (8001148 <EXTI4_15_IRQHandler+0x720>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	4252      	negs	r2, r2
 8000f80:	601a      	str	r2, [r3, #0]
		   d4 = -1;
 8000f82:	4b72      	ldr	r3, [pc, #456]	; (800114c <EXTI4_15_IRQHandler+0x724>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	4252      	negs	r2, r2
 8000f88:	601a      	str	r2, [r3, #0]
	for(b=0;b<4;b++)
 8000f8a:	4b7a      	ldr	r3, [pc, #488]	; (8001174 <EXTI4_15_IRQHandler+0x74c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	e010      	b.n	8000fb4 <EXTI4_15_IRQHandler+0x58c>
		         {amp[b]=0; freq[b]=0;}
 8000f92:	4b78      	ldr	r3, [pc, #480]	; (8001174 <EXTI4_15_IRQHandler+0x74c>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	4b69      	ldr	r3, [pc, #420]	; (800113c <EXTI4_15_IRQHandler+0x714>)
 8000f98:	0092      	lsls	r2, r2, #2
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	50d1      	str	r1, [r2, r3]
 8000f9e:	4b75      	ldr	r3, [pc, #468]	; (8001174 <EXTI4_15_IRQHandler+0x74c>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	4b6d      	ldr	r3, [pc, #436]	; (8001158 <EXTI4_15_IRQHandler+0x730>)
 8000fa4:	0092      	lsls	r2, r2, #2
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	50d1      	str	r1, [r2, r3]
	for(b=0;b<4;b++)
 8000faa:	4b72      	ldr	r3, [pc, #456]	; (8001174 <EXTI4_15_IRQHandler+0x74c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	1c5a      	adds	r2, r3, #1
 8000fb0:	4b70      	ldr	r3, [pc, #448]	; (8001174 <EXTI4_15_IRQHandler+0x74c>)
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	4b6f      	ldr	r3, [pc, #444]	; (8001174 <EXTI4_15_IRQHandler+0x74c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b03      	cmp	r3, #3
 8000fba:	ddea      	ble.n	8000f92 <EXTI4_15_IRQHandler+0x56a>
		   for(a=0;a<3200;a++){
 8000fbc:	4b64      	ldr	r3, [pc, #400]	; (8001150 <EXTI4_15_IRQHandler+0x728>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	1c5a      	adds	r2, r3, #1
 8000fc2:	4b63      	ldr	r3, [pc, #396]	; (8001150 <EXTI4_15_IRQHandler+0x728>)
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	4b62      	ldr	r3, [pc, #392]	; (8001150 <EXTI4_15_IRQHandler+0x728>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	23c8      	movs	r3, #200	; 0xc8
 8000fcc:	011b      	lsls	r3, r3, #4
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	dbb4      	blt.n	8000f3c <EXTI4_15_IRQHandler+0x514>



   }

if(A_pressed == 1 && B_pressed != 1){
 8000fd2:	4b64      	ldr	r3, [pc, #400]	; (8001164 <EXTI4_15_IRQHandler+0x73c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d153      	bne.n	8001082 <EXTI4_15_IRQHandler+0x65a>
 8000fda:	4b63      	ldr	r3, [pc, #396]	; (8001168 <EXTI4_15_IRQHandler+0x740>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d04f      	beq.n	8001082 <EXTI4_15_IRQHandler+0x65a>
   if(i==4){
 8000fe2:	4b5c      	ldr	r3, [pc, #368]	; (8001154 <EXTI4_15_IRQHandler+0x72c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	d10f      	bne.n	800100a <EXTI4_15_IRQHandler+0x5e2>
   		   d1=amp[3];
 8000fea:	4b54      	ldr	r3, [pc, #336]	; (800113c <EXTI4_15_IRQHandler+0x714>)
 8000fec:	68da      	ldr	r2, [r3, #12]
 8000fee:	4b54      	ldr	r3, [pc, #336]	; (8001140 <EXTI4_15_IRQHandler+0x718>)
 8000ff0:	601a      	str	r2, [r3, #0]
   		   d2=amp[2];
 8000ff2:	4b52      	ldr	r3, [pc, #328]	; (800113c <EXTI4_15_IRQHandler+0x714>)
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	4b53      	ldr	r3, [pc, #332]	; (8001144 <EXTI4_15_IRQHandler+0x71c>)
 8000ff8:	601a      	str	r2, [r3, #0]
   		   d3=amp[1];
 8000ffa:	4b50      	ldr	r3, [pc, #320]	; (800113c <EXTI4_15_IRQHandler+0x714>)
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	4b52      	ldr	r3, [pc, #328]	; (8001148 <EXTI4_15_IRQHandler+0x720>)
 8001000:	601a      	str	r2, [r3, #0]
   		   d4=amp[0];
 8001002:	4b4e      	ldr	r3, [pc, #312]	; (800113c <EXTI4_15_IRQHandler+0x714>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	4b51      	ldr	r3, [pc, #324]	; (800114c <EXTI4_15_IRQHandler+0x724>)
 8001008:	601a      	str	r2, [r3, #0]
   	   }
   	   if(i==3){
 800100a:	4b52      	ldr	r3, [pc, #328]	; (8001154 <EXTI4_15_IRQHandler+0x72c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b03      	cmp	r3, #3
 8001010:	d10f      	bne.n	8001032 <EXTI4_15_IRQHandler+0x60a>
   		   d1=-1;
 8001012:	4b4b      	ldr	r3, [pc, #300]	; (8001140 <EXTI4_15_IRQHandler+0x718>)
 8001014:	2201      	movs	r2, #1
 8001016:	4252      	negs	r2, r2
 8001018:	601a      	str	r2, [r3, #0]
   		   d2=amp[2];
 800101a:	4b48      	ldr	r3, [pc, #288]	; (800113c <EXTI4_15_IRQHandler+0x714>)
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	4b49      	ldr	r3, [pc, #292]	; (8001144 <EXTI4_15_IRQHandler+0x71c>)
 8001020:	601a      	str	r2, [r3, #0]
   		   d3=amp[1];
 8001022:	4b46      	ldr	r3, [pc, #280]	; (800113c <EXTI4_15_IRQHandler+0x714>)
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	4b48      	ldr	r3, [pc, #288]	; (8001148 <EXTI4_15_IRQHandler+0x720>)
 8001028:	601a      	str	r2, [r3, #0]
   		   d4=amp[0];
 800102a:	4b44      	ldr	r3, [pc, #272]	; (800113c <EXTI4_15_IRQHandler+0x714>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	4b47      	ldr	r3, [pc, #284]	; (800114c <EXTI4_15_IRQHandler+0x724>)
 8001030:	601a      	str	r2, [r3, #0]
   	   	   }
   	   if(i==2){
 8001032:	4b48      	ldr	r3, [pc, #288]	; (8001154 <EXTI4_15_IRQHandler+0x72c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b02      	cmp	r3, #2
 8001038:	d10f      	bne.n	800105a <EXTI4_15_IRQHandler+0x632>
   		   d1=-1;
 800103a:	4b41      	ldr	r3, [pc, #260]	; (8001140 <EXTI4_15_IRQHandler+0x718>)
 800103c:	2201      	movs	r2, #1
 800103e:	4252      	negs	r2, r2
 8001040:	601a      	str	r2, [r3, #0]
   		   		   d2=-1;
 8001042:	4b40      	ldr	r3, [pc, #256]	; (8001144 <EXTI4_15_IRQHandler+0x71c>)
 8001044:	2201      	movs	r2, #1
 8001046:	4252      	negs	r2, r2
 8001048:	601a      	str	r2, [r3, #0]
   		   		   d3=amp[1];
 800104a:	4b3c      	ldr	r3, [pc, #240]	; (800113c <EXTI4_15_IRQHandler+0x714>)
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	4b3e      	ldr	r3, [pc, #248]	; (8001148 <EXTI4_15_IRQHandler+0x720>)
 8001050:	601a      	str	r2, [r3, #0]
   		   		   d4=amp[0];
 8001052:	4b3a      	ldr	r3, [pc, #232]	; (800113c <EXTI4_15_IRQHandler+0x714>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	4b3d      	ldr	r3, [pc, #244]	; (800114c <EXTI4_15_IRQHandler+0x724>)
 8001058:	601a      	str	r2, [r3, #0]
   		  }
   	   if(i==1){
 800105a:	4b3e      	ldr	r3, [pc, #248]	; (8001154 <EXTI4_15_IRQHandler+0x72c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d10f      	bne.n	8001082 <EXTI4_15_IRQHandler+0x65a>
   		   d1=-1;
 8001062:	4b37      	ldr	r3, [pc, #220]	; (8001140 <EXTI4_15_IRQHandler+0x718>)
 8001064:	2201      	movs	r2, #1
 8001066:	4252      	negs	r2, r2
 8001068:	601a      	str	r2, [r3, #0]
   		   d2=-1;
 800106a:	4b36      	ldr	r3, [pc, #216]	; (8001144 <EXTI4_15_IRQHandler+0x71c>)
 800106c:	2201      	movs	r2, #1
 800106e:	4252      	negs	r2, r2
 8001070:	601a      	str	r2, [r3, #0]
   		   d3=-1;
 8001072:	4b35      	ldr	r3, [pc, #212]	; (8001148 <EXTI4_15_IRQHandler+0x720>)
 8001074:	2201      	movs	r2, #1
 8001076:	4252      	negs	r2, r2
 8001078:	601a      	str	r2, [r3, #0]
   		   d4=amp[0];
 800107a:	4b30      	ldr	r3, [pc, #192]	; (800113c <EXTI4_15_IRQHandler+0x714>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	4b33      	ldr	r3, [pc, #204]	; (800114c <EXTI4_15_IRQHandler+0x724>)
 8001080:	601a      	str	r2, [r3, #0]
   	   		  }
}


if(A_pressed != 1 && B_pressed == 1){	//freq
 8001082:	4b38      	ldr	r3, [pc, #224]	; (8001164 <EXTI4_15_IRQHandler+0x73c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d053      	beq.n	8001132 <EXTI4_15_IRQHandler+0x70a>
 800108a:	4b37      	ldr	r3, [pc, #220]	; (8001168 <EXTI4_15_IRQHandler+0x740>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d14f      	bne.n	8001132 <EXTI4_15_IRQHandler+0x70a>
if(j==4){
 8001092:	4b33      	ldr	r3, [pc, #204]	; (8001160 <EXTI4_15_IRQHandler+0x738>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2b04      	cmp	r3, #4
 8001098:	d10f      	bne.n	80010ba <EXTI4_15_IRQHandler+0x692>
		   d1=freq[3];
 800109a:	4b2f      	ldr	r3, [pc, #188]	; (8001158 <EXTI4_15_IRQHandler+0x730>)
 800109c:	68da      	ldr	r2, [r3, #12]
 800109e:	4b28      	ldr	r3, [pc, #160]	; (8001140 <EXTI4_15_IRQHandler+0x718>)
 80010a0:	601a      	str	r2, [r3, #0]
		   d2=freq[2];
 80010a2:	4b2d      	ldr	r3, [pc, #180]	; (8001158 <EXTI4_15_IRQHandler+0x730>)
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	4b27      	ldr	r3, [pc, #156]	; (8001144 <EXTI4_15_IRQHandler+0x71c>)
 80010a8:	601a      	str	r2, [r3, #0]
		   d3=freq[1];
 80010aa:	4b2b      	ldr	r3, [pc, #172]	; (8001158 <EXTI4_15_IRQHandler+0x730>)
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	4b26      	ldr	r3, [pc, #152]	; (8001148 <EXTI4_15_IRQHandler+0x720>)
 80010b0:	601a      	str	r2, [r3, #0]
		   d4=freq[0];
 80010b2:	4b29      	ldr	r3, [pc, #164]	; (8001158 <EXTI4_15_IRQHandler+0x730>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	4b25      	ldr	r3, [pc, #148]	; (800114c <EXTI4_15_IRQHandler+0x724>)
 80010b8:	601a      	str	r2, [r3, #0]
	   }
	   if(j==3){
 80010ba:	4b29      	ldr	r3, [pc, #164]	; (8001160 <EXTI4_15_IRQHandler+0x738>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b03      	cmp	r3, #3
 80010c0:	d10f      	bne.n	80010e2 <EXTI4_15_IRQHandler+0x6ba>
		   d1=-1;
 80010c2:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <EXTI4_15_IRQHandler+0x718>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	4252      	negs	r2, r2
 80010c8:	601a      	str	r2, [r3, #0]
		   d2=freq[2];
 80010ca:	4b23      	ldr	r3, [pc, #140]	; (8001158 <EXTI4_15_IRQHandler+0x730>)
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <EXTI4_15_IRQHandler+0x71c>)
 80010d0:	601a      	str	r2, [r3, #0]
		   d3=freq[1];
 80010d2:	4b21      	ldr	r3, [pc, #132]	; (8001158 <EXTI4_15_IRQHandler+0x730>)
 80010d4:	685a      	ldr	r2, [r3, #4]
 80010d6:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <EXTI4_15_IRQHandler+0x720>)
 80010d8:	601a      	str	r2, [r3, #0]
		   d4=freq[0];
 80010da:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <EXTI4_15_IRQHandler+0x730>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	4b1b      	ldr	r3, [pc, #108]	; (800114c <EXTI4_15_IRQHandler+0x724>)
 80010e0:	601a      	str	r2, [r3, #0]
	   	   }
	   if(j==2){
 80010e2:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <EXTI4_15_IRQHandler+0x738>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d10f      	bne.n	800110a <EXTI4_15_IRQHandler+0x6e2>
		   d1=-1;
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <EXTI4_15_IRQHandler+0x718>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	4252      	negs	r2, r2
 80010f0:	601a      	str	r2, [r3, #0]
		   		   d2=-1;
 80010f2:	4b14      	ldr	r3, [pc, #80]	; (8001144 <EXTI4_15_IRQHandler+0x71c>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	4252      	negs	r2, r2
 80010f8:	601a      	str	r2, [r3, #0]
		   		   d3=freq[1];
 80010fa:	4b17      	ldr	r3, [pc, #92]	; (8001158 <EXTI4_15_IRQHandler+0x730>)
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <EXTI4_15_IRQHandler+0x720>)
 8001100:	601a      	str	r2, [r3, #0]
		   		   d4=freq[0];
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <EXTI4_15_IRQHandler+0x730>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <EXTI4_15_IRQHandler+0x724>)
 8001108:	601a      	str	r2, [r3, #0]
		  }
	   if(j==1){
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <EXTI4_15_IRQHandler+0x738>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d10f      	bne.n	8001132 <EXTI4_15_IRQHandler+0x70a>
		   d1=-1;
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <EXTI4_15_IRQHandler+0x718>)
 8001114:	2201      	movs	r2, #1
 8001116:	4252      	negs	r2, r2
 8001118:	601a      	str	r2, [r3, #0]
		   d2=-1;
 800111a:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <EXTI4_15_IRQHandler+0x71c>)
 800111c:	2201      	movs	r2, #1
 800111e:	4252      	negs	r2, r2
 8001120:	601a      	str	r2, [r3, #0]
		   d3=-1;
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <EXTI4_15_IRQHandler+0x720>)
 8001124:	2201      	movs	r2, #1
 8001126:	4252      	negs	r2, r2
 8001128:	601a      	str	r2, [r3, #0]
		   d4=freq[0];
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <EXTI4_15_IRQHandler+0x730>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <EXTI4_15_IRQHandler+0x724>)
 8001130:	601a      	str	r2, [r3, #0]
	   		  }
}

if(C_pressed == 1){
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <EXTI4_15_IRQHandler+0x744>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d13d      	bne.n	80011b6 <EXTI4_15_IRQHandler+0x78e>
	while(!( (EXTI ->  RPR1 >> 1) & 1 || (EXTI -> RPR1 >> 0) & 1 || ( (EXTI ->  RPR1 >> 7) & 1))){
 800113a:	e026      	b.n	800118a <EXTI4_15_IRQHandler+0x762>
 800113c:	20000064 	.word	0x20000064
 8001140:	20000004 	.word	0x20000004
 8001144:	20000008 	.word	0x20000008
 8001148:	2000000c 	.word	0x2000000c
 800114c:	20000010 	.word	0x20000010
 8001150:	200000a0 	.word	0x200000a0
 8001154:	20000034 	.word	0x20000034
 8001158:	20000054 	.word	0x20000054
 800115c:	20000000 	.word	0x20000000
 8001160:	20000038 	.word	0x20000038
 8001164:	20000080 	.word	0x20000080
 8001168:	2000008c 	.word	0x2000008c
 800116c:	200000ac 	.word	0x200000ac
 8001170:	20000088 	.word	0x20000088
 8001174:	20000050 	.word	0x20000050

		if(m != 0){
 8001178:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <EXTI4_15_IRQHandler+0x810>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d004      	beq.n	800118a <EXTI4_15_IRQHandler+0x762>
		display_mode(mode);
 8001180:	4b2e      	ldr	r3, [pc, #184]	; (800123c <EXTI4_15_IRQHandler+0x814>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	0018      	movs	r0, r3
 8001186:	f000 fc95 	bl	8001ab4 <display_mode>
	while(!( (EXTI ->  RPR1 >> 1) & 1 || (EXTI -> RPR1 >> 0) & 1 || ( (EXTI ->  RPR1 >> 7) & 1))){
 800118a:	4b2d      	ldr	r3, [pc, #180]	; (8001240 <EXTI4_15_IRQHandler+0x818>)
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	085b      	lsrs	r3, r3, #1
 8001190:	2201      	movs	r2, #1
 8001192:	4013      	ands	r3, r2
 8001194:	d10a      	bne.n	80011ac <EXTI4_15_IRQHandler+0x784>
 8001196:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <EXTI4_15_IRQHandler+0x818>)
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	2201      	movs	r2, #1
 800119c:	4013      	ands	r3, r2
 800119e:	d105      	bne.n	80011ac <EXTI4_15_IRQHandler+0x784>
 80011a0:	4b27      	ldr	r3, [pc, #156]	; (8001240 <EXTI4_15_IRQHandler+0x818>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	09db      	lsrs	r3, r3, #7
 80011a6:	2201      	movs	r2, #1
 80011a8:	4013      	ands	r3, r2
 80011aa:	d0e5      	beq.n	8001178 <EXTI4_15_IRQHandler+0x750>
	}
}
	m++;}
 80011ac:	4b22      	ldr	r3, [pc, #136]	; (8001238 <EXTI4_15_IRQHandler+0x810>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	1c5a      	adds	r2, r3, #1
 80011b2:	4b21      	ldr	r3, [pc, #132]	; (8001238 <EXTI4_15_IRQHandler+0x810>)
 80011b4:	601a      	str	r2, [r3, #0]

   //reset status registers
   EXTI -> RPR1 |= (1U<< 0);
 80011b6:	4b22      	ldr	r3, [pc, #136]	; (8001240 <EXTI4_15_IRQHandler+0x818>)
 80011b8:	68da      	ldr	r2, [r3, #12]
 80011ba:	4b21      	ldr	r3, [pc, #132]	; (8001240 <EXTI4_15_IRQHandler+0x818>)
 80011bc:	2101      	movs	r1, #1
 80011be:	430a      	orrs	r2, r1
 80011c0:	60da      	str	r2, [r3, #12]
   EXTI -> RPR1 |= (1U<< 1);
 80011c2:	4b1f      	ldr	r3, [pc, #124]	; (8001240 <EXTI4_15_IRQHandler+0x818>)
 80011c4:	68da      	ldr	r2, [r3, #12]
 80011c6:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <EXTI4_15_IRQHandler+0x818>)
 80011c8:	2102      	movs	r1, #2
 80011ca:	430a      	orrs	r2, r1
 80011cc:	60da      	str	r2, [r3, #12]

   //display the current number on the SSD
 if (A_pressed == 1 || B_pressed == 1){
 80011ce:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <EXTI4_15_IRQHandler+0x81c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d00e      	beq.n	80011f4 <EXTI4_15_IRQHandler+0x7cc>
 80011d6:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <EXTI4_15_IRQHandler+0x820>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d11b      	bne.n	8001216 <EXTI4_15_IRQHandler+0x7ee>
		while(!( (EXTI ->  RPR1 >> 1) & 1 || (EXTI -> RPR1 >> 0) & 1 || ( (EXTI ->  RPR1 >> 7) & 1)))
 80011de:	e009      	b.n	80011f4 <EXTI4_15_IRQHandler+0x7cc>
 	find_digit(d4,d3,d2,d1);
 80011e0:	4b1a      	ldr	r3, [pc, #104]	; (800124c <EXTI4_15_IRQHandler+0x824>)
 80011e2:	6818      	ldr	r0, [r3, #0]
 80011e4:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <EXTI4_15_IRQHandler+0x828>)
 80011e6:	6819      	ldr	r1, [r3, #0]
 80011e8:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <EXTI4_15_IRQHandler+0x82c>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <EXTI4_15_IRQHandler+0x830>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f000 faa6 	bl	8001740 <find_digit>
		while(!( (EXTI ->  RPR1 >> 1) & 1 || (EXTI -> RPR1 >> 0) & 1 || ( (EXTI ->  RPR1 >> 7) & 1)))
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <EXTI4_15_IRQHandler+0x818>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	085b      	lsrs	r3, r3, #1
 80011fa:	2201      	movs	r2, #1
 80011fc:	4013      	ands	r3, r2
 80011fe:	d10a      	bne.n	8001216 <EXTI4_15_IRQHandler+0x7ee>
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <EXTI4_15_IRQHandler+0x818>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	2201      	movs	r2, #1
 8001206:	4013      	ands	r3, r2
 8001208:	d105      	bne.n	8001216 <EXTI4_15_IRQHandler+0x7ee>
 800120a:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <EXTI4_15_IRQHandler+0x818>)
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	09db      	lsrs	r3, r3, #7
 8001210:	2201      	movs	r2, #1
 8001212:	4013      	ands	r3, r2
 8001214:	d0e4      	beq.n	80011e0 <EXTI4_15_IRQHandler+0x7b8>
 }

  // Reset status registers
  EXTI -> RPR1 |= (1U<< 7);
 8001216:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <EXTI4_15_IRQHandler+0x818>)
 8001218:	68da      	ldr	r2, [r3, #12]
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <EXTI4_15_IRQHandler+0x818>)
 800121c:	2180      	movs	r1, #128	; 0x80
 800121e:	430a      	orrs	r2, r1
 8001220:	60da      	str	r2, [r3, #12]
  EXTI -> RPR1 |= (1U<< 8);
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <EXTI4_15_IRQHandler+0x818>)
 8001224:	68da      	ldr	r2, [r3, #12]
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <EXTI4_15_IRQHandler+0x818>)
 8001228:	2180      	movs	r1, #128	; 0x80
 800122a:	0049      	lsls	r1, r1, #1
 800122c:	430a      	orrs	r2, r1
 800122e:	60da      	str	r2, [r3, #12]
  // Display the current number on the SS
}
 8001230:	46c0      	nop			; (mov r8, r8)
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	200000a8 	.word	0x200000a8
 800123c:	20000000 	.word	0x20000000
 8001240:	40021800 	.word	0x40021800
 8001244:	20000080 	.word	0x20000080
 8001248:	2000008c 	.word	0x2000008c
 800124c:	20000010 	.word	0x20000010
 8001250:	2000000c 	.word	0x2000000c
 8001254:	20000008 	.word	0x20000008
 8001258:	20000004 	.word	0x20000004

0800125c <init_all>:

void init_all() { //function that initializes clocks and MODERS
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0

  init_clocks();// Enable GPIOA/B/C clocks
 8001262:	f7fe ffd7 	bl	8000214 <init_clocks>
  set_onboardLED_output();
 8001266:	f7fe ffe3 	bl	8000230 <set_onboardLED_output>
  GPIOB -> MODER &= ~(3U << 2 * 2);
 800126a:	4b3f      	ldr	r3, [pc, #252]	; (8001368 <init_all+0x10c>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	4b3e      	ldr	r3, [pc, #248]	; (8001368 <init_all+0x10c>)
 8001270:	2130      	movs	r1, #48	; 0x30
 8001272:	438a      	bics	r2, r1
 8001274:	601a      	str	r2, [r3, #0]

  uint32_t x = 0x82A00;
 8001276:	4b3d      	ldr	r3, [pc, #244]	; (800136c <init_all+0x110>)
 8001278:	607b      	str	r3, [r7, #4]
  GPIOB -> MODER &= ~x;
 800127a:	4b3b      	ldr	r3, [pc, #236]	; (8001368 <init_all+0x10c>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	43d9      	mvns	r1, r3
 8001282:	4b39      	ldr	r3, [pc, #228]	; (8001368 <init_all+0x10c>)
 8001284:	400a      	ands	r2, r1
 8001286:	601a      	str	r2, [r3, #0]
  x = 0x41500;
 8001288:	4b39      	ldr	r3, [pc, #228]	; (8001370 <init_all+0x114>)
 800128a:	607b      	str	r3, [r7, #4]
  GPIOB -> MODER |= x;
 800128c:	4b36      	ldr	r3, [pc, #216]	; (8001368 <init_all+0x10c>)
 800128e:	6819      	ldr	r1, [r3, #0]
 8001290:	4b35      	ldr	r3, [pc, #212]	; (8001368 <init_all+0x10c>)
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	430a      	orrs	r2, r1
 8001296:	601a      	str	r2, [r3, #0]

  x = 0xC28AAA08;
 8001298:	4b36      	ldr	r3, [pc, #216]	; (8001374 <init_all+0x118>)
 800129a:	607b      	str	r3, [r7, #4]
  GPIOA -> MODER &= ~x;
 800129c:	23a0      	movs	r3, #160	; 0xa0
 800129e:	05db      	lsls	r3, r3, #23
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	43d9      	mvns	r1, r3
 80012a6:	23a0      	movs	r3, #160	; 0xa0
 80012a8:	05db      	lsls	r3, r3, #23
 80012aa:	400a      	ands	r2, r1
 80012ac:	601a      	str	r2, [r3, #0]
  x = 0x1455504;
 80012ae:	4b32      	ldr	r3, [pc, #200]	; (8001378 <init_all+0x11c>)
 80012b0:	607b      	str	r3, [r7, #4]
  GPIOA -> MODER |= x;
 80012b2:	23a0      	movs	r3, #160	; 0xa0
 80012b4:	05db      	lsls	r3, r3, #23
 80012b6:	6819      	ldr	r1, [r3, #0]
 80012b8:	23a0      	movs	r3, #160	; 0xa0
 80012ba:	05db      	lsls	r3, r3, #23
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	430a      	orrs	r2, r1
 80012c0:	601a      	str	r2, [r3, #0]

  //set PA10 PA9 PB0 PA15 outputs - rows
  set_output(1,10);
 80012c2:	210a      	movs	r1, #10
 80012c4:	2001      	movs	r0, #1
 80012c6:	f7fe ffc9 	bl	800025c <set_output>
  set_output(1,9);
 80012ca:	2109      	movs	r1, #9
 80012cc:	2001      	movs	r0, #1
 80012ce:	f7fe ffc5 	bl	800025c <set_output>
  set_output(2,0);
 80012d2:	2100      	movs	r1, #0
 80012d4:	2002      	movs	r0, #2
 80012d6:	f7fe ffc1 	bl	800025c <set_output>
  set_output(1,15);
 80012da:	210f      	movs	r1, #15
 80012dc:	2001      	movs	r0, #1
 80012de:	f7fe ffbd 	bl	800025c <set_output>

  //set PA0 PB1 PB8 PB7 inputs - columns, enable pull-down
  set_input(1,0);
 80012e2:	2100      	movs	r1, #0
 80012e4:	2001      	movs	r0, #1
 80012e6:	f7fe fff9 	bl	80002dc <set_input>
  GPIOA->PUPDR |= (2U << 2*0);
 80012ea:	23a0      	movs	r3, #160	; 0xa0
 80012ec:	05db      	lsls	r3, r3, #23
 80012ee:	68da      	ldr	r2, [r3, #12]
 80012f0:	23a0      	movs	r3, #160	; 0xa0
 80012f2:	05db      	lsls	r3, r3, #23
 80012f4:	2102      	movs	r1, #2
 80012f6:	430a      	orrs	r2, r1
 80012f8:	60da      	str	r2, [r3, #12]
  set_input(2,1);
 80012fa:	2101      	movs	r1, #1
 80012fc:	2002      	movs	r0, #2
 80012fe:	f7fe ffed 	bl	80002dc <set_input>
  GPIOB->PUPDR |= (2U << 2*1);
 8001302:	4b19      	ldr	r3, [pc, #100]	; (8001368 <init_all+0x10c>)
 8001304:	68da      	ldr	r2, [r3, #12]
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <init_all+0x10c>)
 8001308:	2108      	movs	r1, #8
 800130a:	430a      	orrs	r2, r1
 800130c:	60da      	str	r2, [r3, #12]
  set_input(2,7);
 800130e:	2107      	movs	r1, #7
 8001310:	2002      	movs	r0, #2
 8001312:	f7fe ffe3 	bl	80002dc <set_input>
  GPIOB->PUPDR |= (2U << 2*7);
 8001316:	4b14      	ldr	r3, [pc, #80]	; (8001368 <init_all+0x10c>)
 8001318:	68da      	ldr	r2, [r3, #12]
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <init_all+0x10c>)
 800131c:	2180      	movs	r1, #128	; 0x80
 800131e:	0209      	lsls	r1, r1, #8
 8001320:	430a      	orrs	r2, r1
 8001322:	60da      	str	r2, [r3, #12]
  set_input(2,8);
 8001324:	2108      	movs	r1, #8
 8001326:	2002      	movs	r0, #2
 8001328:	f7fe ffd8 	bl	80002dc <set_input>
  GPIOB->PUPDR |= (2U << 2*8);
 800132c:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <init_all+0x10c>)
 800132e:	68da      	ldr	r2, [r3, #12]
 8001330:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <init_all+0x10c>)
 8001332:	2180      	movs	r1, #128	; 0x80
 8001334:	0289      	lsls	r1, r1, #10
 8001336:	430a      	orrs	r2, r1
 8001338:	60da      	str	r2, [r3, #12]

  init_ext_interrupts(); // initialize external interrupts for keypad
 800133a:	f000 f81f 	bl	800137c <init_ext_interrupts>

  //set input pins to 1 - columns
  set_pin_to1(1,0);
 800133e:	2100      	movs	r1, #0
 8001340:	2001      	movs	r0, #1
 8001342:	f7fe fff7 	bl	8000334 <set_pin_to1>
  set_pin_to1(2,1);
 8001346:	2101      	movs	r1, #1
 8001348:	2002      	movs	r0, #2
 800134a:	f7fe fff3 	bl	8000334 <set_pin_to1>
  set_pin_to1(2,7);
 800134e:	2107      	movs	r1, #7
 8001350:	2002      	movs	r0, #2
 8001352:	f7fe ffef 	bl	8000334 <set_pin_to1>
  set_pin_to1(2,8);
 8001356:	2108      	movs	r1, #8
 8001358:	2002      	movs	r0, #2
 800135a:	f7fe ffeb 	bl	8000334 <set_pin_to1>

}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	46bd      	mov	sp, r7
 8001362:	b002      	add	sp, #8
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	50000400 	.word	0x50000400
 800136c:	00082a00 	.word	0x00082a00
 8001370:	00041500 	.word	0x00041500
 8001374:	c28aaa08 	.word	0xc28aaa08
 8001378:	01455504 	.word	0x01455504

0800137c <init_ext_interrupts>:

void init_ext_interrupts(){ // initializes external interrupts for keypad
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  //PA0
  EXTI->EXTICR[0] |= (0U << 0);
 8001380:	4a38      	ldr	r2, [pc, #224]	; (8001464 <init_ext_interrupts+0xe8>)
 8001382:	4b38      	ldr	r3, [pc, #224]	; (8001464 <init_ext_interrupts+0xe8>)
 8001384:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001386:	661a      	str	r2, [r3, #96]	; 0x60
  EXTI->RTSR1 |= (1U << 0);
 8001388:	4b36      	ldr	r3, [pc, #216]	; (8001464 <init_ext_interrupts+0xe8>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b35      	ldr	r3, [pc, #212]	; (8001464 <init_ext_interrupts+0xe8>)
 800138e:	2101      	movs	r1, #1
 8001390:	430a      	orrs	r2, r1
 8001392:	601a      	str	r2, [r3, #0]
  EXTI->IMR1 |= (1U << 0);
 8001394:	4a33      	ldr	r2, [pc, #204]	; (8001464 <init_ext_interrupts+0xe8>)
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	58d3      	ldr	r3, [r2, r3]
 800139a:	4932      	ldr	r1, [pc, #200]	; (8001464 <init_ext_interrupts+0xe8>)
 800139c:	2201      	movs	r2, #1
 800139e:	4313      	orrs	r3, r2
 80013a0:	2280      	movs	r2, #128	; 0x80
 80013a2:	508b      	str	r3, [r1, r2]
  NVIC_SetPriority(EXTI0_1_IRQn, 0);
 80013a4:	2100      	movs	r1, #0
 80013a6:	2005      	movs	r0, #5
 80013a8:	f7fe fec6 	bl	8000138 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_1_IRQn);
 80013ac:	2005      	movs	r0, #5
 80013ae:	f7fe fea9 	bl	8000104 <__NVIC_EnableIRQ>

  //PB1
  EXTI->EXTICR[0] |= (1U << 8*1);
 80013b2:	4b2c      	ldr	r3, [pc, #176]	; (8001464 <init_ext_interrupts+0xe8>)
 80013b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013b6:	4b2b      	ldr	r3, [pc, #172]	; (8001464 <init_ext_interrupts+0xe8>)
 80013b8:	2180      	movs	r1, #128	; 0x80
 80013ba:	0049      	lsls	r1, r1, #1
 80013bc:	430a      	orrs	r2, r1
 80013be:	661a      	str	r2, [r3, #96]	; 0x60
  EXTI->RTSR1 |= (1U << 1);
 80013c0:	4b28      	ldr	r3, [pc, #160]	; (8001464 <init_ext_interrupts+0xe8>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b27      	ldr	r3, [pc, #156]	; (8001464 <init_ext_interrupts+0xe8>)
 80013c6:	2102      	movs	r1, #2
 80013c8:	430a      	orrs	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]
  EXTI->IMR1 |= (1U << 1);
 80013cc:	4a25      	ldr	r2, [pc, #148]	; (8001464 <init_ext_interrupts+0xe8>)
 80013ce:	2380      	movs	r3, #128	; 0x80
 80013d0:	58d3      	ldr	r3, [r2, r3]
 80013d2:	4924      	ldr	r1, [pc, #144]	; (8001464 <init_ext_interrupts+0xe8>)
 80013d4:	2202      	movs	r2, #2
 80013d6:	4313      	orrs	r3, r2
 80013d8:	2280      	movs	r2, #128	; 0x80
 80013da:	508b      	str	r3, [r1, r2]
  NVIC_SetPriority(EXTI0_1_IRQn, 0);
 80013dc:	2100      	movs	r1, #0
 80013de:	2005      	movs	r0, #5
 80013e0:	f7fe feaa 	bl	8000138 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_1_IRQn);
 80013e4:	2005      	movs	r0, #5
 80013e6:	f7fe fe8d 	bl	8000104 <__NVIC_EnableIRQ>

	//PB7
  EXTI->EXTICR[1] |= (1U << 8*3);
 80013ea:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <init_ext_interrupts+0xe8>)
 80013ec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80013ee:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <init_ext_interrupts+0xe8>)
 80013f0:	2180      	movs	r1, #128	; 0x80
 80013f2:	0449      	lsls	r1, r1, #17
 80013f4:	430a      	orrs	r2, r1
 80013f6:	665a      	str	r2, [r3, #100]	; 0x64
  EXTI->RTSR1 |= (1U << 7);
 80013f8:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <init_ext_interrupts+0xe8>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b19      	ldr	r3, [pc, #100]	; (8001464 <init_ext_interrupts+0xe8>)
 80013fe:	2180      	movs	r1, #128	; 0x80
 8001400:	430a      	orrs	r2, r1
 8001402:	601a      	str	r2, [r3, #0]
  EXTI->IMR1 |= (1U << 7);
 8001404:	4a17      	ldr	r2, [pc, #92]	; (8001464 <init_ext_interrupts+0xe8>)
 8001406:	2380      	movs	r3, #128	; 0x80
 8001408:	58d3      	ldr	r3, [r2, r3]
 800140a:	4916      	ldr	r1, [pc, #88]	; (8001464 <init_ext_interrupts+0xe8>)
 800140c:	2280      	movs	r2, #128	; 0x80
 800140e:	4313      	orrs	r3, r2
 8001410:	2280      	movs	r2, #128	; 0x80
 8001412:	508b      	str	r3, [r1, r2]
  NVIC_SetPriority(EXTI4_15_IRQn, 0);
 8001414:	2100      	movs	r1, #0
 8001416:	2007      	movs	r0, #7
 8001418:	f7fe fe8e 	bl	8000138 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_15_IRQn);
 800141c:	2007      	movs	r0, #7
 800141e:	f7fe fe71 	bl	8000104 <__NVIC_EnableIRQ>

	//PB8
  EXTI->EXTICR[2] |= (1U << 8*0);
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <init_ext_interrupts+0xe8>)
 8001424:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001426:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <init_ext_interrupts+0xe8>)
 8001428:	2101      	movs	r1, #1
 800142a:	430a      	orrs	r2, r1
 800142c:	669a      	str	r2, [r3, #104]	; 0x68
  EXTI->RTSR1 |= (1U << 8);
 800142e:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <init_ext_interrupts+0xe8>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <init_ext_interrupts+0xe8>)
 8001434:	2180      	movs	r1, #128	; 0x80
 8001436:	0049      	lsls	r1, r1, #1
 8001438:	430a      	orrs	r2, r1
 800143a:	601a      	str	r2, [r3, #0]
  EXTI->IMR1 |= (1U << 8);
 800143c:	4a09      	ldr	r2, [pc, #36]	; (8001464 <init_ext_interrupts+0xe8>)
 800143e:	2380      	movs	r3, #128	; 0x80
 8001440:	58d3      	ldr	r3, [r2, r3]
 8001442:	4908      	ldr	r1, [pc, #32]	; (8001464 <init_ext_interrupts+0xe8>)
 8001444:	2280      	movs	r2, #128	; 0x80
 8001446:	0052      	lsls	r2, r2, #1
 8001448:	4313      	orrs	r3, r2
 800144a:	2280      	movs	r2, #128	; 0x80
 800144c:	508b      	str	r3, [r1, r2]
  NVIC_SetPriority(EXTI4_15_IRQn, 0);
 800144e:	2100      	movs	r1, #0
 8001450:	2007      	movs	r0, #7
 8001452:	f7fe fe71 	bl	8000138 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001456:	2007      	movs	r0, #7
 8001458:	f7fe fe54 	bl	8000104 <__NVIC_EnableIRQ>
}
 800145c:	46c0      	nop			; (mov r8, r8)
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	40021800 	.word	0x40021800

08001468 <activate_d1>:

void activate_d1() { //function that activates first digit connected to PB4
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  GPIOB -> ODR |= (1U<< 4);
 800146c:	4b04      	ldr	r3, [pc, #16]	; (8001480 <activate_d1+0x18>)
 800146e:	695a      	ldr	r2, [r3, #20]
 8001470:	4b03      	ldr	r3, [pc, #12]	; (8001480 <activate_d1+0x18>)
 8001472:	2110      	movs	r1, #16
 8001474:	430a      	orrs	r2, r1
 8001476:	615a      	str	r2, [r3, #20]
}
 8001478:	46c0      	nop			; (mov r8, r8)
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	50000400 	.word	0x50000400

08001484 <activate_d2>:
void activate_d2() { //function that activates second digit connected to PB5
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  GPIOB -> ODR |= (1U<< 5);
 8001488:	4b04      	ldr	r3, [pc, #16]	; (800149c <activate_d2+0x18>)
 800148a:	695a      	ldr	r2, [r3, #20]
 800148c:	4b03      	ldr	r3, [pc, #12]	; (800149c <activate_d2+0x18>)
 800148e:	2120      	movs	r1, #32
 8001490:	430a      	orrs	r2, r1
 8001492:	615a      	str	r2, [r3, #20]
}
 8001494:	46c0      	nop			; (mov r8, r8)
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	46c0      	nop			; (mov r8, r8)
 800149c:	50000400 	.word	0x50000400

080014a0 <activate_d3>:
void activate_d3() { //function that activates third digit connected to PB9
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  GPIOB -> ODR |= (1U<< 9);
 80014a4:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <activate_d3+0x18>)
 80014a6:	695a      	ldr	r2, [r3, #20]
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <activate_d3+0x18>)
 80014aa:	2180      	movs	r1, #128	; 0x80
 80014ac:	0089      	lsls	r1, r1, #2
 80014ae:	430a      	orrs	r2, r1
 80014b0:	615a      	str	r2, [r3, #20]
}
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	50000400 	.word	0x50000400

080014bc <activate_d4>:
void activate_d4() { //function that activates fourth digit connected to PB6
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  GPIOB -> ODR |= (1U<< 6);
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <activate_d4+0x18>)
 80014c2:	695a      	ldr	r2, [r3, #20]
 80014c4:	4b03      	ldr	r3, [pc, #12]	; (80014d4 <activate_d4+0x18>)
 80014c6:	2140      	movs	r1, #64	; 0x40
 80014c8:	430a      	orrs	r2, r1
 80014ca:	615a      	str	r2, [r3, #20]
}
 80014cc:	46c0      	nop			; (mov r8, r8)
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	50000400 	.word	0x50000400

080014d8 <deactivate_d1>:
void deactivate_d1() { //function that activates first digit connected to PB4
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  GPIOB -> ODR &= ~(1U<< 4);
 80014dc:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <deactivate_d1+0x18>)
 80014de:	695a      	ldr	r2, [r3, #20]
 80014e0:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <deactivate_d1+0x18>)
 80014e2:	2110      	movs	r1, #16
 80014e4:	438a      	bics	r2, r1
 80014e6:	615a      	str	r2, [r3, #20]
}
 80014e8:	46c0      	nop			; (mov r8, r8)
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	50000400 	.word	0x50000400

080014f4 <deactivate_d2>:
void deactivate_d2() { //function that activates second digit connected to PB5
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  GPIOB -> ODR &= ~(1U<< 5);
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <deactivate_d2+0x18>)
 80014fa:	695a      	ldr	r2, [r3, #20]
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <deactivate_d2+0x18>)
 80014fe:	2120      	movs	r1, #32
 8001500:	438a      	bics	r2, r1
 8001502:	615a      	str	r2, [r3, #20]
}
 8001504:	46c0      	nop			; (mov r8, r8)
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	50000400 	.word	0x50000400

08001510 <deactivate_d3>:
void deactivate_d3() { //function that activates third digit connected to PB9
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  GPIOB -> ODR &= ~(1U<< 9);
 8001514:	4b04      	ldr	r3, [pc, #16]	; (8001528 <deactivate_d3+0x18>)
 8001516:	695a      	ldr	r2, [r3, #20]
 8001518:	4b03      	ldr	r3, [pc, #12]	; (8001528 <deactivate_d3+0x18>)
 800151a:	4904      	ldr	r1, [pc, #16]	; (800152c <deactivate_d3+0x1c>)
 800151c:	400a      	ands	r2, r1
 800151e:	615a      	str	r2, [r3, #20]
}
 8001520:	46c0      	nop			; (mov r8, r8)
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	50000400 	.word	0x50000400
 800152c:	fffffdff 	.word	0xfffffdff

08001530 <deactivate_d4>:
void deactivate_d4() { //function that activates fourth digit connected to PB6
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  GPIOB -> ODR &= ~(1U<< 6);
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <deactivate_d4+0x18>)
 8001536:	695a      	ldr	r2, [r3, #20]
 8001538:	4b03      	ldr	r3, [pc, #12]	; (8001548 <deactivate_d4+0x18>)
 800153a:	2140      	movs	r1, #64	; 0x40
 800153c:	438a      	bics	r2, r1
 800153e:	615a      	str	r2, [r3, #20]
}
 8001540:	46c0      	nop			; (mov r8, r8)
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	50000400 	.word	0x50000400

0800154c <zero>:

//display zero
void zero() { //PA 1 4 6 7 8 12
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
  uint32_t x = 0x11D2;
 8001552:	4b07      	ldr	r3, [pc, #28]	; (8001570 <zero+0x24>)
 8001554:	607b      	str	r3, [r7, #4]
  GPIOA -> ODR &= ~(x);
 8001556:	23a0      	movs	r3, #160	; 0xa0
 8001558:	05db      	lsls	r3, r3, #23
 800155a:	695a      	ldr	r2, [r3, #20]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	43d9      	mvns	r1, r3
 8001560:	23a0      	movs	r3, #160	; 0xa0
 8001562:	05db      	lsls	r3, r3, #23
 8001564:	400a      	ands	r2, r1
 8001566:	615a      	str	r2, [r3, #20]
}
 8001568:	46c0      	nop			; (mov r8, r8)
 800156a:	46bd      	mov	sp, r7
 800156c:	b002      	add	sp, #8
 800156e:	bd80      	pop	{r7, pc}
 8001570:	000011d2 	.word	0x000011d2

08001574 <one>:
//display one
void one() { //PA 7 12
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
  uint32_t x = 0x1080;
 800157a:	2384      	movs	r3, #132	; 0x84
 800157c:	015b      	lsls	r3, r3, #5
 800157e:	607b      	str	r3, [r7, #4]
  GPIOA -> ODR &= ~(x);
 8001580:	23a0      	movs	r3, #160	; 0xa0
 8001582:	05db      	lsls	r3, r3, #23
 8001584:	695a      	ldr	r2, [r3, #20]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	43d9      	mvns	r1, r3
 800158a:	23a0      	movs	r3, #160	; 0xa0
 800158c:	05db      	lsls	r3, r3, #23
 800158e:	400a      	ands	r2, r1
 8001590:	615a      	str	r2, [r3, #20]
}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	46bd      	mov	sp, r7
 8001596:	b002      	add	sp, #8
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <two>:
//display two
void two() { //PA 1 4 7 8 11
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
  uint32_t x = 0x992;
 80015a2:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <two+0x24>)
 80015a4:	607b      	str	r3, [r7, #4]
  GPIOA -> ODR &= ~(x);
 80015a6:	23a0      	movs	r3, #160	; 0xa0
 80015a8:	05db      	lsls	r3, r3, #23
 80015aa:	695a      	ldr	r2, [r3, #20]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	43d9      	mvns	r1, r3
 80015b0:	23a0      	movs	r3, #160	; 0xa0
 80015b2:	05db      	lsls	r3, r3, #23
 80015b4:	400a      	ands	r2, r1
 80015b6:	615a      	str	r2, [r3, #20]
}
 80015b8:	46c0      	nop			; (mov r8, r8)
 80015ba:	46bd      	mov	sp, r7
 80015bc:	b002      	add	sp, #8
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	00000992 	.word	0x00000992

080015c4 <three>:
//display three
void three() { //PA 4 7 8 11 12
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
  uint32_t x = 0x1990;
 80015ca:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <three+0x24>)
 80015cc:	607b      	str	r3, [r7, #4]
  GPIOA -> ODR &= ~(x);
 80015ce:	23a0      	movs	r3, #160	; 0xa0
 80015d0:	05db      	lsls	r3, r3, #23
 80015d2:	695a      	ldr	r2, [r3, #20]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	43d9      	mvns	r1, r3
 80015d8:	23a0      	movs	r3, #160	; 0xa0
 80015da:	05db      	lsls	r3, r3, #23
 80015dc:	400a      	ands	r2, r1
 80015de:	615a      	str	r2, [r3, #20]
}
 80015e0:	46c0      	nop			; (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b002      	add	sp, #8
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	00001990 	.word	0x00001990

080015ec <four>:
//display four
void four() { //PA 6 7 11 12
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
  uint32_t x = 0x18C0;
 80015f2:	23c6      	movs	r3, #198	; 0xc6
 80015f4:	015b      	lsls	r3, r3, #5
 80015f6:	607b      	str	r3, [r7, #4]
  GPIOA -> ODR &= ~(x);
 80015f8:	23a0      	movs	r3, #160	; 0xa0
 80015fa:	05db      	lsls	r3, r3, #23
 80015fc:	695a      	ldr	r2, [r3, #20]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	43d9      	mvns	r1, r3
 8001602:	23a0      	movs	r3, #160	; 0xa0
 8001604:	05db      	lsls	r3, r3, #23
 8001606:	400a      	ands	r2, r1
 8001608:	615a      	str	r2, [r3, #20]
}
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	46bd      	mov	sp, r7
 800160e:	b002      	add	sp, #8
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <five>:
//display five
void five() { //PA 4 6 8 11 12
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
  uint32_t x = 0x1950;
 800161a:	4b07      	ldr	r3, [pc, #28]	; (8001638 <five+0x24>)
 800161c:	607b      	str	r3, [r7, #4]
  GPIOA -> ODR &= ~(x);
 800161e:	23a0      	movs	r3, #160	; 0xa0
 8001620:	05db      	lsls	r3, r3, #23
 8001622:	695a      	ldr	r2, [r3, #20]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	43d9      	mvns	r1, r3
 8001628:	23a0      	movs	r3, #160	; 0xa0
 800162a:	05db      	lsls	r3, r3, #23
 800162c:	400a      	ands	r2, r1
 800162e:	615a      	str	r2, [r3, #20]
} //display six
 8001630:	46c0      	nop			; (mov r8, r8)
 8001632:	46bd      	mov	sp, r7
 8001634:	b002      	add	sp, #8
 8001636:	bd80      	pop	{r7, pc}
 8001638:	00001950 	.word	0x00001950

0800163c <six>:
void six() { //PA 1 4 6 8 11 12
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
  uint32_t x = 0x1952;
 8001642:	4b07      	ldr	r3, [pc, #28]	; (8001660 <six+0x24>)
 8001644:	607b      	str	r3, [r7, #4]
  GPIOA -> ODR &= ~(x);
 8001646:	23a0      	movs	r3, #160	; 0xa0
 8001648:	05db      	lsls	r3, r3, #23
 800164a:	695a      	ldr	r2, [r3, #20]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	43d9      	mvns	r1, r3
 8001650:	23a0      	movs	r3, #160	; 0xa0
 8001652:	05db      	lsls	r3, r3, #23
 8001654:	400a      	ands	r2, r1
 8001656:	615a      	str	r2, [r3, #20]
}
 8001658:	46c0      	nop			; (mov r8, r8)
 800165a:	46bd      	mov	sp, r7
 800165c:	b002      	add	sp, #8
 800165e:	bd80      	pop	{r7, pc}
 8001660:	00001952 	.word	0x00001952

08001664 <seven>:
//display seven
void seven() { //PA 7 8 12
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
  uint32_t x = 0x1180;
 800166a:	238c      	movs	r3, #140	; 0x8c
 800166c:	015b      	lsls	r3, r3, #5
 800166e:	607b      	str	r3, [r7, #4]
  GPIOA -> ODR &= ~(x);
 8001670:	23a0      	movs	r3, #160	; 0xa0
 8001672:	05db      	lsls	r3, r3, #23
 8001674:	695a      	ldr	r2, [r3, #20]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	43d9      	mvns	r1, r3
 800167a:	23a0      	movs	r3, #160	; 0xa0
 800167c:	05db      	lsls	r3, r3, #23
 800167e:	400a      	ands	r2, r1
 8001680:	615a      	str	r2, [r3, #20]
}
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	46bd      	mov	sp, r7
 8001686:	b002      	add	sp, #8
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <eight>:
//display eight
void eight() { //PA 1 4 6 7 8 11 12
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
  uint32_t x = 0x19D2;
 8001692:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <eight+0x24>)
 8001694:	607b      	str	r3, [r7, #4]
  GPIOA -> ODR &= ~(x);
 8001696:	23a0      	movs	r3, #160	; 0xa0
 8001698:	05db      	lsls	r3, r3, #23
 800169a:	695a      	ldr	r2, [r3, #20]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	43d9      	mvns	r1, r3
 80016a0:	23a0      	movs	r3, #160	; 0xa0
 80016a2:	05db      	lsls	r3, r3, #23
 80016a4:	400a      	ands	r2, r1
 80016a6:	615a      	str	r2, [r3, #20]
}
 80016a8:	46c0      	nop			; (mov r8, r8)
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b002      	add	sp, #8
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	000019d2 	.word	0x000019d2

080016b4 <nine>:
//display nine
void nine() { //PA 4 6 7 8 11 12
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
  uint32_t x = 0x19D0;
 80016ba:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <nine+0x24>)
 80016bc:	607b      	str	r3, [r7, #4]
  GPIOA -> ODR &= ~(x);
 80016be:	23a0      	movs	r3, #160	; 0xa0
 80016c0:	05db      	lsls	r3, r3, #23
 80016c2:	695a      	ldr	r2, [r3, #20]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	43d9      	mvns	r1, r3
 80016c8:	23a0      	movs	r3, #160	; 0xa0
 80016ca:	05db      	lsls	r3, r3, #23
 80016cc:	400a      	ands	r2, r1
 80016ce:	615a      	str	r2, [r3, #20]
}
 80016d0:	46c0      	nop			; (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	b002      	add	sp, #8
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	000019d0 	.word	0x000019d0

080016dc <blackout>:

//deactivate all digits and segments
void blackout() {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
  uint32_t x = 0x270;
 80016e2:	239c      	movs	r3, #156	; 0x9c
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	607b      	str	r3, [r7, #4]
  GPIOB -> ODR &= ~(x);
 80016e8:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <blackout+0x38>)
 80016ea:	695a      	ldr	r2, [r3, #20]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	43d9      	mvns	r1, r3
 80016f0:	4b08      	ldr	r3, [pc, #32]	; (8001714 <blackout+0x38>)
 80016f2:	400a      	ands	r2, r1
 80016f4:	615a      	str	r2, [r3, #20]
  x = 0x19F2;
 80016f6:	4b08      	ldr	r3, [pc, #32]	; (8001718 <blackout+0x3c>)
 80016f8:	607b      	str	r3, [r7, #4]
  GPIOA -> ODR |= x;
 80016fa:	23a0      	movs	r3, #160	; 0xa0
 80016fc:	05db      	lsls	r3, r3, #23
 80016fe:	6959      	ldr	r1, [r3, #20]
 8001700:	23a0      	movs	r3, #160	; 0xa0
 8001702:	05db      	lsls	r3, r3, #23
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	430a      	orrs	r2, r1
 8001708:	615a      	str	r2, [r3, #20]
}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	46bd      	mov	sp, r7
 800170e:	b002      	add	sp, #8
 8001710:	bd80      	pop	{r7, pc}
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	50000400 	.word	0x50000400
 8001718:	000019f2 	.word	0x000019f2

0800171c <compare_display>:




void compare_display() { //it is a modificated version of one of my older functions for Project 1, so its name is old
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0

  while (1) { // display a number all the time

//    ten_sec_counter++; // count to 10
    while (A_pressed != 1) //if not pressed to an keys after any interrupt go back to idle state and reset previous key presses-numbers
 8001720:	e004      	b.n	800172c <compare_display+0x10>
    	display_mode(mode);
 8001722:	4b05      	ldr	r3, [pc, #20]	; (8001738 <compare_display+0x1c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	0018      	movs	r0, r3
 8001728:	f000 f9c4 	bl	8001ab4 <display_mode>
    while (A_pressed != 1) //if not pressed to an keys after any interrupt go back to idle state and reset previous key presses-numbers
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <compare_display+0x20>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d1f6      	bne.n	8001722 <compare_display+0x6>
 8001734:	e7fa      	b.n	800172c <compare_display+0x10>
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	20000000 	.word	0x20000000
 800173c:	20000080 	.word	0x20000080

08001740 <find_digit>:





void find_digit(int d1, int d2, int d3, int d4) { // function that gets the digits of a number and displays it on the SSD
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	603b      	str	r3, [r7, #0]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2b0a      	cmp	r3, #10
 8001752:	d86e      	bhi.n	8001832 <find_digit+0xf2>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	009a      	lsls	r2, r3, #2
 8001758:	4bd1      	ldr	r3, [pc, #836]	; (8001aa0 <find_digit+0x360>)
 800175a:	18d3      	adds	r3, r2, r3
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	469f      	mov	pc, r3
  switch (d1) { //first digit
  case 0:
    blackout();
 8001760:	f7ff ffbc 	bl	80016dc <blackout>
    activate_d1();
 8001764:	f7ff fe80 	bl	8001468 <activate_d1>
    zero();
 8001768:	f7ff fef0 	bl	800154c <zero>
    my_delay();
 800176c:	f7fe fe3e 	bl	80003ec <my_delay>
    break;
 8001770:	e061      	b.n	8001836 <find_digit+0xf6>
  case 1:
    blackout();
 8001772:	f7ff ffb3 	bl	80016dc <blackout>
    activate_d1();
 8001776:	f7ff fe77 	bl	8001468 <activate_d1>
    one();
 800177a:	f7ff fefb 	bl	8001574 <one>
    my_delay();
 800177e:	f7fe fe35 	bl	80003ec <my_delay>
    break;
 8001782:	e058      	b.n	8001836 <find_digit+0xf6>
  case 2:
    blackout();
 8001784:	f7ff ffaa 	bl	80016dc <blackout>
    activate_d1();
 8001788:	f7ff fe6e 	bl	8001468 <activate_d1>
    two();
 800178c:	f7ff ff06 	bl	800159c <two>
    my_delay();
 8001790:	f7fe fe2c 	bl	80003ec <my_delay>
    break;
 8001794:	e04f      	b.n	8001836 <find_digit+0xf6>
  case 3:
    blackout();
 8001796:	f7ff ffa1 	bl	80016dc <blackout>
    activate_d1();
 800179a:	f7ff fe65 	bl	8001468 <activate_d1>
    three();
 800179e:	f7ff ff11 	bl	80015c4 <three>
    my_delay();
 80017a2:	f7fe fe23 	bl	80003ec <my_delay>
    break;
 80017a6:	e046      	b.n	8001836 <find_digit+0xf6>
  case 4:
    blackout();
 80017a8:	f7ff ff98 	bl	80016dc <blackout>
    activate_d1();
 80017ac:	f7ff fe5c 	bl	8001468 <activate_d1>
    four();
 80017b0:	f7ff ff1c 	bl	80015ec <four>
    my_delay();
 80017b4:	f7fe fe1a 	bl	80003ec <my_delay>
    break;
 80017b8:	e03d      	b.n	8001836 <find_digit+0xf6>
  case 5:
    blackout();
 80017ba:	f7ff ff8f 	bl	80016dc <blackout>
    activate_d1();
 80017be:	f7ff fe53 	bl	8001468 <activate_d1>
    five();
 80017c2:	f7ff ff27 	bl	8001614 <five>
    my_delay();
 80017c6:	f7fe fe11 	bl	80003ec <my_delay>
    break;
 80017ca:	e034      	b.n	8001836 <find_digit+0xf6>
  case 6:
    blackout();
 80017cc:	f7ff ff86 	bl	80016dc <blackout>
    activate_d1();
 80017d0:	f7ff fe4a 	bl	8001468 <activate_d1>
    six();
 80017d4:	f7ff ff32 	bl	800163c <six>
    my_delay();
 80017d8:	f7fe fe08 	bl	80003ec <my_delay>
    break;
 80017dc:	e02b      	b.n	8001836 <find_digit+0xf6>
  case 7:
    blackout();
 80017de:	f7ff ff7d 	bl	80016dc <blackout>
    activate_d1();
 80017e2:	f7ff fe41 	bl	8001468 <activate_d1>
    seven();
 80017e6:	f7ff ff3d 	bl	8001664 <seven>
    my_delay();
 80017ea:	f7fe fdff 	bl	80003ec <my_delay>
    break;
 80017ee:	e022      	b.n	8001836 <find_digit+0xf6>
  case 8:
    blackout();
 80017f0:	f7ff ff74 	bl	80016dc <blackout>
    activate_d1();
 80017f4:	f7ff fe38 	bl	8001468 <activate_d1>
    eight();
 80017f8:	f7ff ff48 	bl	800168c <eight>
    my_delay();
 80017fc:	f7fe fdf6 	bl	80003ec <my_delay>
    break;
 8001800:	e019      	b.n	8001836 <find_digit+0xf6>
  case 9:
    blackout();
 8001802:	f7ff ff6b 	bl	80016dc <blackout>
    activate_d1();
 8001806:	f7ff fe2f 	bl	8001468 <activate_d1>
    nine();
 800180a:	f7ff ff53 	bl	80016b4 <nine>
    my_delay();
 800180e:	f7fe fded 	bl	80003ec <my_delay>
    break;
 8001812:	e010      	b.n	8001836 <find_digit+0xf6>
  case 10: // if number is negative it will display - sign on the first digit
    blackout();
 8001814:	f7ff ff62 	bl	80016dc <blackout>
    activate_d1();
 8001818:	f7ff fe26 	bl	8001468 <activate_d1>
    GPIOA -> ODR &= ~(1U<< 11);
 800181c:	23a0      	movs	r3, #160	; 0xa0
 800181e:	05db      	lsls	r3, r3, #23
 8001820:	695a      	ldr	r2, [r3, #20]
 8001822:	23a0      	movs	r3, #160	; 0xa0
 8001824:	05db      	lsls	r3, r3, #23
 8001826:	499f      	ldr	r1, [pc, #636]	; (8001aa4 <find_digit+0x364>)
 8001828:	400a      	ands	r2, r1
 800182a:	615a      	str	r2, [r3, #20]
    my_delay();
 800182c:	f7fe fdde 	bl	80003ec <my_delay>
    break;
 8001830:	e001      	b.n	8001836 <find_digit+0xf6>
  default: // for case -1 so deactivates d1
    deactivate_d1();
 8001832:	f7ff fe51 	bl	80014d8 <deactivate_d1>
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	2b09      	cmp	r3, #9
 800183a:	d85f      	bhi.n	80018fc <find_digit+0x1bc>
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	009a      	lsls	r2, r3, #2
 8001840:	4b99      	ldr	r3, [pc, #612]	; (8001aa8 <find_digit+0x368>)
 8001842:	18d3      	adds	r3, r2, r3
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	469f      	mov	pc, r3
  }

  switch (d2) { //second digit
  case 0:
    blackout();
 8001848:	f7ff ff48 	bl	80016dc <blackout>
    activate_d2();
 800184c:	f7ff fe1a 	bl	8001484 <activate_d2>
    zero();
 8001850:	f7ff fe7c 	bl	800154c <zero>
    my_delay();
 8001854:	f7fe fdca 	bl	80003ec <my_delay>
    break;
 8001858:	e052      	b.n	8001900 <find_digit+0x1c0>
  case 1:
    blackout();
 800185a:	f7ff ff3f 	bl	80016dc <blackout>
    activate_d2();
 800185e:	f7ff fe11 	bl	8001484 <activate_d2>
    one();
 8001862:	f7ff fe87 	bl	8001574 <one>
    my_delay();
 8001866:	f7fe fdc1 	bl	80003ec <my_delay>
    break;
 800186a:	e049      	b.n	8001900 <find_digit+0x1c0>
  case 2:
    blackout();
 800186c:	f7ff ff36 	bl	80016dc <blackout>
    activate_d2();
 8001870:	f7ff fe08 	bl	8001484 <activate_d2>
    two();
 8001874:	f7ff fe92 	bl	800159c <two>
    my_delay();
 8001878:	f7fe fdb8 	bl	80003ec <my_delay>
    break;
 800187c:	e040      	b.n	8001900 <find_digit+0x1c0>
  case 3:
    blackout();
 800187e:	f7ff ff2d 	bl	80016dc <blackout>
    activate_d2();
 8001882:	f7ff fdff 	bl	8001484 <activate_d2>
    three();
 8001886:	f7ff fe9d 	bl	80015c4 <three>
    my_delay();
 800188a:	f7fe fdaf 	bl	80003ec <my_delay>
    break;
 800188e:	e037      	b.n	8001900 <find_digit+0x1c0>
  case 4:
    blackout();
 8001890:	f7ff ff24 	bl	80016dc <blackout>
    activate_d2();
 8001894:	f7ff fdf6 	bl	8001484 <activate_d2>
    four();
 8001898:	f7ff fea8 	bl	80015ec <four>
    my_delay();
 800189c:	f7fe fda6 	bl	80003ec <my_delay>
    break;
 80018a0:	e02e      	b.n	8001900 <find_digit+0x1c0>
  case 5:
    blackout();
 80018a2:	f7ff ff1b 	bl	80016dc <blackout>
    activate_d2();
 80018a6:	f7ff fded 	bl	8001484 <activate_d2>
    five();
 80018aa:	f7ff feb3 	bl	8001614 <five>
    my_delay();
 80018ae:	f7fe fd9d 	bl	80003ec <my_delay>
    break;
 80018b2:	e025      	b.n	8001900 <find_digit+0x1c0>
  case 6:
    blackout();
 80018b4:	f7ff ff12 	bl	80016dc <blackout>
    activate_d2();
 80018b8:	f7ff fde4 	bl	8001484 <activate_d2>
    six();
 80018bc:	f7ff febe 	bl	800163c <six>
    my_delay();
 80018c0:	f7fe fd94 	bl	80003ec <my_delay>
    break;
 80018c4:	e01c      	b.n	8001900 <find_digit+0x1c0>
  case 7:
    blackout();
 80018c6:	f7ff ff09 	bl	80016dc <blackout>
    activate_d2();
 80018ca:	f7ff fddb 	bl	8001484 <activate_d2>
    seven();
 80018ce:	f7ff fec9 	bl	8001664 <seven>
    my_delay();
 80018d2:	f7fe fd8b 	bl	80003ec <my_delay>
    break;
 80018d6:	e013      	b.n	8001900 <find_digit+0x1c0>
  case 8:
    blackout();
 80018d8:	f7ff ff00 	bl	80016dc <blackout>
    activate_d2();
 80018dc:	f7ff fdd2 	bl	8001484 <activate_d2>
    eight();
 80018e0:	f7ff fed4 	bl	800168c <eight>
    my_delay();
 80018e4:	f7fe fd82 	bl	80003ec <my_delay>
    break;
 80018e8:	e00a      	b.n	8001900 <find_digit+0x1c0>
  case 9:
    blackout();
 80018ea:	f7ff fef7 	bl	80016dc <blackout>
    activate_d2();
 80018ee:	f7ff fdc9 	bl	8001484 <activate_d2>
    nine();
 80018f2:	f7ff fedf 	bl	80016b4 <nine>
    my_delay();
 80018f6:	f7fe fd79 	bl	80003ec <my_delay>
    break;
 80018fa:	e001      	b.n	8001900 <find_digit+0x1c0>
  default:// for case -1 so deactivates d2
    deactivate_d2();
 80018fc:	f7ff fdfa 	bl	80014f4 <deactivate_d2>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b09      	cmp	r3, #9
 8001904:	d85f      	bhi.n	80019c6 <find_digit+0x286>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	009a      	lsls	r2, r3, #2
 800190a:	4b68      	ldr	r3, [pc, #416]	; (8001aac <find_digit+0x36c>)
 800190c:	18d3      	adds	r3, r2, r3
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	469f      	mov	pc, r3
  }

  switch (d3) { //third digit
  case 0:
    blackout();
 8001912:	f7ff fee3 	bl	80016dc <blackout>
    activate_d3();
 8001916:	f7ff fdc3 	bl	80014a0 <activate_d3>
    zero();
 800191a:	f7ff fe17 	bl	800154c <zero>
    my_delay();
 800191e:	f7fe fd65 	bl	80003ec <my_delay>
    break;
 8001922:	e052      	b.n	80019ca <find_digit+0x28a>
  case 1:
    blackout();
 8001924:	f7ff feda 	bl	80016dc <blackout>
    activate_d3();
 8001928:	f7ff fdba 	bl	80014a0 <activate_d3>
    one();
 800192c:	f7ff fe22 	bl	8001574 <one>
    my_delay();
 8001930:	f7fe fd5c 	bl	80003ec <my_delay>
    break;
 8001934:	e049      	b.n	80019ca <find_digit+0x28a>
  case 2:
    blackout();
 8001936:	f7ff fed1 	bl	80016dc <blackout>
    activate_d3();
 800193a:	f7ff fdb1 	bl	80014a0 <activate_d3>
    two();
 800193e:	f7ff fe2d 	bl	800159c <two>
    my_delay();
 8001942:	f7fe fd53 	bl	80003ec <my_delay>
    break;
 8001946:	e040      	b.n	80019ca <find_digit+0x28a>
  case 3:
    blackout();
 8001948:	f7ff fec8 	bl	80016dc <blackout>
    activate_d3();
 800194c:	f7ff fda8 	bl	80014a0 <activate_d3>
    three();
 8001950:	f7ff fe38 	bl	80015c4 <three>
    my_delay();
 8001954:	f7fe fd4a 	bl	80003ec <my_delay>
    break;
 8001958:	e037      	b.n	80019ca <find_digit+0x28a>
  case 4:
    blackout();
 800195a:	f7ff febf 	bl	80016dc <blackout>
    activate_d3();
 800195e:	f7ff fd9f 	bl	80014a0 <activate_d3>
    four();
 8001962:	f7ff fe43 	bl	80015ec <four>
    my_delay();
 8001966:	f7fe fd41 	bl	80003ec <my_delay>
    break;
 800196a:	e02e      	b.n	80019ca <find_digit+0x28a>
  case 5:
    blackout();
 800196c:	f7ff feb6 	bl	80016dc <blackout>
    activate_d3();
 8001970:	f7ff fd96 	bl	80014a0 <activate_d3>
    five();
 8001974:	f7ff fe4e 	bl	8001614 <five>
    my_delay();
 8001978:	f7fe fd38 	bl	80003ec <my_delay>
    break;
 800197c:	e025      	b.n	80019ca <find_digit+0x28a>
  case 6:
    blackout();
 800197e:	f7ff fead 	bl	80016dc <blackout>
    activate_d3();
 8001982:	f7ff fd8d 	bl	80014a0 <activate_d3>
    six();
 8001986:	f7ff fe59 	bl	800163c <six>
    my_delay();
 800198a:	f7fe fd2f 	bl	80003ec <my_delay>
    break;
 800198e:	e01c      	b.n	80019ca <find_digit+0x28a>
  case 7:
    blackout();
 8001990:	f7ff fea4 	bl	80016dc <blackout>
    activate_d3();
 8001994:	f7ff fd84 	bl	80014a0 <activate_d3>
    seven();
 8001998:	f7ff fe64 	bl	8001664 <seven>
    my_delay();
 800199c:	f7fe fd26 	bl	80003ec <my_delay>
    break;
 80019a0:	e013      	b.n	80019ca <find_digit+0x28a>
  case 8:
    blackout();
 80019a2:	f7ff fe9b 	bl	80016dc <blackout>
    activate_d3();
 80019a6:	f7ff fd7b 	bl	80014a0 <activate_d3>
    eight();
 80019aa:	f7ff fe6f 	bl	800168c <eight>
    my_delay();
 80019ae:	f7fe fd1d 	bl	80003ec <my_delay>
    break;
 80019b2:	e00a      	b.n	80019ca <find_digit+0x28a>
  case 9:
    blackout();
 80019b4:	f7ff fe92 	bl	80016dc <blackout>
    activate_d3();
 80019b8:	f7ff fd72 	bl	80014a0 <activate_d3>
    nine();
 80019bc:	f7ff fe7a 	bl	80016b4 <nine>
    my_delay();
 80019c0:	f7fe fd14 	bl	80003ec <my_delay>
    break;
 80019c4:	e001      	b.n	80019ca <find_digit+0x28a>
  default:// for case -1 so deactivates d3
    deactivate_d3();
 80019c6:	f7ff fda3 	bl	8001510 <deactivate_d3>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	2b09      	cmp	r3, #9
 80019ce:	d85f      	bhi.n	8001a90 <find_digit+0x350>
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	009a      	lsls	r2, r3, #2
 80019d4:	4b36      	ldr	r3, [pc, #216]	; (8001ab0 <find_digit+0x370>)
 80019d6:	18d3      	adds	r3, r2, r3
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	469f      	mov	pc, r3
  }

  switch (d4) { //fourth digit
  case 0:
    blackout();
 80019dc:	f7ff fe7e 	bl	80016dc <blackout>
    activate_d4();
 80019e0:	f7ff fd6c 	bl	80014bc <activate_d4>
    zero();
 80019e4:	f7ff fdb2 	bl	800154c <zero>
    my_delay();
 80019e8:	f7fe fd00 	bl	80003ec <my_delay>

    break;
 80019ec:	e053      	b.n	8001a96 <find_digit+0x356>
  case 1:
    blackout();
 80019ee:	f7ff fe75 	bl	80016dc <blackout>
    activate_d4();
 80019f2:	f7ff fd63 	bl	80014bc <activate_d4>
    one();
 80019f6:	f7ff fdbd 	bl	8001574 <one>
    my_delay();
 80019fa:	f7fe fcf7 	bl	80003ec <my_delay>
    break;
 80019fe:	e04a      	b.n	8001a96 <find_digit+0x356>

  case 2:
    blackout();
 8001a00:	f7ff fe6c 	bl	80016dc <blackout>
    activate_d4();
 8001a04:	f7ff fd5a 	bl	80014bc <activate_d4>
    two();
 8001a08:	f7ff fdc8 	bl	800159c <two>
    my_delay();
 8001a0c:	f7fe fcee 	bl	80003ec <my_delay>

    break;
 8001a10:	e041      	b.n	8001a96 <find_digit+0x356>
  case 3:
    blackout();
 8001a12:	f7ff fe63 	bl	80016dc <blackout>
    activate_d4();
 8001a16:	f7ff fd51 	bl	80014bc <activate_d4>
    three();
 8001a1a:	f7ff fdd3 	bl	80015c4 <three>
    my_delay();
 8001a1e:	f7fe fce5 	bl	80003ec <my_delay>

    break;
 8001a22:	e038      	b.n	8001a96 <find_digit+0x356>
  case 4:
    blackout();
 8001a24:	f7ff fe5a 	bl	80016dc <blackout>
    activate_d4();
 8001a28:	f7ff fd48 	bl	80014bc <activate_d4>
    four();
 8001a2c:	f7ff fdde 	bl	80015ec <four>
    my_delay();
 8001a30:	f7fe fcdc 	bl	80003ec <my_delay>

    break;
 8001a34:	e02f      	b.n	8001a96 <find_digit+0x356>
  case 5:
    blackout();
 8001a36:	f7ff fe51 	bl	80016dc <blackout>
    activate_d4();
 8001a3a:	f7ff fd3f 	bl	80014bc <activate_d4>
    five();
 8001a3e:	f7ff fde9 	bl	8001614 <five>
    my_delay();
 8001a42:	f7fe fcd3 	bl	80003ec <my_delay>

    break;
 8001a46:	e026      	b.n	8001a96 <find_digit+0x356>
  case 6:
    blackout();
 8001a48:	f7ff fe48 	bl	80016dc <blackout>
    activate_d4();
 8001a4c:	f7ff fd36 	bl	80014bc <activate_d4>
    six();
 8001a50:	f7ff fdf4 	bl	800163c <six>
    my_delay();
 8001a54:	f7fe fcca 	bl	80003ec <my_delay>

    break;
 8001a58:	e01d      	b.n	8001a96 <find_digit+0x356>
  case 7:
    blackout();
 8001a5a:	f7ff fe3f 	bl	80016dc <blackout>
    activate_d4();
 8001a5e:	f7ff fd2d 	bl	80014bc <activate_d4>
    seven();
 8001a62:	f7ff fdff 	bl	8001664 <seven>
    my_delay();
 8001a66:	f7fe fcc1 	bl	80003ec <my_delay>

    break;
 8001a6a:	e014      	b.n	8001a96 <find_digit+0x356>
  case 8:
    blackout();
 8001a6c:	f7ff fe36 	bl	80016dc <blackout>
    activate_d4();
 8001a70:	f7ff fd24 	bl	80014bc <activate_d4>
    eight();
 8001a74:	f7ff fe0a 	bl	800168c <eight>
    my_delay();
 8001a78:	f7fe fcb8 	bl	80003ec <my_delay>

    break;
 8001a7c:	e00b      	b.n	8001a96 <find_digit+0x356>
  case 9:
    blackout();
 8001a7e:	f7ff fe2d 	bl	80016dc <blackout>
    activate_d4();
 8001a82:	f7ff fd1b 	bl	80014bc <activate_d4>
    nine();
 8001a86:	f7ff fe15 	bl	80016b4 <nine>
    my_delay();
 8001a8a:	f7fe fcaf 	bl	80003ec <my_delay>

    break;
 8001a8e:	e002      	b.n	8001a96 <find_digit+0x356>
  default:// for case -1 so deactivates d4
    deactivate_d4();
 8001a90:	f7ff fd4e 	bl	8001530 <deactivate_d4>
  }
}
 8001a94:	46c0      	nop			; (mov r8, r8)
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	b004      	add	sp, #16
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	08002538 	.word	0x08002538
 8001aa4:	fffff7ff 	.word	0xfffff7ff
 8001aa8:	08002564 	.word	0x08002564
 8001aac:	0800258c 	.word	0x0800258c
 8001ab0:	080025b4 	.word	0x080025b4

08001ab4 <display_mode>:
      my_delay();
    }
  }
}

void display_mode(int mode){
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]

	if(mode==1){
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d102      	bne.n	8001ac8 <display_mode+0x14>

		display_sine();
 8001ac2:	f000 f86f 	bl	8001ba4 <display_sine>
		display_digi();
	}
	else{
		display_invalid();

}}
 8001ac6:	e01f      	b.n	8001b08 <display_mode+0x54>
	else if(mode==2){
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d102      	bne.n	8001ad4 <display_mode+0x20>
		display_sqre();
 8001ace:	f000 f8f3 	bl	8001cb8 <display_sqre>
}}
 8001ad2:	e019      	b.n	8001b08 <display_mode+0x54>
	else if(mode==3){
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b03      	cmp	r3, #3
 8001ad8:	d102      	bne.n	8001ae0 <display_mode+0x2c>
		display_tria();
 8001ada:	f000 f8a3 	bl	8001c24 <display_tria>
}}
 8001ade:	e013      	b.n	8001b08 <display_mode+0x54>
	else if(mode==4){
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d102      	bne.n	8001aec <display_mode+0x38>
		display_toth();
 8001ae6:	f000 f931 	bl	8001d4c <display_toth>
}}
 8001aea:	e00d      	b.n	8001b08 <display_mode+0x54>
	else if(mode==5){
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b05      	cmp	r3, #5
 8001af0:	d102      	bne.n	8001af8 <display_mode+0x44>
		display_gaus();
 8001af2:	f000 f9a7 	bl	8001e44 <display_gaus>
}}
 8001af6:	e007      	b.n	8001b08 <display_mode+0x54>
	else if(mode==6){
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b06      	cmp	r3, #6
 8001afc:	d102      	bne.n	8001b04 <display_mode+0x50>
		display_digi();
 8001afe:	f000 f96d 	bl	8001ddc <display_digi>
}}
 8001b02:	e001      	b.n	8001b08 <display_mode+0x54>
		display_invalid();
 8001b04:	f000 f804 	bl	8001b10 <display_invalid>
}}
 8001b08:	46c0      	nop			; (mov r8, r8)
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	b002      	add	sp, #8
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <display_invalid>:


void display_invalid() { //function that displays InVd for few at the screen when an overflow happens
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
  volatile uint32_t x;

    blackout();
 8001b16:	f7ff fde1 	bl	80016dc <blackout>
    activate_d1();
 8001b1a:	f7ff fca5 	bl	8001468 <activate_d1>
    one(); // I
 8001b1e:	f7ff fd29 	bl	8001574 <one>
    my_delay();
 8001b22:	f7fe fc63 	bl	80003ec <my_delay>
    blackout();
 8001b26:	f7ff fdd9 	bl	80016dc <blackout>
    activate_d2();
 8001b2a:	f7ff fcab 	bl	8001484 <activate_d2>
    x = 0x1802; // 0001 1000 0000 0010 N 1 11 12
 8001b2e:	4b1a      	ldr	r3, [pc, #104]	; (8001b98 <display_invalid+0x88>)
 8001b30:	607b      	str	r3, [r7, #4]
    GPIOA -> ODR &= ~(x);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	43da      	mvns	r2, r3
 8001b36:	23a0      	movs	r3, #160	; 0xa0
 8001b38:	05db      	lsls	r3, r3, #23
 8001b3a:	6959      	ldr	r1, [r3, #20]
 8001b3c:	23a0      	movs	r3, #160	; 0xa0
 8001b3e:	05db      	lsls	r3, r3, #23
 8001b40:	400a      	ands	r2, r1
 8001b42:	615a      	str	r2, [r3, #20]
    my_delay();
 8001b44:	f7fe fc52 	bl	80003ec <my_delay>
    blackout();
 8001b48:	f7ff fdc8 	bl	80016dc <blackout>
    activate_d3();
 8001b4c:	f7ff fca8 	bl	80014a0 <activate_d3>
    x = 0x10D2; //0001 0000 1101 0010 U
 8001b50:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <display_invalid+0x8c>)
 8001b52:	607b      	str	r3, [r7, #4]
    GPIOA -> ODR &= ~(x);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	43da      	mvns	r2, r3
 8001b58:	23a0      	movs	r3, #160	; 0xa0
 8001b5a:	05db      	lsls	r3, r3, #23
 8001b5c:	6959      	ldr	r1, [r3, #20]
 8001b5e:	23a0      	movs	r3, #160	; 0xa0
 8001b60:	05db      	lsls	r3, r3, #23
 8001b62:	400a      	ands	r2, r1
 8001b64:	615a      	str	r2, [r3, #20]
    my_delay();
 8001b66:	f7fe fc41 	bl	80003ec <my_delay>
    blackout();
 8001b6a:	f7ff fdb7 	bl	80016dc <blackout>
    activate_d4();
 8001b6e:	f7ff fca5 	bl	80014bc <activate_d4>
    x = 0x1892; //0000 0000 0101 0010 d
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <display_invalid+0x90>)
 8001b74:	607b      	str	r3, [r7, #4]
    GPIOA -> ODR &= ~(x);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	43da      	mvns	r2, r3
 8001b7a:	23a0      	movs	r3, #160	; 0xa0
 8001b7c:	05db      	lsls	r3, r3, #23
 8001b7e:	6959      	ldr	r1, [r3, #20]
 8001b80:	23a0      	movs	r3, #160	; 0xa0
 8001b82:	05db      	lsls	r3, r3, #23
 8001b84:	400a      	ands	r2, r1
 8001b86:	615a      	str	r2, [r3, #20]
    my_delay();
 8001b88:	f7fe fc30 	bl	80003ec <my_delay>
    blackout();
 8001b8c:	f7ff fda6 	bl	80016dc <blackout>
}
 8001b90:	46c0      	nop			; (mov r8, r8)
 8001b92:	46bd      	mov	sp, r7
 8001b94:	b002      	add	sp, #8
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	00001802 	.word	0x00001802
 8001b9c:	000010d2 	.word	0x000010d2
 8001ba0:	00001892 	.word	0x00001892

08001ba4 <display_sine>:

void display_sine(){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
	volatile uint32_t x;


	blackout();
 8001baa:	f7ff fd97 	bl	80016dc <blackout>
	activate_d1();
 8001bae:	f7ff fc5b 	bl	8001468 <activate_d1>
	five(); // 5
 8001bb2:	f7ff fd2f 	bl	8001614 <five>
	my_delay();
 8001bb6:	f7fe fc19 	bl	80003ec <my_delay>
	blackout();
 8001bba:	f7ff fd8f 	bl	80016dc <blackout>
	activate_d2();
 8001bbe:	f7ff fc61 	bl	8001484 <activate_d2>
	one(); // I
 8001bc2:	f7ff fcd7 	bl	8001574 <one>
	my_delay();
 8001bc6:	f7fe fc11 	bl	80003ec <my_delay>
	blackout();
 8001bca:	f7ff fd87 	bl	80016dc <blackout>
	activate_d3();
 8001bce:	f7ff fc67 	bl	80014a0 <activate_d3>
	x = 0x1802; // 0001 1000 0000 0010 N 1 11 12
 8001bd2:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <display_sine+0x78>)
 8001bd4:	607b      	str	r3, [r7, #4]
   GPIOA -> ODR &= ~(x);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	43da      	mvns	r2, r3
 8001bda:	23a0      	movs	r3, #160	; 0xa0
 8001bdc:	05db      	lsls	r3, r3, #23
 8001bde:	6959      	ldr	r1, [r3, #20]
 8001be0:	23a0      	movs	r3, #160	; 0xa0
 8001be2:	05db      	lsls	r3, r3, #23
 8001be4:	400a      	ands	r2, r1
 8001be6:	615a      	str	r2, [r3, #20]
   my_delay();
 8001be8:	f7fe fc00 	bl	80003ec <my_delay>
   blackout();
 8001bec:	f7ff fd76 	bl	80016dc <blackout>
   activate_d4();
 8001bf0:	f7ff fc64 	bl	80014bc <activate_d4>
   x = 0x952; //0000 0000 0101 0010 d
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <display_sine+0x7c>)
 8001bf6:	607b      	str	r3, [r7, #4]
   GPIOA -> ODR &= ~(x);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	23a0      	movs	r3, #160	; 0xa0
 8001bfe:	05db      	lsls	r3, r3, #23
 8001c00:	6959      	ldr	r1, [r3, #20]
 8001c02:	23a0      	movs	r3, #160	; 0xa0
 8001c04:	05db      	lsls	r3, r3, #23
 8001c06:	400a      	ands	r2, r1
 8001c08:	615a      	str	r2, [r3, #20]
   my_delay();
 8001c0a:	f7fe fbef 	bl	80003ec <my_delay>
   blackout();
 8001c0e:	f7ff fd65 	bl	80016dc <blackout>
}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	46bd      	mov	sp, r7
 8001c16:	b002      	add	sp, #8
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	00001802 	.word	0x00001802
 8001c20:	00000952 	.word	0x00000952

08001c24 <display_tria>:
void display_tria(){
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
	volatile uint32_t x;


	blackout();
 8001c2a:	f7ff fd57 	bl	80016dc <blackout>
	activate_d1();
 8001c2e:	f7ff fc1b 	bl	8001468 <activate_d1>
	x = 0x1902; //T
 8001c32:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <display_tria+0x88>)
 8001c34:	607b      	str	r3, [r7, #4]
	GPIOA -> ODR &= ~(x);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	43da      	mvns	r2, r3
 8001c3a:	23a0      	movs	r3, #160	; 0xa0
 8001c3c:	05db      	lsls	r3, r3, #23
 8001c3e:	6959      	ldr	r1, [r3, #20]
 8001c40:	23a0      	movs	r3, #160	; 0xa0
 8001c42:	05db      	lsls	r3, r3, #23
 8001c44:	400a      	ands	r2, r1
 8001c46:	615a      	str	r2, [r3, #20]
	my_delay();
 8001c48:	f7fe fbd0 	bl	80003ec <my_delay>
	blackout();
 8001c4c:	f7ff fd46 	bl	80016dc <blackout>
	activate_d2();
 8001c50:	f7ff fc18 	bl	8001484 <activate_d2>
	x = 0x802; // R
 8001c54:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <display_tria+0x8c>)
 8001c56:	607b      	str	r3, [r7, #4]
	   GPIOA -> ODR &= ~(x);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	23a0      	movs	r3, #160	; 0xa0
 8001c5e:	05db      	lsls	r3, r3, #23
 8001c60:	6959      	ldr	r1, [r3, #20]
 8001c62:	23a0      	movs	r3, #160	; 0xa0
 8001c64:	05db      	lsls	r3, r3, #23
 8001c66:	400a      	ands	r2, r1
 8001c68:	615a      	str	r2, [r3, #20]
	my_delay();
 8001c6a:	f7fe fbbf 	bl	80003ec <my_delay>
blackout();
 8001c6e:	f7ff fd35 	bl	80016dc <blackout>
activate_d3();
 8001c72:	f7ff fc15 	bl	80014a0 <activate_d3>
one();
 8001c76:	f7ff fc7d 	bl	8001574 <one>
my_delay();
 8001c7a:	f7fe fbb7 	bl	80003ec <my_delay>
blackout();
 8001c7e:	f7ff fd2d 	bl	80016dc <blackout>
activate_d4();
 8001c82:	f7ff fc1b 	bl	80014bc <activate_d4>
x = 0x19C2; //A
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <display_tria+0x90>)
 8001c88:	607b      	str	r3, [r7, #4]
GPIOA -> ODR &= ~(x);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	43da      	mvns	r2, r3
 8001c8e:	23a0      	movs	r3, #160	; 0xa0
 8001c90:	05db      	lsls	r3, r3, #23
 8001c92:	6959      	ldr	r1, [r3, #20]
 8001c94:	23a0      	movs	r3, #160	; 0xa0
 8001c96:	05db      	lsls	r3, r3, #23
 8001c98:	400a      	ands	r2, r1
 8001c9a:	615a      	str	r2, [r3, #20]
my_delay();
 8001c9c:	f7fe fba6 	bl	80003ec <my_delay>
blackout();
 8001ca0:	f7ff fd1c 	bl	80016dc <blackout>
}
 8001ca4:	46c0      	nop			; (mov r8, r8)
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	b002      	add	sp, #8
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	00001902 	.word	0x00001902
 8001cb0:	00000802 	.word	0x00000802
 8001cb4:	000019c2 	.word	0x000019c2

08001cb8 <display_sqre>:

void display_sqre(){
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
	volatile uint32_t x;


	blackout();
 8001cbe:	f7ff fd0d 	bl	80016dc <blackout>
	activate_d1();
 8001cc2:	f7ff fbd1 	bl	8001468 <activate_d1>
	five();
 8001cc6:	f7ff fca5 	bl	8001614 <five>
	my_delay();
 8001cca:	f7fe fb8f 	bl	80003ec <my_delay>
	blackout();
 8001cce:	f7ff fd05 	bl	80016dc <blackout>
	activate_d2();
 8001cd2:	f7ff fbd7 	bl	8001484 <activate_d2>
	x = 0x19C0; // Q
 8001cd6:	23ce      	movs	r3, #206	; 0xce
 8001cd8:	015b      	lsls	r3, r3, #5
 8001cda:	607b      	str	r3, [r7, #4]
	   GPIOA -> ODR &= ~(x);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	23a0      	movs	r3, #160	; 0xa0
 8001ce2:	05db      	lsls	r3, r3, #23
 8001ce4:	6959      	ldr	r1, [r3, #20]
 8001ce6:	23a0      	movs	r3, #160	; 0xa0
 8001ce8:	05db      	lsls	r3, r3, #23
 8001cea:	400a      	ands	r2, r1
 8001cec:	615a      	str	r2, [r3, #20]
	my_delay();
 8001cee:	f7fe fb7d 	bl	80003ec <my_delay>
blackout();
 8001cf2:	f7ff fcf3 	bl	80016dc <blackout>
activate_d3();
 8001cf6:	f7ff fbd3 	bl	80014a0 <activate_d3>
x = 0x802; // R
 8001cfa:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <display_sqre+0x8c>)
 8001cfc:	607b      	str	r3, [r7, #4]
	   GPIOA -> ODR &= ~(x);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	43da      	mvns	r2, r3
 8001d02:	23a0      	movs	r3, #160	; 0xa0
 8001d04:	05db      	lsls	r3, r3, #23
 8001d06:	6959      	ldr	r1, [r3, #20]
 8001d08:	23a0      	movs	r3, #160	; 0xa0
 8001d0a:	05db      	lsls	r3, r3, #23
 8001d0c:	400a      	ands	r2, r1
 8001d0e:	615a      	str	r2, [r3, #20]
my_delay();
 8001d10:	f7fe fb6c 	bl	80003ec <my_delay>
blackout();
 8001d14:	f7ff fce2 	bl	80016dc <blackout>
activate_d4();
 8001d18:	f7ff fbd0 	bl	80014bc <activate_d4>
x = 0x952; //E
 8001d1c:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <display_sqre+0x90>)
 8001d1e:	607b      	str	r3, [r7, #4]
GPIOA -> ODR &= ~(x);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	43da      	mvns	r2, r3
 8001d24:	23a0      	movs	r3, #160	; 0xa0
 8001d26:	05db      	lsls	r3, r3, #23
 8001d28:	6959      	ldr	r1, [r3, #20]
 8001d2a:	23a0      	movs	r3, #160	; 0xa0
 8001d2c:	05db      	lsls	r3, r3, #23
 8001d2e:	400a      	ands	r2, r1
 8001d30:	615a      	str	r2, [r3, #20]
my_delay();
 8001d32:	f7fe fb5b 	bl	80003ec <my_delay>
blackout();
 8001d36:	f7ff fcd1 	bl	80016dc <blackout>
}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	b002      	add	sp, #8
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	00000802 	.word	0x00000802
 8001d48:	00000952 	.word	0x00000952

08001d4c <display_toth>:

void display_toth(){
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
	volatile uint32_t x;


	blackout();
 8001d52:	f7ff fcc3 	bl	80016dc <blackout>
	activate_d1();
 8001d56:	f7ff fb87 	bl	8001468 <activate_d1>
	x = 0x1902; //T
 8001d5a:	4b1e      	ldr	r3, [pc, #120]	; (8001dd4 <display_toth+0x88>)
 8001d5c:	607b      	str	r3, [r7, #4]
		GPIOA -> ODR &= ~(x);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	43da      	mvns	r2, r3
 8001d62:	23a0      	movs	r3, #160	; 0xa0
 8001d64:	05db      	lsls	r3, r3, #23
 8001d66:	6959      	ldr	r1, [r3, #20]
 8001d68:	23a0      	movs	r3, #160	; 0xa0
 8001d6a:	05db      	lsls	r3, r3, #23
 8001d6c:	400a      	ands	r2, r1
 8001d6e:	615a      	str	r2, [r3, #20]
	my_delay();
 8001d70:	f7fe fb3c 	bl	80003ec <my_delay>
	blackout();
 8001d74:	f7ff fcb2 	bl	80016dc <blackout>
	activate_d2();
 8001d78:	f7ff fb84 	bl	8001484 <activate_d2>
	zero();
 8001d7c:	f7ff fbe6 	bl	800154c <zero>
	my_delay();
 8001d80:	f7fe fb34 	bl	80003ec <my_delay>
blackout();
 8001d84:	f7ff fcaa 	bl	80016dc <blackout>
activate_d3();
 8001d88:	f7ff fb8a 	bl	80014a0 <activate_d3>
x = 0x1902; //T
 8001d8c:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <display_toth+0x88>)
 8001d8e:	607b      	str	r3, [r7, #4]
	GPIOA -> ODR &= ~(x);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	43da      	mvns	r2, r3
 8001d94:	23a0      	movs	r3, #160	; 0xa0
 8001d96:	05db      	lsls	r3, r3, #23
 8001d98:	6959      	ldr	r1, [r3, #20]
 8001d9a:	23a0      	movs	r3, #160	; 0xa0
 8001d9c:	05db      	lsls	r3, r3, #23
 8001d9e:	400a      	ands	r2, r1
 8001da0:	615a      	str	r2, [r3, #20]
my_delay();
 8001da2:	f7fe fb23 	bl	80003ec <my_delay>
blackout();
 8001da6:	f7ff fc99 	bl	80016dc <blackout>
activate_d4();
 8001daa:	f7ff fb87 	bl	80014bc <activate_d4>
x = 0x18C2; //h
 8001dae:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <display_toth+0x8c>)
 8001db0:	607b      	str	r3, [r7, #4]
GPIOA -> ODR &= ~(x);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	43da      	mvns	r2, r3
 8001db6:	23a0      	movs	r3, #160	; 0xa0
 8001db8:	05db      	lsls	r3, r3, #23
 8001dba:	6959      	ldr	r1, [r3, #20]
 8001dbc:	23a0      	movs	r3, #160	; 0xa0
 8001dbe:	05db      	lsls	r3, r3, #23
 8001dc0:	400a      	ands	r2, r1
 8001dc2:	615a      	str	r2, [r3, #20]
my_delay();
 8001dc4:	f7fe fb12 	bl	80003ec <my_delay>
blackout();
 8001dc8:	f7ff fc88 	bl	80016dc <blackout>
}
 8001dcc:	46c0      	nop			; (mov r8, r8)
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b002      	add	sp, #8
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	00001902 	.word	0x00001902
 8001dd8:	000018c2 	.word	0x000018c2

08001ddc <display_digi>:

void display_digi(){
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
	volatile uint32_t x;


	blackout();
 8001de2:	f7ff fc7b 	bl	80016dc <blackout>
	activate_d1();
 8001de6:	f7ff fb3f 	bl	8001468 <activate_d1>
    x = 0x1892; //0000 0000 0101 0010 d
 8001dea:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <display_digi+0x64>)
 8001dec:	607b      	str	r3, [r7, #4]
    GPIOA -> ODR &= ~(x);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	43da      	mvns	r2, r3
 8001df2:	23a0      	movs	r3, #160	; 0xa0
 8001df4:	05db      	lsls	r3, r3, #23
 8001df6:	6959      	ldr	r1, [r3, #20]
 8001df8:	23a0      	movs	r3, #160	; 0xa0
 8001dfa:	05db      	lsls	r3, r3, #23
 8001dfc:	400a      	ands	r2, r1
 8001dfe:	615a      	str	r2, [r3, #20]
	my_delay();
 8001e00:	f7fe faf4 	bl	80003ec <my_delay>
	blackout();
 8001e04:	f7ff fc6a 	bl	80016dc <blackout>
	activate_d2();
 8001e08:	f7ff fb3c 	bl	8001484 <activate_d2>
	one();
 8001e0c:	f7ff fbb2 	bl	8001574 <one>
	my_delay();
 8001e10:	f7fe faec 	bl	80003ec <my_delay>
blackout();
 8001e14:	f7ff fc62 	bl	80016dc <blackout>
activate_d3();
 8001e18:	f7ff fb42 	bl	80014a0 <activate_d3>
six();
 8001e1c:	f7ff fc0e 	bl	800163c <six>
my_delay();
 8001e20:	f7fe fae4 	bl	80003ec <my_delay>
blackout();
 8001e24:	f7ff fc5a 	bl	80016dc <blackout>
activate_d4();
 8001e28:	f7ff fb48 	bl	80014bc <activate_d4>
one();
 8001e2c:	f7ff fba2 	bl	8001574 <one>
my_delay();
 8001e30:	f7fe fadc 	bl	80003ec <my_delay>
blackout();
 8001e34:	f7ff fc52 	bl	80016dc <blackout>
}
 8001e38:	46c0      	nop			; (mov r8, r8)
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	b002      	add	sp, #8
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	00001892 	.word	0x00001892

08001e44 <display_gaus>:


void display_gaus(){
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
	volatile uint32_t x;


	blackout();
 8001e4a:	f7ff fc47 	bl	80016dc <blackout>
	activate_d1();
 8001e4e:	f7ff fb0b 	bl	8001468 <activate_d1>
six();
 8001e52:	f7ff fbf3 	bl	800163c <six>
	my_delay();
 8001e56:	f7fe fac9 	bl	80003ec <my_delay>
	blackout();
 8001e5a:	f7ff fc3f 	bl	80016dc <blackout>
	activate_d2();
 8001e5e:	f7ff fb11 	bl	8001484 <activate_d2>
	x = 0x19C2; //A
 8001e62:	4b16      	ldr	r3, [pc, #88]	; (8001ebc <display_gaus+0x78>)
 8001e64:	607b      	str	r3, [r7, #4]
	GPIOA -> ODR &= ~(x);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	43da      	mvns	r2, r3
 8001e6a:	23a0      	movs	r3, #160	; 0xa0
 8001e6c:	05db      	lsls	r3, r3, #23
 8001e6e:	6959      	ldr	r1, [r3, #20]
 8001e70:	23a0      	movs	r3, #160	; 0xa0
 8001e72:	05db      	lsls	r3, r3, #23
 8001e74:	400a      	ands	r2, r1
 8001e76:	615a      	str	r2, [r3, #20]
	my_delay();
 8001e78:	f7fe fab8 	bl	80003ec <my_delay>
blackout();
 8001e7c:	f7ff fc2e 	bl	80016dc <blackout>
activate_d3();
 8001e80:	f7ff fb0e 	bl	80014a0 <activate_d3>
x = 0x10D2; //0001 0000 1101 0010 U
 8001e84:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <display_gaus+0x7c>)
 8001e86:	607b      	str	r3, [r7, #4]
GPIOA -> ODR &= ~(x);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	23a0      	movs	r3, #160	; 0xa0
 8001e8e:	05db      	lsls	r3, r3, #23
 8001e90:	6959      	ldr	r1, [r3, #20]
 8001e92:	23a0      	movs	r3, #160	; 0xa0
 8001e94:	05db      	lsls	r3, r3, #23
 8001e96:	400a      	ands	r2, r1
 8001e98:	615a      	str	r2, [r3, #20]
my_delay();
 8001e9a:	f7fe faa7 	bl	80003ec <my_delay>
blackout();
 8001e9e:	f7ff fc1d 	bl	80016dc <blackout>
activate_d4();
 8001ea2:	f7ff fb0b 	bl	80014bc <activate_d4>
five();
 8001ea6:	f7ff fbb5 	bl	8001614 <five>
my_delay();
 8001eaa:	f7fe fa9f 	bl	80003ec <my_delay>
blackout();
 8001eae:	f7ff fc15 	bl	80016dc <blackout>
}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	b002      	add	sp, #8
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	000019c2 	.word	0x000019c2
 8001ec0:	000010d2 	.word	0x000010d2

08001ec4 <PWM_init>:

void PWM_init(void) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
 RCC -> IOPENR |= (2U << 0); // B open
 8001ec8:	4b5f      	ldr	r3, [pc, #380]	; (8002048 <PWM_init+0x184>)
 8001eca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ecc:	4b5e      	ldr	r3, [pc, #376]	; (8002048 <PWM_init+0x184>)
 8001ece:	2102      	movs	r1, #2
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	635a      	str	r2, [r3, #52]	; 0x34
 RCC -> PLLCFGR |= (2U << 0); //hsı16
 8001ed4:	4b5c      	ldr	r3, [pc, #368]	; (8002048 <PWM_init+0x184>)
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	4b5b      	ldr	r3, [pc, #364]	; (8002048 <PWM_init+0x184>)
 8001eda:	2102      	movs	r1, #2
 8001edc:	430a      	orrs	r2, r1
 8001ede:	60da      	str	r2, [r3, #12]
 RCC -> PLLCFGR |= (1U << 24); // set q n r constant
 8001ee0:	4b59      	ldr	r3, [pc, #356]	; (8002048 <PWM_init+0x184>)
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	4b58      	ldr	r3, [pc, #352]	; (8002048 <PWM_init+0x184>)
 8001ee6:	2180      	movs	r1, #128	; 0x80
 8001ee8:	0449      	lsls	r1, r1, #17
 8001eea:	430a      	orrs	r2, r1
 8001eec:	60da      	str	r2, [r3, #12]
 RCC -> PLLCFGR |= (1U << 25);// SETQ
 8001eee:	4b56      	ldr	r3, [pc, #344]	; (8002048 <PWM_init+0x184>)
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	4b55      	ldr	r3, [pc, #340]	; (8002048 <PWM_init+0x184>)
 8001ef4:	2180      	movs	r1, #128	; 0x80
 8001ef6:	0489      	lsls	r1, r1, #18
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	60da      	str	r2, [r3, #12]
 RCC -> PLLCFGR |= (1U << 28);//ENABLE N
 8001efc:	4b52      	ldr	r3, [pc, #328]	; (8002048 <PWM_init+0x184>)
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	4b51      	ldr	r3, [pc, #324]	; (8002048 <PWM_init+0x184>)
 8001f02:	2180      	movs	r1, #128	; 0x80
 8001f04:	0549      	lsls	r1, r1, #21
 8001f06:	430a      	orrs	r2, r1
 8001f08:	60da      	str	r2, [r3, #12]
 RCC -> PLLCFGR |= (1U << 29);// SET N
 8001f0a:	4b4f      	ldr	r3, [pc, #316]	; (8002048 <PWM_init+0x184>)
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	4b4e      	ldr	r3, [pc, #312]	; (8002048 <PWM_init+0x184>)
 8001f10:	2180      	movs	r1, #128	; 0x80
 8001f12:	0589      	lsls	r1, r1, #22
 8001f14:	430a      	orrs	r2, r1
 8001f16:	60da      	str	r2, [r3, #12]
 RCC -> PLLCFGR &= ~(7U << 4);
 8001f18:	4b4b      	ldr	r3, [pc, #300]	; (8002048 <PWM_init+0x184>)
 8001f1a:	68da      	ldr	r2, [r3, #12]
 8001f1c:	4b4a      	ldr	r3, [pc, #296]	; (8002048 <PWM_init+0x184>)
 8001f1e:	2170      	movs	r1, #112	; 0x70
 8001f20:	438a      	bics	r2, r1
 8001f22:	60da      	str	r2, [r3, #12]
 RCC -> PLLCFGR &= ~(127U << 8);
 8001f24:	4b48      	ldr	r3, [pc, #288]	; (8002048 <PWM_init+0x184>)
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	4b47      	ldr	r3, [pc, #284]	; (8002048 <PWM_init+0x184>)
 8001f2a:	4948      	ldr	r1, [pc, #288]	; (800204c <PWM_init+0x188>)
 8001f2c:	400a      	ands	r2, r1
 8001f2e:	60da      	str	r2, [r3, #12]
 RCC -> PLLCFGR |= (8U << 8);//SET R
 8001f30:	4b45      	ldr	r3, [pc, #276]	; (8002048 <PWM_init+0x184>)
 8001f32:	68da      	ldr	r2, [r3, #12]
 8001f34:	4b44      	ldr	r3, [pc, #272]	; (8002048 <PWM_init+0x184>)
 8001f36:	2180      	movs	r1, #128	; 0x80
 8001f38:	0109      	lsls	r1, r1, #4
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	60da      	str	r2, [r3, #12]
 GPIOB -> MODER &= ~(3U << 2 * 3);
 8001f3e:	4b44      	ldr	r3, [pc, #272]	; (8002050 <PWM_init+0x18c>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	4b43      	ldr	r3, [pc, #268]	; (8002050 <PWM_init+0x18c>)
 8001f44:	21c0      	movs	r1, #192	; 0xc0
 8001f46:	438a      	bics	r2, r1
 8001f48:	601a      	str	r2, [r3, #0]
 GPIOB -> MODER |= (2U << 2 * 3); // making pb3 alterna mode
 8001f4a:	4b41      	ldr	r3, [pc, #260]	; (8002050 <PWM_init+0x18c>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	4b40      	ldr	r3, [pc, #256]	; (8002050 <PWM_init+0x18c>)
 8001f50:	2180      	movs	r1, #128	; 0x80
 8001f52:	430a      	orrs	r2, r1
 8001f54:	601a      	str	r2, [r3, #0]
 // PB3 AF2 timer2 chanel 2
 GPIOB -> AFR[0] &= ~(0xFU << 4 * 3);
 8001f56:	4b3e      	ldr	r3, [pc, #248]	; (8002050 <PWM_init+0x18c>)
 8001f58:	6a1a      	ldr	r2, [r3, #32]
 8001f5a:	4b3d      	ldr	r3, [pc, #244]	; (8002050 <PWM_init+0x18c>)
 8001f5c:	493d      	ldr	r1, [pc, #244]	; (8002054 <PWM_init+0x190>)
 8001f5e:	400a      	ands	r2, r1
 8001f60:	621a      	str	r2, [r3, #32]
 GPIOB -> AFR[0] |= (2U << 4 * 3); // AFSEL11 to AF2 0010
 8001f62:	4b3b      	ldr	r3, [pc, #236]	; (8002050 <PWM_init+0x18c>)
 8001f64:	6a1a      	ldr	r2, [r3, #32]
 8001f66:	4b3a      	ldr	r3, [pc, #232]	; (8002050 <PWM_init+0x18c>)
 8001f68:	2180      	movs	r1, #128	; 0x80
 8001f6a:	0189      	lsls	r1, r1, #6
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	621a      	str	r2, [r3, #32]
 RCC -> APBENR1 |= (1U << 0); //timer 2 clock open
 8001f70:	4b35      	ldr	r3, [pc, #212]	; (8002048 <PWM_init+0x184>)
 8001f72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f74:	4b34      	ldr	r3, [pc, #208]	; (8002048 <PWM_init+0x184>)
 8001f76:	2101      	movs	r1, #1
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	63da      	str	r2, [r3, #60]	; 0x3c
 TIM2 -> CR1 = 0; // reset
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	05db      	lsls	r3, r3, #23
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 TIM2 -> CR1 |= (1U << 7); //arpe
 8001f84:	2380      	movs	r3, #128	; 0x80
 8001f86:	05db      	lsls	r3, r3, #23
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	2380      	movs	r3, #128	; 0x80
 8001f8c:	05db      	lsls	r3, r3, #23
 8001f8e:	2180      	movs	r1, #128	; 0x80
 8001f90:	430a      	orrs	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]
 TIM2 -> PSC = 0; // set zero
 8001f94:	2380      	movs	r3, #128	; 0x80
 8001f96:	05db      	lsls	r3, r3, #23
 8001f98:	2200      	movs	r2, #0
 8001f9a:	629a      	str	r2, [r3, #40]	; 0x28
 TIM2 -> ARR =64;
 8001f9c:	2380      	movs	r3, #128	; 0x80
 8001f9e:	05db      	lsls	r3, r3, #23
 8001fa0:	2240      	movs	r2, #64	; 0x40
 8001fa2:	62da      	str	r2, [r3, #44]	; 0x2c
 TIM2 -> DIER |= (1U << 0);
 8001fa4:	2380      	movs	r3, #128	; 0x80
 8001fa6:	05db      	lsls	r3, r3, #23
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	05db      	lsls	r3, r3, #23
 8001fae:	2101      	movs	r1, #1
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	60da      	str	r2, [r3, #12]
 TIM2 -> CNT = 4294967295; //max value
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	05db      	lsls	r3, r3, #23
 8001fb8:	2201      	movs	r2, #1
 8001fba:	4252      	negs	r2, r2
 8001fbc:	625a      	str	r2, [r3, #36]	; 0x24
 TIM2 -> CCMR1 &= ~(0x7U << 12); // clear
 8001fbe:	2380      	movs	r3, #128	; 0x80
 8001fc0:	05db      	lsls	r3, r3, #23
 8001fc2:	699a      	ldr	r2, [r3, #24]
 8001fc4:	2380      	movs	r3, #128	; 0x80
 8001fc6:	05db      	lsls	r3, r3, #23
 8001fc8:	4923      	ldr	r1, [pc, #140]	; (8002058 <PWM_init+0x194>)
 8001fca:	400a      	ands	r2, r1
 8001fcc:	619a      	str	r2, [r3, #24]
 TIM2 -> CCMR1 &= ~(0x1U << 24); // clean
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	05db      	lsls	r3, r3, #23
 8001fd2:	699a      	ldr	r2, [r3, #24]
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	05db      	lsls	r3, r3, #23
 8001fd8:	4920      	ldr	r1, [pc, #128]	; (800205c <PWM_init+0x198>)
 8001fda:	400a      	ands	r2, r1
 8001fdc:	619a      	str	r2, [r3, #24]
 TIM2 -> CCMR1 |= (0x6U << 12); //0110
 8001fde:	2380      	movs	r3, #128	; 0x80
 8001fe0:	05db      	lsls	r3, r3, #23
 8001fe2:	699a      	ldr	r2, [r3, #24]
 8001fe4:	2380      	movs	r3, #128	; 0x80
 8001fe6:	05db      	lsls	r3, r3, #23
 8001fe8:	21c0      	movs	r1, #192	; 0xc0
 8001fea:	01c9      	lsls	r1, r1, #7
 8001fec:	430a      	orrs	r2, r1
 8001fee:	619a      	str	r2, [r3, #24]
 TIM2 -> CCMR1 |= (1U << 11); //preload enable
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	05db      	lsls	r3, r3, #23
 8001ff4:	699a      	ldr	r2, [r3, #24]
 8001ff6:	2380      	movs	r3, #128	; 0x80
 8001ff8:	05db      	lsls	r3, r3, #23
 8001ffa:	2180      	movs	r1, #128	; 0x80
 8001ffc:	0109      	lsls	r1, r1, #4
 8001ffe:	430a      	orrs	r2, r1
 8002000:	619a      	str	r2, [r3, #24]
 TIM2 -> CCER |= (1U << 4); //cmpr2 enable
 8002002:	2380      	movs	r3, #128	; 0x80
 8002004:	05db      	lsls	r3, r3, #23
 8002006:	6a1a      	ldr	r2, [r3, #32]
 8002008:	2380      	movs	r3, #128	; 0x80
 800200a:	05db      	lsls	r3, r3, #23
 800200c:	2110      	movs	r1, #16
 800200e:	430a      	orrs	r2, r1
 8002010:	621a      	str	r2, [r3, #32]
 duty = 0;
 8002012:	4b13      	ldr	r3, [pc, #76]	; (8002060 <PWM_init+0x19c>)
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 TIM2 -> CCR2 = duty;
 8002018:	4b11      	ldr	r3, [pc, #68]	; (8002060 <PWM_init+0x19c>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	05db      	lsls	r3, r3, #23
 8002020:	639a      	str	r2, [r3, #56]	; 0x38
 TIM2 -> CR1 |= (1U << 0); //enable tim2
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	05db      	lsls	r3, r3, #23
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	2380      	movs	r3, #128	; 0x80
 800202a:	05db      	lsls	r3, r3, #23
 800202c:	2101      	movs	r1, #1
 800202e:	430a      	orrs	r2, r1
 8002030:	601a      	str	r2, [r3, #0]
 NVIC_SetPriority(TIM2_IRQn, 0); //setting priority and enabling
 8002032:	2100      	movs	r1, #0
 8002034:	200f      	movs	r0, #15
 8002036:	f7fe f87f 	bl	8000138 <__NVIC_SetPriority>
 NVIC_EnableIRQ(TIM2_IRQn);
 800203a:	200f      	movs	r0, #15
 800203c:	f7fe f862 	bl	8000104 <__NVIC_EnableIRQ>
}
 8002040:	46c0      	nop			; (mov r8, r8)
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	40021000 	.word	0x40021000
 800204c:	ffff80ff 	.word	0xffff80ff
 8002050:	50000400 	.word	0x50000400
 8002054:	ffff0fff 	.word	0xffff0fff
 8002058:	ffff8fff 	.word	0xffff8fff
 800205c:	feffffff 	.word	0xfeffffff
 8002060:	20000014 	.word	0x20000014

08002064 <init_timer1>:
void init_timer1() { // fs = 8kHz
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
 // Config Stars
 RCC -> APBENR2 |= (1U << 11);
 8002068:	4b24      	ldr	r3, [pc, #144]	; (80020fc <init_timer1+0x98>)
 800206a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800206c:	4b23      	ldr	r3, [pc, #140]	; (80020fc <init_timer1+0x98>)
 800206e:	2180      	movs	r1, #128	; 0x80
 8002070:	0109      	lsls	r1, r1, #4
 8002072:	430a      	orrs	r2, r1
 8002074:	641a      	str	r2, [r3, #64]	; 0x40
 TIM1 -> CR1 = 0;
 8002076:	4b22      	ldr	r3, [pc, #136]	; (8002100 <init_timer1+0x9c>)
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 TIM1 -> CR1 |= (1 << 7);
 800207c:	4b20      	ldr	r3, [pc, #128]	; (8002100 <init_timer1+0x9c>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b1f      	ldr	r3, [pc, #124]	; (8002100 <init_timer1+0x9c>)
 8002082:	2180      	movs	r1, #128	; 0x80
 8002084:	430a      	orrs	r2, r1
 8002086:	601a      	str	r2, [r3, #0]
 TIM1 -> CNT = 0;
 8002088:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <init_timer1+0x9c>)
 800208a:	2200      	movs	r2, #0
 800208c:	625a      	str	r2, [r3, #36]	; 0x24
 TIM1 -> PSC = 999;
 800208e:	4b1c      	ldr	r3, [pc, #112]	; (8002100 <init_timer1+0x9c>)
 8002090:	4a1c      	ldr	r2, [pc, #112]	; (8002104 <init_timer1+0xa0>)
 8002092:	629a      	str	r2, [r3, #40]	; 0x28
 freq[1]=2;
 8002094:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <init_timer1+0xa4>)
 8002096:	2202      	movs	r2, #2
 8002098:	605a      	str	r2, [r3, #4]
 TIM1 -> ARR = (freq[3]*1000+freq[2]*100+freq[1]*10+freq[0]); // arttırınca frekans düşer süre uzar
 800209a:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <init_timer1+0xa4>)
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	0013      	movs	r3, r2
 80020a0:	015b      	lsls	r3, r3, #5
 80020a2:	1a9b      	subs	r3, r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	189b      	adds	r3, r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	0019      	movs	r1, r3
 80020ac:	4b16      	ldr	r3, [pc, #88]	; (8002108 <init_timer1+0xa4>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	2264      	movs	r2, #100	; 0x64
 80020b2:	4353      	muls	r3, r2
 80020b4:	18c9      	adds	r1, r1, r3
 80020b6:	4b14      	ldr	r3, [pc, #80]	; (8002108 <init_timer1+0xa4>)
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	0013      	movs	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	189b      	adds	r3, r3, r2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	18ca      	adds	r2, r1, r3
 80020c4:	4b10      	ldr	r3, [pc, #64]	; (8002108 <init_timer1+0xa4>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	18d2      	adds	r2, r2, r3
 80020ca:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <init_timer1+0x9c>)
 80020cc:	62da      	str	r2, [r3, #44]	; 0x2c
 TIM1 -> DIER |= (1 << 0);
 80020ce:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <init_timer1+0x9c>)
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <init_timer1+0x9c>)
 80020d4:	2101      	movs	r1, #1
 80020d6:	430a      	orrs	r2, r1
 80020d8:	60da      	str	r2, [r3, #12]
 TIM1 -> CR1 |= (1 << 0);
 80020da:	4b09      	ldr	r3, [pc, #36]	; (8002100 <init_timer1+0x9c>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	4b08      	ldr	r3, [pc, #32]	; (8002100 <init_timer1+0x9c>)
 80020e0:	2101      	movs	r1, #1
 80020e2:	430a      	orrs	r2, r1
 80020e4:	601a      	str	r2, [r3, #0]
 NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0);
 80020e6:	2100      	movs	r1, #0
 80020e8:	200d      	movs	r0, #13
 80020ea:	f7fe f825 	bl	8000138 <__NVIC_SetPriority>
 NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80020ee:	200d      	movs	r0, #13
 80020f0:	f7fe f808 	bl	8000104 <__NVIC_EnableIRQ>
}
 80020f4:	46c0      	nop			; (mov r8, r8)
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	40021000 	.word	0x40021000
 8002100:	40012c00 	.word	0x40012c00
 8002104:	000003e7 	.word	0x000003e7
 8002108:	20000054 	.word	0x20000054

0800210c <mode_arranger>:
int counter =0 ;
int sayac =0;

void mode_arranger(){
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0

	if(mode==2){ ///square
 8002110:	4bb8      	ldr	r3, [pc, #736]	; (80023f4 <mode_arranger+0x2e8>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b02      	cmp	r3, #2
 8002116:	d12d      	bne.n	8002174 <mode_arranger+0x68>

		if(sayac==0){
 8002118:	4bb7      	ldr	r3, [pc, #732]	; (80023f8 <mode_arranger+0x2ec>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d11d      	bne.n	800215c <mode_arranger+0x50>
			duty=(amp[3]*1000+amp[2]*100+amp[1]*10+amp[0]); sayac=1;
 8002120:	4bb6      	ldr	r3, [pc, #728]	; (80023fc <mode_arranger+0x2f0>)
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	0013      	movs	r3, r2
 8002126:	015b      	lsls	r3, r3, #5
 8002128:	1a9b      	subs	r3, r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	189b      	adds	r3, r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	0019      	movs	r1, r3
 8002132:	4bb2      	ldr	r3, [pc, #712]	; (80023fc <mode_arranger+0x2f0>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2264      	movs	r2, #100	; 0x64
 8002138:	4353      	muls	r3, r2
 800213a:	18c9      	adds	r1, r1, r3
 800213c:	4baf      	ldr	r3, [pc, #700]	; (80023fc <mode_arranger+0x2f0>)
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	0013      	movs	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	189b      	adds	r3, r3, r2
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	18ca      	adds	r2, r1, r3
 800214a:	4bac      	ldr	r3, [pc, #688]	; (80023fc <mode_arranger+0x2f0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	18d2      	adds	r2, r2, r3
 8002150:	4bab      	ldr	r3, [pc, #684]	; (8002400 <mode_arranger+0x2f4>)
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	4ba8      	ldr	r3, [pc, #672]	; (80023f8 <mode_arranger+0x2ec>)
 8002156:	2201      	movs	r2, #1
 8002158:	601a      	str	r2, [r3, #0]
		 	 	 duty= +99;
		 	 	 if(duty>100){counter=1;}}
	 	 	 else if(counter==1){ duty=-198;
	 	 	 	 if(duty>=100){counter=0; }}

	}}
 800215a:	e147      	b.n	80023ec <mode_arranger+0x2e0>
		else if(sayac==1){
 800215c:	4ba6      	ldr	r3, [pc, #664]	; (80023f8 <mode_arranger+0x2ec>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d000      	beq.n	8002166 <mode_arranger+0x5a>
 8002164:	e142      	b.n	80023ec <mode_arranger+0x2e0>
				 duty=0; sayac=0;
 8002166:	4ba6      	ldr	r3, [pc, #664]	; (8002400 <mode_arranger+0x2f4>)
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	4ba2      	ldr	r3, [pc, #648]	; (80023f8 <mode_arranger+0x2ec>)
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
	}}
 8002172:	e13b      	b.n	80023ec <mode_arranger+0x2e0>
	else if(mode==3){
 8002174:	4b9f      	ldr	r3, [pc, #636]	; (80023f4 <mode_arranger+0x2e8>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b03      	cmp	r3, #3
 800217a:	d154      	bne.n	8002226 <mode_arranger+0x11a>
		counter=0;
 800217c:	4ba1      	ldr	r3, [pc, #644]	; (8002404 <mode_arranger+0x2f8>)
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
		 if(counter == 0 ){			////triangler
 8002182:	4ba0      	ldr	r3, [pc, #640]	; (8002404 <mode_arranger+0x2f8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d124      	bne.n	80021d4 <mode_arranger+0xc8>
				duty = (amp[3]*1000+amp[2]*100+amp[1]*10+amp[0]) +1;
 800218a:	4b9c      	ldr	r3, [pc, #624]	; (80023fc <mode_arranger+0x2f0>)
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	0013      	movs	r3, r2
 8002190:	015b      	lsls	r3, r3, #5
 8002192:	1a9b      	subs	r3, r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	189b      	adds	r3, r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	0019      	movs	r1, r3
 800219c:	4b97      	ldr	r3, [pc, #604]	; (80023fc <mode_arranger+0x2f0>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	2264      	movs	r2, #100	; 0x64
 80021a2:	4353      	muls	r3, r2
 80021a4:	18c9      	adds	r1, r1, r3
 80021a6:	4b95      	ldr	r3, [pc, #596]	; (80023fc <mode_arranger+0x2f0>)
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	0013      	movs	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	189b      	adds	r3, r3, r2
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	18ca      	adds	r2, r1, r3
 80021b4:	4b91      	ldr	r3, [pc, #580]	; (80023fc <mode_arranger+0x2f0>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	18d3      	adds	r3, r2, r3
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	4b90      	ldr	r3, [pc, #576]	; (8002400 <mode_arranger+0x2f4>)
 80021be:	601a      	str	r2, [r3, #0]
			    if ( duty == 999){ counter =1;}
 80021c0:	4b8f      	ldr	r3, [pc, #572]	; (8002400 <mode_arranger+0x2f4>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a90      	ldr	r2, [pc, #576]	; (8002408 <mode_arranger+0x2fc>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d000      	beq.n	80021cc <mode_arranger+0xc0>
 80021ca:	e10f      	b.n	80023ec <mode_arranger+0x2e0>
 80021cc:	4b8d      	ldr	r3, [pc, #564]	; (8002404 <mode_arranger+0x2f8>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	601a      	str	r2, [r3, #0]
	}}
 80021d2:	e10b      	b.n	80023ec <mode_arranger+0x2e0>
				else if (counter ==1) {
 80021d4:	4b8b      	ldr	r3, [pc, #556]	; (8002404 <mode_arranger+0x2f8>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d000      	beq.n	80021de <mode_arranger+0xd2>
 80021dc:	e106      	b.n	80023ec <mode_arranger+0x2e0>
				duty = (amp[3]*1000+amp[2]*100+amp[1]*10+amp[0]) -1;
 80021de:	4b87      	ldr	r3, [pc, #540]	; (80023fc <mode_arranger+0x2f0>)
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	0013      	movs	r3, r2
 80021e4:	015b      	lsls	r3, r3, #5
 80021e6:	1a9b      	subs	r3, r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	189b      	adds	r3, r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	0019      	movs	r1, r3
 80021f0:	4b82      	ldr	r3, [pc, #520]	; (80023fc <mode_arranger+0x2f0>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2264      	movs	r2, #100	; 0x64
 80021f6:	4353      	muls	r3, r2
 80021f8:	18c9      	adds	r1, r1, r3
 80021fa:	4b80      	ldr	r3, [pc, #512]	; (80023fc <mode_arranger+0x2f0>)
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	0013      	movs	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	189b      	adds	r3, r3, r2
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	18ca      	adds	r2, r1, r3
 8002208:	4b7c      	ldr	r3, [pc, #496]	; (80023fc <mode_arranger+0x2f0>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	18d3      	adds	r3, r2, r3
 800220e:	1e5a      	subs	r2, r3, #1
 8002210:	4b7b      	ldr	r3, [pc, #492]	; (8002400 <mode_arranger+0x2f4>)
 8002212:	601a      	str	r2, [r3, #0]
				if (duty == 0) counter =0;}
 8002214:	4b7a      	ldr	r3, [pc, #488]	; (8002400 <mode_arranger+0x2f4>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d000      	beq.n	800221e <mode_arranger+0x112>
 800221c:	e0e6      	b.n	80023ec <mode_arranger+0x2e0>
 800221e:	4b79      	ldr	r3, [pc, #484]	; (8002404 <mode_arranger+0x2f8>)
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
	}}
 8002224:	e0e2      	b.n	80023ec <mode_arranger+0x2e0>
	else if(mode==1){
 8002226:	4b73      	ldr	r3, [pc, #460]	; (80023f4 <mode_arranger+0x2e8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d000      	beq.n	8002230 <mode_arranger+0x124>
 800222e:	e090      	b.n	8002352 <mode_arranger+0x246>
		counter=0;
 8002230:	4b74      	ldr	r3, [pc, #464]	; (8002404 <mode_arranger+0x2f8>)
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
		if(counter == 0 ){			////sine
 8002236:	4b73      	ldr	r3, [pc, #460]	; (8002404 <mode_arranger+0x2f8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10d      	bne.n	800225a <mode_arranger+0x14e>
		 	 	 			 	 	duty = duty +3;
 800223e:	4b70      	ldr	r3, [pc, #448]	; (8002400 <mode_arranger+0x2f4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	1cda      	adds	r2, r3, #3
 8002244:	4b6e      	ldr	r3, [pc, #440]	; (8002400 <mode_arranger+0x2f4>)
 8002246:	601a      	str	r2, [r3, #0]
		 	 	 			 	 	if ( duty == 24){ counter =1;
 8002248:	4b6d      	ldr	r3, [pc, #436]	; (8002400 <mode_arranger+0x2f4>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b18      	cmp	r3, #24
 800224e:	d000      	beq.n	8002252 <mode_arranger+0x146>
 8002250:	e0cc      	b.n	80023ec <mode_arranger+0x2e0>
 8002252:	4b6c      	ldr	r3, [pc, #432]	; (8002404 <mode_arranger+0x2f8>)
 8002254:	2201      	movs	r2, #1
 8002256:	601a      	str	r2, [r3, #0]
	}}
 8002258:	e0c8      	b.n	80023ec <mode_arranger+0x2e0>
		 	 	 		 else if(counter ==1) {
 800225a:	4b6a      	ldr	r3, [pc, #424]	; (8002404 <mode_arranger+0x2f8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d10d      	bne.n	800227e <mode_arranger+0x172>
		 	 	 				 	duty = duty +2;
 8002262:	4b67      	ldr	r3, [pc, #412]	; (8002400 <mode_arranger+0x2f4>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	1c9a      	adds	r2, r3, #2
 8002268:	4b65      	ldr	r3, [pc, #404]	; (8002400 <mode_arranger+0x2f4>)
 800226a:	601a      	str	r2, [r3, #0]
		 	 	 				 	if (duty == 50) {counter =2;
 800226c:	4b64      	ldr	r3, [pc, #400]	; (8002400 <mode_arranger+0x2f4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b32      	cmp	r3, #50	; 0x32
 8002272:	d000      	beq.n	8002276 <mode_arranger+0x16a>
 8002274:	e0ba      	b.n	80023ec <mode_arranger+0x2e0>
 8002276:	4b63      	ldr	r3, [pc, #396]	; (8002404 <mode_arranger+0x2f8>)
 8002278:	2202      	movs	r2, #2
 800227a:	601a      	str	r2, [r3, #0]
	}}
 800227c:	e0b6      	b.n	80023ec <mode_arranger+0x2e0>
		 	 	 		 else if(counter ==2) {
 800227e:	4b61      	ldr	r3, [pc, #388]	; (8002404 <mode_arranger+0x2f8>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d10d      	bne.n	80022a2 <mode_arranger+0x196>
		 	 	 			 	 	duty = duty +1;
 8002286:	4b5e      	ldr	r3, [pc, #376]	; (8002400 <mode_arranger+0x2f4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	4b5c      	ldr	r3, [pc, #368]	; (8002400 <mode_arranger+0x2f4>)
 800228e:	601a      	str	r2, [r3, #0]
		 	 	 		 			if (duty == 75){ counter =3;
 8002290:	4b5b      	ldr	r3, [pc, #364]	; (8002400 <mode_arranger+0x2f4>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b4b      	cmp	r3, #75	; 0x4b
 8002296:	d000      	beq.n	800229a <mode_arranger+0x18e>
 8002298:	e0a8      	b.n	80023ec <mode_arranger+0x2e0>
 800229a:	4b5a      	ldr	r3, [pc, #360]	; (8002404 <mode_arranger+0x2f8>)
 800229c:	2203      	movs	r2, #3
 800229e:	601a      	str	r2, [r3, #0]
	}}
 80022a0:	e0a4      	b.n	80023ec <mode_arranger+0x2e0>
		 	 	 		 else if(counter ==3) {
 80022a2:	4b58      	ldr	r3, [pc, #352]	; (8002404 <mode_arranger+0x2f8>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b03      	cmp	r3, #3
 80022a8:	d10d      	bne.n	80022c6 <mode_arranger+0x1ba>
		 	 	 				 	duty = duty + 1;
 80022aa:	4b55      	ldr	r3, [pc, #340]	; (8002400 <mode_arranger+0x2f4>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	4b53      	ldr	r3, [pc, #332]	; (8002400 <mode_arranger+0x2f4>)
 80022b2:	601a      	str	r2, [r3, #0]
		 	 	 				 	if (duty == 100){ counter =4;
 80022b4:	4b52      	ldr	r3, [pc, #328]	; (8002400 <mode_arranger+0x2f4>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b64      	cmp	r3, #100	; 0x64
 80022ba:	d000      	beq.n	80022be <mode_arranger+0x1b2>
 80022bc:	e096      	b.n	80023ec <mode_arranger+0x2e0>
 80022be:	4b51      	ldr	r3, [pc, #324]	; (8002404 <mode_arranger+0x2f8>)
 80022c0:	2204      	movs	r2, #4
 80022c2:	601a      	str	r2, [r3, #0]
	}}
 80022c4:	e092      	b.n	80023ec <mode_arranger+0x2e0>
		 	 	 		 else if(counter ==4){
 80022c6:	4b4f      	ldr	r3, [pc, #316]	; (8002404 <mode_arranger+0x2f8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d10d      	bne.n	80022ea <mode_arranger+0x1de>
		 	 	 			 duty = duty - 1;
 80022ce:	4b4c      	ldr	r3, [pc, #304]	; (8002400 <mode_arranger+0x2f4>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	1e5a      	subs	r2, r3, #1
 80022d4:	4b4a      	ldr	r3, [pc, #296]	; (8002400 <mode_arranger+0x2f4>)
 80022d6:	601a      	str	r2, [r3, #0]
		 	 	 					 if(duty<75){counter =5;
 80022d8:	4b49      	ldr	r3, [pc, #292]	; (8002400 <mode_arranger+0x2f4>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b4a      	cmp	r3, #74	; 0x4a
 80022de:	dd00      	ble.n	80022e2 <mode_arranger+0x1d6>
 80022e0:	e084      	b.n	80023ec <mode_arranger+0x2e0>
 80022e2:	4b48      	ldr	r3, [pc, #288]	; (8002404 <mode_arranger+0x2f8>)
 80022e4:	2205      	movs	r2, #5
 80022e6:	601a      	str	r2, [r3, #0]
	}}
 80022e8:	e080      	b.n	80023ec <mode_arranger+0x2e0>
		 	 	 		 else if(counter ==5){
 80022ea:	4b46      	ldr	r3, [pc, #280]	; (8002404 <mode_arranger+0x2f8>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b05      	cmp	r3, #5
 80022f0:	d10d      	bne.n	800230e <mode_arranger+0x202>
		 	 	 		 			 duty = duty-1;
 80022f2:	4b43      	ldr	r3, [pc, #268]	; (8002400 <mode_arranger+0x2f4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	1e5a      	subs	r2, r3, #1
 80022f8:	4b41      	ldr	r3, [pc, #260]	; (8002400 <mode_arranger+0x2f4>)
 80022fa:	601a      	str	r2, [r3, #0]
		 	 	 		 			if(duty<50){counter =6;
 80022fc:	4b40      	ldr	r3, [pc, #256]	; (8002400 <mode_arranger+0x2f4>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2b31      	cmp	r3, #49	; 0x31
 8002302:	dd00      	ble.n	8002306 <mode_arranger+0x1fa>
 8002304:	e072      	b.n	80023ec <mode_arranger+0x2e0>
 8002306:	4b3f      	ldr	r3, [pc, #252]	; (8002404 <mode_arranger+0x2f8>)
 8002308:	2206      	movs	r2, #6
 800230a:	601a      	str	r2, [r3, #0]
	}}
 800230c:	e06e      	b.n	80023ec <mode_arranger+0x2e0>
		 	 	 		 else if(counter ==6){
 800230e:	4b3d      	ldr	r3, [pc, #244]	; (8002404 <mode_arranger+0x2f8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2b06      	cmp	r3, #6
 8002314:	d10c      	bne.n	8002330 <mode_arranger+0x224>
		 	 	 		 			 duty = duty-2;
 8002316:	4b3a      	ldr	r3, [pc, #232]	; (8002400 <mode_arranger+0x2f4>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	1e9a      	subs	r2, r3, #2
 800231c:	4b38      	ldr	r3, [pc, #224]	; (8002400 <mode_arranger+0x2f4>)
 800231e:	601a      	str	r2, [r3, #0]
		 	 	 		 			 if(duty<24){counter =7;
 8002320:	4b37      	ldr	r3, [pc, #220]	; (8002400 <mode_arranger+0x2f4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b17      	cmp	r3, #23
 8002326:	dc61      	bgt.n	80023ec <mode_arranger+0x2e0>
 8002328:	4b36      	ldr	r3, [pc, #216]	; (8002404 <mode_arranger+0x2f8>)
 800232a:	2207      	movs	r2, #7
 800232c:	601a      	str	r2, [r3, #0]
	}}
 800232e:	e05d      	b.n	80023ec <mode_arranger+0x2e0>
		 	 	 		 else if(counter ==7){
 8002330:	4b34      	ldr	r3, [pc, #208]	; (8002404 <mode_arranger+0x2f8>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b07      	cmp	r3, #7
 8002336:	d159      	bne.n	80023ec <mode_arranger+0x2e0>
		 	 	 			 	 	 duty= duty-3;
 8002338:	4b31      	ldr	r3, [pc, #196]	; (8002400 <mode_arranger+0x2f4>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	1eda      	subs	r2, r3, #3
 800233e:	4b30      	ldr	r3, [pc, #192]	; (8002400 <mode_arranger+0x2f4>)
 8002340:	601a      	str	r2, [r3, #0]
		 	 	 			 	 	 if(duty==0){counter=0;
 8002342:	4b2f      	ldr	r3, [pc, #188]	; (8002400 <mode_arranger+0x2f4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d150      	bne.n	80023ec <mode_arranger+0x2e0>
 800234a:	4b2e      	ldr	r3, [pc, #184]	; (8002404 <mode_arranger+0x2f8>)
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
	}}
 8002350:	e04c      	b.n	80023ec <mode_arranger+0x2e0>
	else if(mode==4){
 8002352:	4b28      	ldr	r3, [pc, #160]	; (80023f4 <mode_arranger+0x2e8>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b04      	cmp	r3, #4
 8002358:	d123      	bne.n	80023a2 <mode_arranger+0x296>
		counter=0;
 800235a:	4b2a      	ldr	r3, [pc, #168]	; (8002404 <mode_arranger+0x2f8>)
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
		if(counter == 0){				////sawtooth
 8002360:	4b28      	ldr	r3, [pc, #160]	; (8002404 <mode_arranger+0x2f8>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10d      	bne.n	8002384 <mode_arranger+0x278>
			 duty= duty+1;
 8002368:	4b25      	ldr	r3, [pc, #148]	; (8002400 <mode_arranger+0x2f4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	4b24      	ldr	r3, [pc, #144]	; (8002400 <mode_arranger+0x2f4>)
 8002370:	601a      	str	r2, [r3, #0]
		 	 if(duty == 9900){ counter =1;}}
 8002372:	4b23      	ldr	r3, [pc, #140]	; (8002400 <mode_arranger+0x2f4>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a25      	ldr	r2, [pc, #148]	; (800240c <mode_arranger+0x300>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d137      	bne.n	80023ec <mode_arranger+0x2e0>
 800237c:	4b21      	ldr	r3, [pc, #132]	; (8002404 <mode_arranger+0x2f8>)
 800237e:	2201      	movs	r2, #1
 8002380:	601a      	str	r2, [r3, #0]
	}}
 8002382:	e033      	b.n	80023ec <mode_arranger+0x2e0>
		 else if(counter ==1){ duty=0;
 8002384:	4b1f      	ldr	r3, [pc, #124]	; (8002404 <mode_arranger+0x2f8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d12f      	bne.n	80023ec <mode_arranger+0x2e0>
 800238c:	4b1c      	ldr	r3, [pc, #112]	; (8002400 <mode_arranger+0x2f4>)
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
		 	 if (duty==0){counter=0;}
 8002392:	4b1b      	ldr	r3, [pc, #108]	; (8002400 <mode_arranger+0x2f4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d128      	bne.n	80023ec <mode_arranger+0x2e0>
 800239a:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <mode_arranger+0x2f8>)
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
	}}
 80023a0:	e024      	b.n	80023ec <mode_arranger+0x2e0>
	else if(mode==5){
 80023a2:	4b14      	ldr	r3, [pc, #80]	; (80023f4 <mode_arranger+0x2e8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2b05      	cmp	r3, #5
 80023a8:	d120      	bne.n	80023ec <mode_arranger+0x2e0>
		counter=0;
 80023aa:	4b16      	ldr	r3, [pc, #88]	; (8002404 <mode_arranger+0x2f8>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
		 if(counter == 0 ){			////white noise
 80023b0:	4b14      	ldr	r3, [pc, #80]	; (8002404 <mode_arranger+0x2f8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10a      	bne.n	80023ce <mode_arranger+0x2c2>
		 	 	 duty= +99;
 80023b8:	4b11      	ldr	r3, [pc, #68]	; (8002400 <mode_arranger+0x2f4>)
 80023ba:	2263      	movs	r2, #99	; 0x63
 80023bc:	601a      	str	r2, [r3, #0]
		 	 	 if(duty>100){counter=1;}}
 80023be:	4b10      	ldr	r3, [pc, #64]	; (8002400 <mode_arranger+0x2f4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2b64      	cmp	r3, #100	; 0x64
 80023c4:	dd12      	ble.n	80023ec <mode_arranger+0x2e0>
 80023c6:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <mode_arranger+0x2f8>)
 80023c8:	2201      	movs	r2, #1
 80023ca:	601a      	str	r2, [r3, #0]
	}}
 80023cc:	e00e      	b.n	80023ec <mode_arranger+0x2e0>
	 	 	 else if(counter==1){ duty=-198;
 80023ce:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <mode_arranger+0x2f8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d10a      	bne.n	80023ec <mode_arranger+0x2e0>
 80023d6:	4b0a      	ldr	r3, [pc, #40]	; (8002400 <mode_arranger+0x2f4>)
 80023d8:	22c6      	movs	r2, #198	; 0xc6
 80023da:	4252      	negs	r2, r2
 80023dc:	601a      	str	r2, [r3, #0]
	 	 	 	 if(duty>=100){counter=0; }}
 80023de:	4b08      	ldr	r3, [pc, #32]	; (8002400 <mode_arranger+0x2f4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2b63      	cmp	r3, #99	; 0x63
 80023e4:	dd02      	ble.n	80023ec <mode_arranger+0x2e0>
 80023e6:	4b07      	ldr	r3, [pc, #28]	; (8002404 <mode_arranger+0x2f8>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
	}}
 80023ec:	46c0      	nop			; (mov r8, r8)
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	46c0      	nop			; (mov r8, r8)
 80023f4:	20000000 	.word	0x20000000
 80023f8:	20000040 	.word	0x20000040
 80023fc:	20000064 	.word	0x20000064
 8002400:	20000014 	.word	0x20000014
 8002404:	2000003c 	.word	0x2000003c
 8002408:	000003e7 	.word	0x000003e7
 800240c:	000026ac 	.word	0x000026ac

08002410 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

void TIM1_BRK_UP_TRG_COM_IRQHandler(void) {
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0

	 mode_arranger();
 8002414:	f7ff fe7a 	bl	800210c <mode_arranger>

	 TIM2 -> CCR2 = duty;
 8002418:	4b06      	ldr	r3, [pc, #24]	; (8002434 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x24>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	2380      	movs	r3, #128	; 0x80
 800241e:	05db      	lsls	r3, r3, #23
 8002420:	639a      	str	r2, [r3, #56]	; 0x38

	 TIM1 -> SR &= ~(1U << 0);
 8002422:	4b05      	ldr	r3, [pc, #20]	; (8002438 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x28>)
 8002424:	691a      	ldr	r2, [r3, #16]
 8002426:	4b04      	ldr	r3, [pc, #16]	; (8002438 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x28>)
 8002428:	2101      	movs	r1, #1
 800242a:	438a      	bics	r2, r1
 800242c:	611a      	str	r2, [r3, #16]
}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	20000014 	.word	0x20000014
 8002438:	40012c00 	.word	0x40012c00

0800243c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0

 TIM2 -> SR &= ~(1U << 0);
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	05db      	lsls	r3, r3, #23
 8002444:	691a      	ldr	r2, [r3, #16]
 8002446:	2380      	movs	r3, #128	; 0x80
 8002448:	05db      	lsls	r3, r3, #23
 800244a:	2101      	movs	r1, #1
 800244c:	438a      	bics	r2, r1
 800244e:	611a      	str	r2, [r3, #16]
}
 8002450:	46c0      	nop			; (mov r8, r8)
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <main>:
 *
 */

#include "bsp.h"

int main(void) {
 8002456:	b580      	push	{r7, lr}
 8002458:	af00      	add	r7, sp, #0
	//NVIC_SetPriority(TIM2_IRQn, 2);
   // NVIC_EnableIRQ(TIM2_IRQn);

 	init_all(); // initialize the system
 800245a:	f7fe feff 	bl	800125c <init_all>
 	//init_timer_2();
	PWM_init();
 800245e:	f7ff fd31 	bl	8001ec4 <PWM_init>
 	init_timer1();
 8002462:	f7ff fdff 	bl	8002064 <init_timer1>
    while(1){
    	compare_display(); // call the display function which will be interrupted by external keypad presses
 8002466:	f7ff f959 	bl	800171c <compare_display>
 800246a:	e7fc      	b.n	8002466 <main+0x10>

0800246c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800246c:	480d      	ldr	r0, [pc, #52]	; (80024a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800246e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002470:	f000 f826 	bl	80024c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002474:	480c      	ldr	r0, [pc, #48]	; (80024a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002476:	490d      	ldr	r1, [pc, #52]	; (80024ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002478:	4a0d      	ldr	r2, [pc, #52]	; (80024b0 <LoopForever+0xe>)
  movs r3, #0
 800247a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800247c:	e002      	b.n	8002484 <LoopCopyDataInit>

0800247e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800247e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002482:	3304      	adds	r3, #4

08002484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002488:	d3f9      	bcc.n	800247e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800248a:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800248c:	4c0a      	ldr	r4, [pc, #40]	; (80024b8 <LoopForever+0x16>)
  movs r3, #0
 800248e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002490:	e001      	b.n	8002496 <LoopFillZerobss>

08002492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002494:	3204      	adds	r2, #4

08002496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002498:	d3fb      	bcc.n	8002492 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800249a:	f000 f81d 	bl	80024d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800249e:	f7ff ffda 	bl	8002456 <main>

080024a2 <LoopForever>:

LoopForever:
    b LoopForever
 80024a2:	e7fe      	b.n	80024a2 <LoopForever>
  ldr   r0, =_estack
 80024a4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80024a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024ac:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80024b0:	080025e4 	.word	0x080025e4
  ldr r2, =_sbss
 80024b4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80024b8:	200000b4 	.word	0x200000b4

080024bc <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024bc:	e7fe      	b.n	80024bc <ADC_COMP_IRQHandler>
	...

080024c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024c4:	4b03      	ldr	r3, [pc, #12]	; (80024d4 <SystemInit+0x14>)
 80024c6:	2280      	movs	r2, #128	; 0x80
 80024c8:	0512      	lsls	r2, r2, #20
 80024ca:	609a      	str	r2, [r3, #8]
#endif
}
 80024cc:	46c0      	nop			; (mov r8, r8)
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <__libc_init_array>:
 80024d8:	b570      	push	{r4, r5, r6, lr}
 80024da:	2600      	movs	r6, #0
 80024dc:	4d0c      	ldr	r5, [pc, #48]	; (8002510 <__libc_init_array+0x38>)
 80024de:	4c0d      	ldr	r4, [pc, #52]	; (8002514 <__libc_init_array+0x3c>)
 80024e0:	1b64      	subs	r4, r4, r5
 80024e2:	10a4      	asrs	r4, r4, #2
 80024e4:	42a6      	cmp	r6, r4
 80024e6:	d109      	bne.n	80024fc <__libc_init_array+0x24>
 80024e8:	2600      	movs	r6, #0
 80024ea:	f000 f819 	bl	8002520 <_init>
 80024ee:	4d0a      	ldr	r5, [pc, #40]	; (8002518 <__libc_init_array+0x40>)
 80024f0:	4c0a      	ldr	r4, [pc, #40]	; (800251c <__libc_init_array+0x44>)
 80024f2:	1b64      	subs	r4, r4, r5
 80024f4:	10a4      	asrs	r4, r4, #2
 80024f6:	42a6      	cmp	r6, r4
 80024f8:	d105      	bne.n	8002506 <__libc_init_array+0x2e>
 80024fa:	bd70      	pop	{r4, r5, r6, pc}
 80024fc:	00b3      	lsls	r3, r6, #2
 80024fe:	58eb      	ldr	r3, [r5, r3]
 8002500:	4798      	blx	r3
 8002502:	3601      	adds	r6, #1
 8002504:	e7ee      	b.n	80024e4 <__libc_init_array+0xc>
 8002506:	00b3      	lsls	r3, r6, #2
 8002508:	58eb      	ldr	r3, [r5, r3]
 800250a:	4798      	blx	r3
 800250c:	3601      	adds	r6, #1
 800250e:	e7f2      	b.n	80024f6 <__libc_init_array+0x1e>
 8002510:	080025dc 	.word	0x080025dc
 8002514:	080025dc 	.word	0x080025dc
 8002518:	080025dc 	.word	0x080025dc
 800251c:	080025e0 	.word	0x080025e0

08002520 <_init>:
 8002520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002526:	bc08      	pop	{r3}
 8002528:	469e      	mov	lr, r3
 800252a:	4770      	bx	lr

0800252c <_fini>:
 800252c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800252e:	46c0      	nop			; (mov r8, r8)
 8002530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002532:	bc08      	pop	{r3}
 8002534:	469e      	mov	lr, r3
 8002536:	4770      	bx	lr
